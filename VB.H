#ifndef VB_H                                                            
#define VB_H                                                            
                                                                        
    // #pragma region keyword marks                                     
        #define VB_C_COUNT_NEGATIVE_DELTA VB_C_COUNT_NEGATIVE_DELTA     
        #define VB_C_COUNT_NEGATIVE_RANGE VB_C_COUNT_NEGATIVE_RANGE     
        #define VB_C_COUNT_POSITIVE_DELTA VB_C_COUNT_POSITIVE_DELTA     
        #define VB_C_COUNT_POSITIVE_RANGE VB_C_COUNT_POSITIVE_RANGE     
        #define VB_C_COUNT_ZERO_DELTA     VB_C_COUNT_ZERO_DELTA         
        #define __VB_C_AFTER_M            __VB_C_AFTER_M                
        #define __VB_C_ANONYMOUS_M        __VB_C_ANONYMOUS_M            
        #define __VB_C_ARRAY_M            __VB_C_ARRAY_M                
        #define __VB_C_AS_M               __VB_C_AS_M                   
        #define __VB_C_BEFORE_M           __VB_C_BEFORE_M               
        #define __VB_C_BY_M               __VB_C_BY_M                   
        #define __VB_C_CASE_M             __VB_C_CASE_M                 
        #define __VB_C_DEFAULT_M          __VB_C_DEFAULT_M              
        #define __VB_C_DIDNT_BREAK_M      __VB_C_DIDNT_BREAK_M          
        #define __VB_C_ELSE_M             __VB_C_ELSE_M                 
        #define __VB_C_END_M              __VB_C_END_M                  
        #define __VB_C_FROM_M             __VB_C_FROM_M                 
        #define __VB_C_FUNC_M             __VB_C_FUNC_M                 
        #define __VB_C_GENERIC_M          __VB_C_GENERIC_M              
        #define __VB_C_IF_M               __VB_C_IF_M                   
        #define __VB_C_IN_M               __VB_C_IN_M                   
        #define __VB_C_POINTER_M          __VB_C_POINTER_M              
        #define __VB_C_RETURNING_M        __VB_C_RETURNING_M            
        #define __VB_C_REVERSED_M         __VB_C_REVERSED_M             
        #define __VB_C_START_M            __VB_C_START_M                
        #define __VB_C_STEP_M             __VB_C_STEP_M                 
        #define __VB_C_THEN_M             __VB_C_THEN_M                 
        #define __VB_C_TO_M               __VB_C_TO_M                   
        #define __VB_C_SLICED_M           __VB_C_SLICED_M               
    // #pragma endregion                                                
                                                                        
    // #pragma region basic
        #define VB_C_CODE(...) __VB_C_CODE_F0(__VA_ARGS__)                                               
        #define __VB_C_CODE_F0(...) __VA_ARGS__                                                          
        #define VB_C_FILE VB_C_CODE                                                                      
                                                                                                         
        #define __VB_C_ARGS(...) __VA_ARGS__                                                             
                                                                                                         
        #define __VB_C_FIRST_F0(...) __VB_C_FIRST_F1(__VA_ARGS__)                                        
        #define __VB_C_FIRST_F1(first, ...) first                                                        
                                                                                                         
        #define __VB_C_HAS_ARGX_F0(...) __VB_C_FIRST_F0(__VB_C_HAS_ARG_F1(9,    __VA_ARGS__, ))          
        #define __VB_C_HAS_ARG_F0(...)                  __VB_C_HAS_ARG_F1(9,    __VA_ARGS__, )           
        #define __VB_C_HAS_ARG_F1(_, arg, ...)          __VB_C_HAS_ARG_F2(arg)                           
        #define __VB_C_HAS_ARG_F2(        ...)          __VB_C_HAS_ARG_F3(9, ## __VA_ARGS__, 1, 0)       
        #define __VB_C_HAS_ARG_F3(_, arg, n, ...)       __VB_C_HAS_ARG_F4_##n(arg)                       
        #define __VB_C_HAS_ARG_F4_0( arg) 0,                                                             
        #define __VB_C_HAS_ARG_F4_1( arg) 1, arg                                                         
                                                                                                         
        // #pragma region remove optional bracket                                                        
            #define __VB_C_RRB4_F0(...) __VB_C_RRB_F0(__VB_C_RRB3_F0(__VA_ARGS__))                       
            #define __VB_C_RRB3_F0(...) __VB_C_RRB_F0(__VB_C_RRB2_F0(__VA_ARGS__))                       
            #define __VB_C_RRB2_F0(...) __VB_C_RRB_F0(__VB_C_RRB_F0(__VA_ARGS__))                        
            #define __VB_C_RRB_F0(...) __VB_C_RRB_F1(__VA_ARGS__)                                        
            #define __VB_C_RRB_F1(...) __VB_C_ARGS __VA_ARGS__                                           
                                                                                                         
            #define __VB_C_AOBX_F0(       ...) (__VB_C_ROBX_F0(               __VA_ARGS__))              
            #define __VB_C_ROB2X_F0(      ...)  __VB_C_ROBX_F0(__VB_C_ROBX_F0(__VA_ARGS__))              
            #define __VB_C_ROB2_F0(       ...)  __VB_C_ROB2_F1(__VB_C_ROB_F0 (__VA_ARGS__))              
            #define __VB_C_ROB2_F1(       ...)  __VB_C_ROB2_F2(               __VA_ARGS__ )              
            #define __VB_C_ROB2_F2(m,     ...)  m,             __VB_C_ROB_F0 (__VA_ARGS__)               
            #define __VB_C_ROB2_F3(       ...)  __VB_C_ROB2_F4(__VB_C_ROB_F0 (__VA_ARGS__))              
            #define __VB_C_ROBX_F0(       ...)  __VB_C_ROBX_F1(__VB_C_ROB_F0 (__VA_ARGS__))              
            #define __VB_C_ROBX_F1(       ...)  __VB_C_ROBX_F2(               __VA_ARGS__ )              
            #define __VB_C_ROBX_F2(n,     ...)                                __VA_ARGS__                
            #define __VB_C_ROB_F0(        ...)  __VB_C_ROB_F1(                __VA_ARGS__ )              
            #define __VB_C_ROB_F1(        ...)  __VB_C_ROB_F2(__VB_C_ROB_X    __VA_ARGS__ )              
            #define __VB_C_ROB_F2(        ...)  __VB_C_ROB_F3(                __VA_ARGS__ )              
            #define __VB_C_ROB_F3(        ...)  __VB_C_ROB_F4X##              __VA_ARGS__                
            #define __VB_C_ROB_F4X__VB_C_ROB_X 0,                                                        
            #define __VB_C_ROB_F4X__VB_C_ROB_M 1,                                                        
            #define __VB_C_ROB_X(...) __VB_C_ROB_M __VA_ARGS__                                           
        // #pragma endregion                                                                             
                                                                                                                                                     
        #define __VB_C_MERGE_F0(a1, b1) __VB_C_MERGE_F1(__VB_C_HAS_ARGX_F0(__VB_C_RRB_F0(a1)), __VB_C_HAS_ARGX_F0(__VB_C_RRB_F0(b1)), a1, b1)        
        #define __VB_C_MERGE_F1(...   ) __VB_C_MERGE_F2(__VA_ARGS__)                                                                                 
        #define __VB_C_MERGE_F2(has_a, has_b, a1, b1) __VB_C_MERGE_F2_ ## has_a ## has_b ## _F0(a1, b1)                                              
        #define __VB_C_MERGE_F2_00_F0(a1, b1) ()                                                                                                     
        #define __VB_C_MERGE_F2_01_F0(a1, b1) b1                                                                                                     
        #define __VB_C_MERGE_F2_10_F0(a1, b1) a1                                                                                                     
        #define __VB_C_MERGE_F2_11_F0(a1, b1) (__VB_C_RRB_F0(a1), __VB_C_RRB_F0(b1))                                                                 
                                                                                                                                                     
        // #pragma region labels                                                                                           
            #define   VB_C_LABEL(   name, purpose) __VB_C_LABEL_F0(__VB_C_ROB2X_F0(name), __VB_C_ROB2X_F0(purpose))        
            #define __VB_C_LABEL_F0(name, purpose) __VB_C_LABEL_F1(name, purpose)                                          
            #define __VB_C_LABEL_F1(name, purpose) __VB_C_##name##__VB_C_##purpose##_L                                     
            #if defined _MSC_VER                                                                                           
            // #if 1                                                                                                       
                #define __VB_C_IMPLEMENTS_LOCAL_LABEL 0                                                                    
            #else                                                                                                          
                #define __VB_C_IMPLEMENTS_LOCAL_LABEL 1                                                                    
            #endif                                                                                                         
        // #pragma endregion                                                                                               
                                                                                                 
        #define __VB_C_LB (                                                                      
        #define __VB_C_RB )                                                                      
                                                                                                 
        #define START  ))), __VB_C_START_M, (((                                                  
        #define END   )))), __VB_C_END_M __VB_C_RB                                               
                                                                                                 
        #define VB_C_FORCE_SEMICOLON_AFTER_THIS do {} while(0)                                   
    // #pragma endregion                                                                         
                                                                                                 
    // #pragma region error checking                                                                                                                                                                          
        #define __VB_C_ERROR_F0(...) ::: "VB.C ERROR": __VA_ARGS__ :::                                                                                                                                        
        // #define __VB_C_CHECK_KEYWORD_F0(msg, mark, ...) if err then return msg else return void                                                                                                            
        #ifdef VB_C_CHECK_KEYWORDS                                                                                                                                                                            
            #define __VB_C_CHECK_KEYWORD_F0(msg, mark, ...) __VB_C_CHECK_KEYWORD_F1(msg ": got" (mark) "but expected one of" (__VA_ARGS__), mark, __VB_C_HAS_ARG_F0(__VA_ARGS__), ## __VA_ARGS__)             
        #else                                                                                                                                                                                                 
            #define __VB_C_CHECK_KEYWORD_F0(msg, mark, ...)                                                                                                                                                   
        #endif                                                                                                                                                                                                
    // #pragma endregion                                                                                                                                                                                      
                                                                                                                                                                                                              
    // #pragma region types                                                                                                                                                                                                    
        // #pragma region resolve                                                                                                                                                                                              
            #define __VB_C_TYPE_CHECK_KEYWORD(mark) __VB_C_CHECK_KEYWORD_F0("You can only declare raw type, POINTER, ARRAY, or FUNC", mark, __VB_C_END_M, __VB_C_POINTER_M, __VB_C_ARRAY_M, __VB_C_FUNC_M)                     
            // #define __VB_C_TYPE_RESOLVE_F0(var1, type1,   ...) #type1                                                                                                                                                       
            #define __VB_C_TYPE_RESOLVE_F0(var1, type1,   ...) __VB_C_TYPE_RESOLVE_F1(var1, __VB_C_RRB_F0(type1), __VB_C_END_M)                                                                                                
            #define __VB_C_TYPE_RESOLVE_F1(var1,          ...) __VB_C_TYPE_RESOLVE_F2(var1, __VA_ARGS__)                                                                                                                       
            #define __VB_C_TYPE_RESOLVE_F2(var1, x, mark, ...) __VB_C_TYPE_RECURSION_F0(mark, var1, x, __VA_ARGS__)                                                                                                            
                                                                                                                                                                                                                               
            // #pragma region I need recursion                                                                                                                                                                                 
                #define __VB_C_TYPE_RECURSION_F0(mark, ...) __VB_C_TYPE_CHECK_KEYWORD(mark) __VB_C_TYPE_RECURSION_F0_ ## mark ## _F0(__VA_ARGS__)                                                                              
                #define __VB_C_TYPE_RECURSION_F1(mark, ...) __VB_C_TYPE_CHECK_KEYWORD(mark) __VB_C_TYPE_RECURSION_F1_ ## mark ## _F0(__VA_ARGS__)                                                                              
                #define __VB_C_TYPE_RECURSION_F2(mark, ...) __VB_C_TYPE_CHECK_KEYWORD(mark) __VB_C_TYPE_RECURSION_F2_ ## mark ## _F0(__VA_ARGS__)                                                                              
                #define __VB_C_TYPE_RECURSION_F3(mark, ...) __VB_C_TYPE_CHECK_KEYWORD(mark) __VB_C_TYPE_RECURSION_F3_ ## mark ## _F0(__VA_ARGS__)                                                                              
                #define __VB_C_TYPE_RECURSION_F4(mark, ...) __VB_C_TYPE_CHECK_KEYWORD(mark) __VB_C_TYPE_RECURSION_F4_ ## mark ## _F0(__VA_ARGS__)                                                                              
                #define __VB_C_TYPE_RECURSION_F5(mark, ...) __VB_C_TYPE_CHECK_KEYWORD(mark) __VB_C_TYPE_RECURSION_F5_ ## mark ## _F0(__VA_ARGS__)                                                                              
                #define __VB_C_TYPE_RECURSION_F6(mark, ...) __VB_C_TYPE_CHECK_KEYWORD(mark) __VB_C_TYPE_RECURSION_F6_ ## mark ## _F0(__VA_ARGS__)                                                                              
                #define __VB_C_TYPE_RECURSION_F7(mark, ...) __VB_C_TYPE_CHECK_KEYWORD(mark) __VB_C_TYPE_RECURSION_F7_ ## mark ## _F0(__VA_ARGS__)                                                                              
                #define __VB_C_TYPE_RECURSION_F8(mark, ...) __VB_C_TYPE_CHECK_KEYWORD(mark) __VB_C_TYPE_RECURSION_F8_ ## mark ## _F0(__VA_ARGS__)                                                                              
                #define __VB_C_TYPE_RECURSION_F9(mark, ...) __VB_C_TYPE_CHECK_KEYWORD(mark) __VB_C_TYPE_RECURSION_F9_ ## mark ## _F0(__VA_ARGS__)                                                                              
                                                                                                                                                                                                                               
                #define __VB_C_TYPE_RECURSION_F0___VB_C_END_M_F0(var1, type2, ...) __VB_C_ROBX_F0(__VB_C_RRB2_F0(type2)) var1                                                                                                  
                #define __VB_C_TYPE_RECURSION_F1___VB_C_END_M_F0(var1, type2, ...) __VB_C_ROBX_F0(__VB_C_RRB2_F0(type2)) var1                                                                                                  
                #define __VB_C_TYPE_RECURSION_F2___VB_C_END_M_F0(var1, type2, ...) __VB_C_ROBX_F0(__VB_C_RRB2_F0(type2)) var1                                                                                                  
                #define __VB_C_TYPE_RECURSION_F3___VB_C_END_M_F0(var1, type2, ...) __VB_C_ROBX_F0(__VB_C_RRB2_F0(type2)) var1                                                                                                  
                #define __VB_C_TYPE_RECURSION_F4___VB_C_END_M_F0(var1, type2, ...) __VB_C_ROBX_F0(__VB_C_RRB2_F0(type2)) var1                                                                                                  
                #define __VB_C_TYPE_RECURSION_F5___VB_C_END_M_F0(var1, type2, ...) __VB_C_ROBX_F0(__VB_C_RRB2_F0(type2)) var1                                                                                                  
                #define __VB_C_TYPE_RECURSION_F6___VB_C_END_M_F0(var1, type2, ...) __VB_C_ROBX_F0(__VB_C_RRB2_F0(type2)) var1                                                                                                  
                #define __VB_C_TYPE_RECURSION_F7___VB_C_END_M_F0(var1, type2, ...) __VB_C_ROBX_F0(__VB_C_RRB2_F0(type2)) var1                                                                                                  
                #define __VB_C_TYPE_RECURSION_F8___VB_C_END_M_F0(var1, type2, ...) __VB_C_ROBX_F0(__VB_C_RRB2_F0(type2)) var1                                                                                                  
                #define __VB_C_TYPE_RECURSION_F9___VB_C_END_M_F0(var1, type2, ...) __VB_C_ROBX_F0(__VB_C_RRB2_F0(type2)) var1                                                                                                  
                                                                                                                                                                                                                               
                #define __VB_C_TYPE_RECURSION_PINFO_F0(pinfo1,     ...) __VB_C_TYPE_RECURSION_PINFO_F1(__VB_C_RRB_F0(pinfo1))                                                                                                  
                #define __VB_C_TYPE_RECURSION_PINFO_F1(            ...) __VB_C_TYPE_RECURSION_PINFO_F2(__VA_ARGS__          )                                                                                                  
                #define __VB_C_TYPE_RECURSION_PINFO_F2(_, to_m, x, ...) (__VB_C_CHECK_KEYWORD_F0("missing TO after POINTER, syntax is `POINTER TO type`", to_m, __VB_C_TO_M) x)                                                
                #define __VB_C_TYPE_RECURSION_F0___VB_C_POINTER_M_F0(var1, qual2, pinfo1, mark, ...) __VB_C_TYPE_RECURSION_F1(mark, (* __VB_C_RRB2_F0(qual2) var1), __VB_C_TYPE_RECURSION_PINFO_F0(pinfo1), __VA_ARGS__)       
                #define __VB_C_TYPE_RECURSION_F1___VB_C_POINTER_M_F0(var1, qual2, pinfo1, mark, ...) __VB_C_TYPE_RECURSION_F2(mark, (* __VB_C_RRB2_F0(qual2) var1), __VB_C_TYPE_RECURSION_PINFO_F0(pinfo1), __VA_ARGS__)       
                #define __VB_C_TYPE_RECURSION_F2___VB_C_POINTER_M_F0(var1, qual2, pinfo1, mark, ...) __VB_C_TYPE_RECURSION_F3(mark, (* __VB_C_RRB2_F0(qual2) var1), __VB_C_TYPE_RECURSION_PINFO_F0(pinfo1), __VA_ARGS__)       
                #define __VB_C_TYPE_RECURSION_F3___VB_C_POINTER_M_F0(var1, qual2, pinfo1, mark, ...) __VB_C_TYPE_RECURSION_F4(mark, (* __VB_C_RRB2_F0(qual2) var1), __VB_C_TYPE_RECURSION_PINFO_F0(pinfo1), __VA_ARGS__)       
                #define __VB_C_TYPE_RECURSION_F4___VB_C_POINTER_M_F0(var1, qual2, pinfo1, mark, ...) __VB_C_TYPE_RECURSION_F5(mark, (* __VB_C_RRB2_F0(qual2) var1), __VB_C_TYPE_RECURSION_PINFO_F0(pinfo1), __VA_ARGS__)       
                #define __VB_C_TYPE_RECURSION_F5___VB_C_POINTER_M_F0(var1, qual2, pinfo1, mark, ...) __VB_C_TYPE_RECURSION_F6(mark, (* __VB_C_RRB2_F0(qual2) var1), __VB_C_TYPE_RECURSION_PINFO_F0(pinfo1), __VA_ARGS__)       
                #define __VB_C_TYPE_RECURSION_F6___VB_C_POINTER_M_F0(var1, qual2, pinfo1, mark, ...) __VB_C_TYPE_RECURSION_F7(mark, (* __VB_C_RRB2_F0(qual2) var1), __VB_C_TYPE_RECURSION_PINFO_F0(pinfo1), __VA_ARGS__)       
                #define __VB_C_TYPE_RECURSION_F7___VB_C_POINTER_M_F0(var1, qual2, pinfo1, mark, ...) __VB_C_TYPE_RECURSION_F8(mark, (* __VB_C_RRB2_F0(qual2) var1), __VB_C_TYPE_RECURSION_PINFO_F0(pinfo1), __VA_ARGS__)       
                #define __VB_C_TYPE_RECURSION_F8___VB_C_POINTER_M_F0(var1, qual2, pinfo1, mark, ...) __VB_C_TYPE_RECURSION_F9(mark, (* __VB_C_RRB2_F0(qual2) var1), __VB_C_TYPE_RECURSION_PINFO_F0(pinfo1), __VA_ARGS__)       
                #define __VB_C_TYPE_RECURSION_F9___VB_C_POINTER_M_F0(var1, qual2, pinfo1, mark, ...) __VB_C_ERROR_F0("Type too deep")                                                                                          
                                                                                                                                                                                                                               
                #define __VB_C_TYPE_RECURSION_FUNC_HELPER_F0(var1, qual2, finfo1,                ...) __VB_C_TYPE_RECURSION_FUNC_HELPER_F1(var1, qual2, __VB_C_RRB_F0(finfo1), __VA_ARGS__)                                    
                #define __VB_C_TYPE_RECURSION_FUNC_HELPER_F1(                                    ...) __VB_C_TYPE_RECURSION_FUNC_HELPER_F2(__VA_ARGS__, __VB_C_END_M, __VB_C_END_M)                                            
                #define __VB_C_TYPE_RECURSION_FUNC_HELPER_F2(var1, qual2, args1, mark, x, ...) ((* __VB_C_RRB2_F0(qual2) var1) __VB_C_RRB_F0(args1)), __VB_C_FUNCTION_RETURN_TYPE_F0(((void)), mark, (x), __VA_ARGS__)         
                #define __VB_C_TYPE_RECURSION_F0___VB_C_FUNC_M_F0(   var1, qual2, finfo1, mark, ...) __VB_C_TYPE_RECURSION_F1(mark, __VB_C_TYPE_RECURSION_FUNC_HELPER_F0(var1, qual2, finfo1, __VA_ARGS__))                    
                #define __VB_C_TYPE_RECURSION_F1___VB_C_FUNC_M_F0(   var1, qual2, finfo1, mark, ...) __VB_C_TYPE_RECURSION_F2(mark, __VB_C_TYPE_RECURSION_FUNC_HELPER_F0(var1, qual2, finfo1, __VA_ARGS__))                    
                #define __VB_C_TYPE_RECURSION_F2___VB_C_FUNC_M_F0(   var1, qual2, finfo1, mark, ...) __VB_C_TYPE_RECURSION_F3(mark, __VB_C_TYPE_RECURSION_FUNC_HELPER_F0(var1, qual2, finfo1, __VA_ARGS__))                    
                #define __VB_C_TYPE_RECURSION_F3___VB_C_FUNC_M_F0(   var1, qual2, finfo1, mark, ...) __VB_C_TYPE_RECURSION_F4(mark, __VB_C_TYPE_RECURSION_FUNC_HELPER_F0(var1, qual2, finfo1, __VA_ARGS__))                    
                #define __VB_C_TYPE_RECURSION_F4___VB_C_FUNC_M_F0(   var1, qual2, finfo1, mark, ...) __VB_C_TYPE_RECURSION_F5(mark, __VB_C_TYPE_RECURSION_FUNC_HELPER_F0(var1, qual2, finfo1, __VA_ARGS__))                    
                #define __VB_C_TYPE_RECURSION_F5___VB_C_FUNC_M_F0(   var1, qual2, finfo1, mark, ...) __VB_C_TYPE_RECURSION_F6(mark, __VB_C_TYPE_RECURSION_FUNC_HELPER_F0(var1, qual2, finfo1, __VA_ARGS__))                    
                #define __VB_C_TYPE_RECURSION_F6___VB_C_FUNC_M_F0(   var1, qual2, finfo1, mark, ...) __VB_C_TYPE_RECURSION_F7(mark, __VB_C_TYPE_RECURSION_FUNC_HELPER_F0(var1, qual2, finfo1, __VA_ARGS__))                    
                #define __VB_C_TYPE_RECURSION_F7___VB_C_FUNC_M_F0(   var1, qual2, finfo1, mark, ...) __VB_C_TYPE_RECURSION_F8(mark, __VB_C_TYPE_RECURSION_FUNC_HELPER_F0(var1, qual2, finfo1, __VA_ARGS__))                    
                #define __VB_C_TYPE_RECURSION_F8___VB_C_FUNC_M_F0(   var1, qual2, finfo1, mark, ...) __VB_C_TYPE_RECURSION_F9(mark, __VB_C_TYPE_RECURSION_FUNC_HELPER_F0(var1, qual2, finfo1, __VA_ARGS__))                    
                #define __VB_C_TYPE_RECURSION_F9___VB_C_FUNC_M_F0(   var1, qual2, finfo1, mark, ...) __VB_C_ERROR_F0("Type too deep")                                                                                          
                                                                                                                                                                                                                               
                // BLACK MAGIC                                                                                                                                                                                                 
                #define __VB_C_TYPE_RECURSION_ARRAY_HELPER_F0(   id, var1, atype1, dim2,          ...) __VB_C_TYPE_RECURSION_ARRAY_HELPER_F1(id, var1, dim2, __VB_C_RRB2_F0(atype1), __VA_ARGS__)                              
                #define __VB_C_TYPE_RECURSION_ARRAY_HELPER_F1(   id, var1,         dim2,          ...) __VB_C_TYPE_RECURSION_ARRAY_HELPER_F2(id, var1, dim2, __VA_ARGS__ __VB_C_END_M)                                         
                #define __VB_C_TYPE_RECURSION_ARRAY_HELPER_F2(   id, var1,         dim2, x, mark, ...) __VB_C_TYPE_RECURSION_F ## id(mark, (var1 __VB_C_RRB2_F0(dim2)), (__VB_C_AOBX_F0(x)), __VA_ARGS__) // for some reason, there is comma here after __VA_ARGS__     
                #define __VB_C_TYPE_RECURSION_F0___VB_C_ARRAY_M_F0(  var1, atype1, dim2,          ...) __VB_C_TYPE_RECURSION_ARRAY_HELPER_F0(1, var1, atype1, dim2)                                                            
                #define __VB_C_TYPE_RECURSION_F1___VB_C_ARRAY_M_F0(  var1, atype1, dim2,          ...) __VB_C_TYPE_RECURSION_ARRAY_HELPER_F0(2, var1, atype1, dim2)                                                            
                #define __VB_C_TYPE_RECURSION_F2___VB_C_ARRAY_M_F0(  var1, atype1, dim2,          ...) __VB_C_TYPE_RECURSION_ARRAY_HELPER_F0(3, var1, atype1, dim2)                                                            
                #define __VB_C_TYPE_RECURSION_F3___VB_C_ARRAY_M_F0(  var1, atype1, dim2,          ...) __VB_C_TYPE_RECURSION_ARRAY_HELPER_F0(4, var1, atype1, dim2)                                                            
                #define __VB_C_TYPE_RECURSION_F4___VB_C_ARRAY_M_F0(  var1, atype1, dim2,          ...) __VB_C_TYPE_RECURSION_ARRAY_HELPER_F0(5, var1, atype1, dim2)                                                            
                #define __VB_C_TYPE_RECURSION_F5___VB_C_ARRAY_M_F0(  var1, atype1, dim2,          ...) __VB_C_TYPE_RECURSION_ARRAY_HELPER_F0(6, var1, atype1, dim2)                                                            
                #define __VB_C_TYPE_RECURSION_F6___VB_C_ARRAY_M_F0(  var1, atype1, dim2,          ...) __VB_C_TYPE_RECURSION_ARRAY_HELPER_F0(7, var1, atype1, dim2)                                                            
                #define __VB_C_TYPE_RECURSION_F7___VB_C_ARRAY_M_F0(  var1, atype1, dim2,          ...) __VB_C_TYPE_RECURSION_ARRAY_HELPER_F0(8, var1, atype1, dim2)                                                            
                #define __VB_C_TYPE_RECURSION_F8___VB_C_ARRAY_M_F0(  var1, atype1, dim2,          ...) __VB_C_TYPE_RECURSION_ARRAY_HELPER_F0(9, var1, atype1, dim2)                                                            
                #define __VB_C_TYPE_RECURSION_F9___VB_C_ARRAY_M_F0(  var1, atype1, dim2,          ...) __VB_C_ERROR_F0("Type too deep")                                                                                        
            // #pragma endregion                                                                                                                                                                                               
        // #pragma endregion                                                                                                                                                                                                   
        // #pragma region variables                                                                                                                                                                                                                      
            #define DECL                    __VB_C_DECL_F0 __VB_C_LB ((((                                                                                                                                                                                
            #define AS                 ))), __VB_C_AS_M             , (((                                                                                                                                                                                
            #define POINTER             )), __VB_C_POINTER_M        ,  ((                                                                                                                                                                                
            #define ARRAY               )), __VB_C_ARRAY_M          ,  ((                                                                                                                                                                                
            #define FUNC                )), __VB_C_FUNC_M           ,  ((                                                                                                                                                                                
            #define TO                   ), __VB_C_TO_M             ,   (                                                                                                                                                                                
            #define RETURNING            ), __VB_C_RETURNING_M      ,   (                                                                                                                                                                                
                                                                                                                                                                                                                                                         
            #define __VB_C_DECL_F0(decl1, end_m,       ...) __VB_C_CHECK_KEYWORD_F0("close DECL with END", end_m, __VB_C_END_M) __VB_C_DECL_F1(__VB_C_RRB_F0(decl1)) // (((( var ))), __VB_C_AS_M , ((( int )))), __VB_C_END_M                                                                
            #define __VB_C_DECL_F1(                    ...)                                                                     __VB_C_DECL_F2(__VA_ARGS__)                                                                                                                                   
            #define __VB_C_DECL_F2(name3, as_m, type1, ...) __VB_C_CHECK_KEYWORD_F0("DECL/CAST need to have AS, syntax is `DECL var AS type END`, `CAST(expr AS type)`", as_m, __VB_C_AS_M) __VB_C_TYPE_RESOLVE_F0(__VB_C_RRB2_F0(name3), type1)                                              
        // #pragma endregion                                                                                                                                                                                                                                                                  
        // #pragma region cast                                                                                                                                                                                                                                                                
            #define CAST(...) __VB_C_CAST_F0( ((( __VA_ARGS__ ))) )                                                                                                                                                                                                                           
            #define __VB_C_CAST_F0(expr3, as_m, ...) ((__VB_C_DECL_F1((()), __VB_C_AS_M, __VA_ARGS__)) __VB_C_RRB2_F0(expr3))                                                                                                                                                                 
        // #pragma endregion                                                                                                                                                                                                                                                                  
        // #pragma region custom                                                                                                                                                                                                                                                              
            #define TYPEDEF __VB_C_TYPEDEF_F0 __VB_C_LB ((((                                                                                                                                                                                                                                  
            #define __VB_C_TYPEDEF_F0(decl1, end_m,       ...) __VB_C_TYPEDEF_F1(__VB_C_RRB_F0(decl1)) // (((( var ))), __VB_C_AS_M , ((( int )))), __VB_C_END_M                                                                                                                              
            #define __VB_C_TYPEDEF_F1(                    ...) __VB_C_TYPEDEF_F2(__VA_ARGS__)                                                                                                                                                                                                 
            #define __VB_C_TYPEDEF_F2(name3, as_m, type1, ...) __VB_C_CHECK_KEYWORD_F0("TYPEDEF needs to have AS, syntax is `TYPEDEF newtype AS oldtype END`", as_m, __VB_C_AS_M) typedef __VB_C_TYPE_RESOLVE_F0(__VB_C_RRB2_F0(name3), type1);                                               
                                                                                                                                                                                                                                                                                              
            #define STRUCT __VB_C_STRUCT_F0 __VB_C_LB ((((                                                                                                                                                                                                                                    
            #define GENERIC                      ))), __VB_C_GENERIC_M  , (((                                                                                                                                                                                                                 
            #define ANONYMOUS                   )))), __VB_C_ANONYMOUS_M __VB_C_RB ) __VB_C_ANONYMOUS_F0 __VB_C_LB                                                                                                                                                                            
            #define ANON      ANONYMOUS                                                                                                                                                                                                                                                       
                                                                                                                                                                                                                                                                                              
            #define __VB_C_STRUCT_F0(sinfo1,      ...)                                                                                                                                                                        __VB_C_STRUCT_F1(__VB_C_RRB_F0(sinfo1), __VA_ARGS__)            
            #define __VB_C_STRUCT_F1(             ...)                                                                                                                                                                        __VB_C_STRUCT_F2(__VA_ARGS__)                                   
            #define __VB_C_STRUCT_F2(name3, mark, ...) __VB_C_CHECK_KEYWORD_F0("after STRUCT should follow START, ANON, ANONYMOUS, GENERIC, and END", mark, __VB_C_START, __VB_C_ANONYMOUS_M, __VB_C_GENERIC_M, __VB_C_END_M) __VB_C_STRUCT_F2_ ## mark ## _F0(name3, ## __VA_ARGS__)         
            #define __VB_C_STRUCT_F2___VB_C_END_M_F0(      name3,        ...) typedef struct __VB_C_RRB3_F0(name3) __VB_C_RRB3_F0(name3);                                                                                                                                                     
            #define __VB_C_STRUCT_F2___VB_C_START_M_F0(    name3, decl3, ...) typedef struct __VB_C_RRB3_F0(name3) __VB_C_RRB3_F0(name3); struct __VB_C_RRB3_F0(name3) { __VB_C_RRB3_F0(decl3) };                                                                                             
            #define __VB_C_STRUCT_F2___VB_C_GENERIC_M_F0(  name3, decl3, ...)                                                             struct                       { __VB_C_RRB3_F0(decl3) };                                                                                             
            #define __VB_C_STRUCT_F2___VB_C_ANONYMOUS_M_F0(...)                                                                                                                                                                                                                               
                                                                                                                                                                                                                                                                                              
			#define __VB_C_ANONYMOUS_F0(...) (struct { __VA_ARGS__ })                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                                                              
            #define ENUM                                                                                                                                  __VB_C_ENUM_F0 __VB_C_LB ((((                                                                                                       
            #define __VB_C_ENUM_F0(einfo1, ...)                                                                                                           __VB_C_ENUM_F1(__VB_C_RRB_F0(einfo1), __VA_ARGS__)                                                                                  
            #define __VB_C_ENUM_F1(        ...)                                                                                                           __VB_C_ENUM_F2(__VA_ARGS__)                                                                                                         
            #define __VB_C_ENUM_F2(name3, mark, ...) __VB_C_CHECK_KEYWORD_F0("after ENUM should follow START or END", mark, __VB_C_START_M, __VB_C_END_M) __VB_C_ENUM_F2_ ## mark ## _F0(name3, ## __VA_ARGS__)                                                                               
            #define __VB_C_ENUM_F2___VB_C_END_M_F0(      name3,           ...) typedef enum __VB_C_RRB3_F0(name3) __VB_C_RRB3_F0(name3);                                                                                                                                                      
            #define __VB_C_ENUM_F2___VB_C_START_M_F0(    name3, members3, ...) typedef enum __VB_C_RRB3_F0(name3) __VB_C_RRB3_F0(name3); enum __VB_C_RRB3_F0(name3) { __VB_C_RRB3_F0(members3) };                                                                                             
        // #pragma endregion                                                                                                                                                                                                                                                                  
    // #pragma endregion                                                                                                                                                                                                                                                                      
                                                                                                                                                                                                                                                                                                            
    // #pragma region function                                                                                                                                                                                                                                                                              
        #define FUNCTION __VB_C_FUNCTION_F0 __VB_C_LB ((((                                                                                                                                                                                                                                                  
        #define RETURN return                                                                                                                                                                                                                                                                               
                                                                                                                                                                                                                                                                                                            
        #define __VB_C_FUNCTION_DINFO_F0(dinfo1, ...) __VB_C_FUNCTION_DINFO_F1(__VB_C_RRB_F0(dinfo1))                                                                                                                                                                                                       
        #define __VB_C_FUNCTION_DINFO_F1(        ...) __VB_C_FUNCTION_DINFO_F2(__VA_ARGS__)                                                                                                                                                                                                                 
        #define __VB_C_FUNCTION_DINFO_F2(ginfo1, ...) __VB_C_FUNCTION_DINFO_F3(__VB_C_RRB_F0(ginfo1), ## __VA_ARGS__)                                                                                                                                                                                       
        #define __VB_C_FUNCTION_DINFO_F3(        ...) __VB_C_FUNCTION_DINFO_F4(__VA_ARGS__, __VB_C_END_M, __VB_C_END_M)                                                                                                                                                                                     
        #define __VB_C_FUNCTION_DINFO_F4(f1, mark, x, ...) ( __VB_C_TYPE_RESOLVE_F0( f1, __VB_C_FUNCTION_RETURN_TYPE_F0((((void))), mark, ( (x), ## __VA_ARGS__ )) ) ) // ---- #__VA_ARGS__                                                                                                                 
        /* __VB_C_CHECK_KEYWORD_F0("FUNCTION needs RETURNING keyword, syntax is `FUNCTION name(args) RETURNING type`", returning_m, __VB_C_RETURNING_M) */                                                                                                                                                  
                                                                                                                                                                                                                                                                                                            
        #if __VB_C_IMPLEMENTS_LOCAL_LABEL                                                                                                                                                                                                                                                                   
            #define __VB_C_FUNCTION_BODY_RESOLVE_F0(body1) { __VB_C_RRB_F0(body1) }                                                                                                                                                                                                                         
        #else                                                                                                                                                                                                                                                                                               
            #define __VB_C_FUNCTION_BODY_RESOLVE_F0(body1) { do { int __VB_C_f_jump_id; __VB_C_JumpState __VB_C_f_jump_state = __VB_C_JMP_NORMAL; __VB_C_RRB_F0(body1) } while (0); }                                                                                                                       
        #endif                                                                                                                                                                                                                                                                                              
                                                                                                                                                                                                                                                                                                            
        #define __VB_C_FUNCTION_F0(finfo1, end_m, ...)                                                                                                                                                                __VB_C_FUNCTION_F1(__VB_C_RRB_F0(finfo1), end_m)                                      
        #define __VB_C_FUNCTION_F1(               ...)                                                                                                                                                                __VB_C_FUNCTION_F2(__VA_ARGS__)                                                       
        #define __VB_C_FUNCTION_F2(dinfo1, mark,  ...) __VB_C_CHECK_KEYWORD_F0("after FUNCTION should be START or END, syntax is `FUNCTION name(args) RETURNING type START/END`", mark, __VB_C_START_M, __VB_C_END_M) __VB_C_FUNCTION_F2_ ## mark ## _F0(__VB_C_FUNCTION_DINFO_F0(dinfo1), __VA_ARGS__)     
        #define __VB_C_FUNCTION_F2___VB_C_END_M_F0(  decl1,        ...) __VB_C_RRB_F0(decl1);                                                                                                                                                                                                               
        #define __VB_C_FUNCTION_F2___VB_C_START_M_F0(decl1, body3, ...) __VB_C_RRB_F0(decl1)  __VB_C_FUNCTION_BODY_RESOLVE_F0(__VB_C_RRB2_F0(body3))                                                                                                                                                        
                                                                                                                                                                                                                                                                                                            
        #define __VB_C_FUNCTION_RETURN_TYPE_F0(                     default_type, mark, ...) __VB_C_FUNCTION_RETURN_TYPE_F0 ## mark ## _F0(default_type, __VA_ARGS__)                                                                                                                                       
        #define __VB_C_FUNCTION_RETURN_TYPE_F0__VB_C_RETURNING_M_F0(default_type,       ...) __VA_ARGS__                                                                                                                                                                                                    
        #define __VB_C_FUNCTION_RETURN_TYPE_F0__VB_C_END_M_F0(      default_type,       ...) default_type                                                                                                                                                                                                   
        #define __VB_C_FUNCTION_RETURN_TYPE_F0_F0(                  default_type,       ...) default_type                                                                                                                                                                                                   
    // #pragma endregion                                                                                                                                                                                                                                                                                    
                                                                                                                                                                                                                                                                                                            
    // #pragma region fork                                                                                                                                                                                                                                                                                                                                                
        #define FORK                                     __VB_C_FORK_F0    __VB_C_LB ((((                                                                                                                                                                                                                                                                                 
        #define IF      )))), __VB_C_IF_M      __VB_C_RB __VB_C_IF_F0      __VB_C_LB ((((                                                                                                                                                                                                                                                                                 
        #define ELSE    )))), __VB_C_ELSE_M    __VB_C_RB __VB_C_ELSE_F0    __VB_C_LB ((((                                                                                                                                                                                                                                                                                 
        #define CASE    )))), __VB_C_CASE_M    __VB_C_RB __VB_C_CASE_F0    __VB_C_LB ((((                                                                                                                                                                                                                                                                                 
        #define DEFAULT )))), __VB_C_DEFAULT_M __VB_C_RB __VB_C_DEFAULT_F0 __VB_C_LB ((((                                                                                                                                                                                                                                                                                 
        #define THEN    )))), __VB_C_THEN_M, ((((                                                                                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                                                                                                                                          
        #if __VB_C_IMPLEMENTS_LOCAL_LABEL                                                                                                                                                                                                                                                                                                                                 
            #define FALLTHROUGH goto __VB_C_fallthrough_L                                                                                                                                                                                                                                                                                                                 
                                                                                                                                                                                                                                                                                                                                                                          
            #define __VB_C_FORK_CASE_FORK_IMPL_F0(expr1, ...) switch expr1 {                                                                                                                                                                                                                                                                                              
            #define __VB_C_FORK_CASE_STMT_IMPL_F0(stmt1, ...) { __label__ __VB_C_fallthrough_L; { __VB_C_RRB_F0(stmt1) } break; __VB_C_fallthrough_L:; }                                                                                                                                                                                                                  
            #define __VB_C_FORK_CASE_END_IMPL }                                                                                                                                                                                                                                                                                                                           
        #else                                                                                                                                                                                                                                                                                                                                                             
            #define FALLTHROUGH { __VB_C_f_jump_state = __VB_C_JMP_FALLTHROUGH; __VB_C_f_jump_id = __VB_C_switch_id_; continue; } VB_C_FORCE_SEMICOLON_AFTER_THIS                                                                                                                                                                                                         
                                                                                                                                                                                                                                                                                                                                                                          
            #define __VB_C_FORK_CASE_FORK_IMPL_F0(expr1, ...) { int const __VB_C_switch_id_ = __COUNTER__; switch expr1 {                                                                                                                                                                                                                                                 
            #define __VB_C_FORK_CASE_STMT_IMPL_F0(stmt1, ...) do { __VB_C_RRB_F0(stmt1) } while (0); if (__VB_C_f_jump_state == __VB_C_JMP_FALLTHROUGH) __VB_C_f_jump_state = __VB_C_JMP_NORMAL; else break;                                                                                                                                                              
            #define __VB_C_FORK_CASE_END_IMPL } if (__VB_C_f_jump_state != __VB_C_JMP_NORMAL) continue;                                                                                                                                                                                                                                                                   
        #endif                                                                                                                                                                                                                                                                                                                                                            
                                                                                                                                                                                                                                                                                                                                                                          
                                                                                                                                                                                                                                                                                                                                                                          
        #define __VB_C_FORK_F0(                         expr4, mark               ) __VB_C_CHECK_KEYWORD_F0("FORK             may be followed by IF, CASE or DEFAULT", mark, __VB_C_IF_M, __VB_C_CASE_M, __VB_C_DEFAULT_M)                                                     __VB_C_FORK_F0_      ## mark ## _F0(expr4)                                                 
        #define __VB_C_IF_F0(                           cond4, then_m, stmt4, mark) __VB_C_CHECK_KEYWORD_F0("IF              must be followed by THEN", tehn_m, __VB_C_THEN_M) __VB_C_CHECK_KEYWORD_F0("THEN may be followed by IF or ELSE", mark, __VB_C_IF_M, __VB_C_ELSE_M) __VB_C_IF_F0_        ## mark ## _F0(cond4, stmt4)                                          
        #define __VB_C_ELSE_F0(                         stmt4, mark               ) __VB_C_CHECK_KEYWORD_F0("ELSE             may be followed by IF or END", mark, __VB_C_IF_M, __VB_C_END_M)                                                                                  __VB_C_ELSE_F0_      ## mark ## _F0(stmt4)                                                 
        #define __VB_C_CASE_F0(                         expr4, mark, ...          ) __VB_C_CHECK_KEYWORD_F0("CASE             may be followed by THEN or CASE", mark, __VB_C_IF_M, __VB_C_CASE_M, __VB_C_DEFAULT_M)                                                            __VB_C_CASE_F0_      ## mark ## _F0(expr4, ## __VA_ARGS__)                                 
        #define __VB_C_DEFAULT_F0(                      stmt4, mark               ) __VB_C_CHECK_KEYWORD_F0("DEFAULT          may be followed by CASE or END", mark, __VB_C_IF_M, __VB_C_CASE_M, __VB_C_DEFAULT_M)                                                             __VB_C_DEFAULT_F0_   ## mark ## _F0(stmt4)                                                 
        #define __VB_C_FORK_F0___VB_C_IF_M_F0(          expr4                     )                                                                                                                                                                                                                                                                                       
        #define __VB_C_FORK_F0___VB_C_CASE_M_F0(        expr4                     )                                                                                                                                                                                            __VB_C_FORK_CASE_FORK_IMPL_F0(__VB_C_RRB3_F0(expr4))                                       
        #define __VB_C_FORK_F0___VB_C_DEFAULT_M_F0(     expr4                     )                                                                                                                                                                                            __VB_C_FORK_CASE_FORK_IMPL_F0(__VB_C_RRB3_F0(expr4))                                       
        #define __VB_C_IF_F0___VB_C_ELSE_M_F0(          cond4, stmt4              )                                                                                                                                                                                            if __VB_C_RRB3_F0(cond4) { __VB_C_RRB4_F0(stmt4) }                                         
        #define __VB_C_IF_F0___VB_C_END_M_F0(           cond4, stmt4              )                                                                                                                                                                                            if __VB_C_RRB3_F0(cond4) { __VB_C_RRB4_F0(stmt4) }                                         
        #define __VB_C_ELSE_F0___VB_C_IF_M_F0(          stmt4                     )                                                                                                                                                                                            else                                                                                       
        #define __VB_C_ELSE_F0___VB_C_END_M_F0(         stmt4                     )                                                                                                                                                                                            else { __VB_C_RRB4_F0(stmt4) }                                                             
        #define __VB_C_CASE_F0___VB_C_THEN_M_F0(        expr4, stmt4, mark        ) __VB_C_CHECK_KEYWORD_F0("after CASE, THEN may be followed by CASE, DEFAULT, or END", mark, __VB_C_IF_M, __VB_C_CASE_M, __VB_C_DEFAULT_M)                                                   __VB_C_CASE_THEN_F0_ ## mark ## _F0(expr4, stmt4)                                          
        #define __VB_C_CASE_THEN_F0___VB_C_CASE_M_F0(   expr4, stmt4              )                                                                                                                                                                                            case __VB_C_RRB4_F0(expr4): __VB_C_FORK_CASE_STMT_IMPL_F0(__VB_C_RRB3_F0(stmt4))           
        #define __VB_C_CASE_THEN_F0___VB_C_DEFAULT_M_F0(expr4, stmt4              )                                                                                                                                                                                            case __VB_C_RRB4_F0(expr4): __VB_C_FORK_CASE_STMT_IMPL_F0(__VB_C_RRB3_F0(stmt4))           
        #define __VB_C_CASE_THEN_F0___VB_C_END_M_F0(    expr4, stmt4              )                                                                                                                                                                                            case __VB_C_RRB4_F0(expr4): __VB_C_FORK_CASE_STMT_IMPL_F0(__VB_C_RRB3_F0(stmt4)) }         
        #define __VB_C_CASE_F0___VB_C_CASE_M_F0(        expr4                     )                                                                                                                                                                                            case __VB_C_RRB4_F0(expr4):                                                                
        #define __VB_C_DEFAULT_F0___VB_C_CASE_M_F0(     stmt4                     )                                                                                                                                                                                            default: __VB_C_FORK_CASE_STMT_IMPL_F0(__VB_C_RRB3_F0(stmt4))                              
        #define __VB_C_DEFAULT_F0___VB_C_END_M_F0(      stmt4                     )                                                                                                                                                                                            default: __VB_C_FORK_CASE_STMT_IMPL_F0(__VB_C_RRB3_F0(stmt4)) }                            
    // #pragma endregion                                                                                                                                                                                                                                                                                                                                                  
                                                                                                                                                                                                                                                                                                                                                                          
    #define SCOPE __VB_C_SCOPE_F0 __VB_C_LB ((((                                 
    #define __VB_C_SCOPE_F0(stmt4, end_m) { __VB_C_RRB4_F0(stmt4) }              
                                                                                 
    #define ZERO_ARRAY {0}                                                       
    #define REST_ALL_ZEROS                                                       
                                                                                 
    // #pragma region loops                                                                                                                                                        
        // #pragma region common                                                                                                                                                   
            // #pragma region skeleton                                                                                                                                             
                #if __VB_C_IMPLEMENTS_LOCAL_LABEL                                                                                                                                  
                    #define __VB_C_LOOP_COMMON_DECL_LABELS_F0(          name0, purpose0) __VB_C_LOOP_COMMON_DECL_LABELS_F1(__VB_C_HAS_ARG_F0(name0), purpose0)                     
                    #define __VB_C_LOOP_COMMON_DECL_LABELS_F1(...                      ) __VB_C_LOOP_COMMON_DECL_LABELS_F2(__VA_ARGS__)                                            
                    #define __VB_C_LOOP_COMMON_DECL_LABELS_F2(has_name, name0, purpose0) __VB_C_LOOP_COMMON_DECL_LABELS_F2_ ## has_name ## _F0(name0, purpose0)                    
                    #define __VB_C_LOOP_COMMON_DECL_LABELS_F2_0_F0(     name0, purpose0) __label__ VB_C_LABEL(, purpose0);                                                         
                    #define __VB_C_LOOP_COMMON_DECL_LABELS_F2_1_F0(     name0, purpose0) __label__ VB_C_LABEL(, purpose0), VB_C_LABEL(name0, purpose0);                            
                                                                                                                                                                                   
                    #define __VB_C_LOOP_COMMON_PUT_LABELS_F0(           name0, purpose0) __VB_C_LOOP_COMMON_PUT_LABELS_F1(__VB_C_HAS_ARG_F0(name0), purpose0)                      
                    #define __VB_C_LOOP_COMMON_PUT_LABELS_F1( ...                      ) __VB_C_LOOP_COMMON_PUT_LABELS_F2(__VA_ARGS__)                                             
                    #define __VB_C_LOOP_COMMON_PUT_LABELS_F2( has_name, name0, purpose0) __VB_C_LOOP_COMMON_PUT_LABELS_F2_ ## has_name ## _F0(name0, purpose0)                     
                    #define __VB_C_LOOP_COMMON_PUT_LABELS_F2_0_F0(      name0, purpose0) VB_C_LABEL(, purpose0):;                                                                  
                    #define __VB_C_LOOP_COMMON_PUT_LABELS_F2_1_F0(      name0, purpose0) VB_C_LABEL(, purpose0):; VB_C_LABEL(name0, purpose0):;                                    
                #elif defined VB_C_MS_I_WILL_BE_RESPONSIBLE_WITH_LOOPS                                                                                                             
                    #define __VB_C_LOOP_COMMON_DECL_LABELS_F0(          name0, purpose0)                                                                                           
                    #define __VB_C_LOOP_COMMON_PUT_LABELS_F0(           name0, purpose0) VB_C_LABEL(name0, purpose0):;                                                             
                #endif                                                                                                                                                             
                                                                                                                                                                                   
                #if __VB_C_IMPLEMENTS_LOCAL_LABEL || defined VB_C_MS_I_WILL_BE_RESPONSIBLE_WITH_LOOPS                                                                              
                    #define __VB_C_LOOP_COMMON_F0(name0, before1, stmt1, step1, didnt_break1, after1) {                                                                           \
                        __VB_C_LOOP_COMMON_DECL_LABELS_F0(name0, __VB_C_NEXT_M )                                                                                                  \
                        __VB_C_LOOP_COMMON_DECL_LABELS_F0(name0, __VB_C_STOP_M )                                                                                                  \
                        __VB_C_LOOP_COMMON_DECL_LABELS_F0(name0, __VB_C_BREAK_M)                                                                                                  \
                        __VB_C_RRB_F0(before1)                                                                                                                                    \
                        while (1) {                                                                                                                                               \
                            { __VB_C_RRB_F0(stmt1) }                                                                                                                              \
                            __VB_C_LOOP_COMMON_PUT_LABELS_F0(name0, __VB_C_NEXT_M)                                                                                                \
                            __VB_C_RRB_F0(step1)                                                                                                                                  \
                        }                                                                                                                                                         \
                        __VB_C_LOOP_COMMON_PUT_LABELS_F0(name0, __VB_C_STOP_M) {                                                                                                  \
                            __VB_C_RRB_F0(didnt_break1)                                                                                                                           \
                        }                                                                                                                                                         \
                        __VB_C_LOOP_COMMON_PUT_LABELS_F0(name0, __VB_C_BREAK_M) {                                                                                                 \
                            __VB_C_RRB_F0(after1)                                                                                                                                 \
                        }                                                                                                                                                         \
                    }                                                                                                                                                              
                #else                                                                                                                                                              
                    typedef enum {                                                                                                                                                 
                        __VB_C_JMP_NORMAL,                                                                                                                                         
                        __VB_C_JMP_NEXT,                                                                                                                                           
                        __VB_C_JMP_STOP,                                                                                                                                           
                        __VB_C_JMP_BREAK,                                                                                                                                          
                        __VB_C_JMP_FALLTHROUGH,                                                                                                                                    
                    } __VB_C_JumpState;                                                                                                                                            
                    #define __VB_C_LOOP_COMMON_DECL_ID_F0(name0) __VB_C_LOOP_COMMON_DECL_ID_F1(__VB_C_HAS_ARG_F0(name0))                                                           
                    #define __VB_C_LOOP_COMMON_DECL_ID_F1(...) __VB_C_LOOP_COMMON_DECL_ID_F2(__VA_ARGS__)                                                                          
                    #define __VB_C_LOOP_COMMON_DECL_ID_F2(has_name, name0) __VB_C_LOOP_COMMON_DECL_ID_F2_ ## has_name ## _F0(name0)                                                
                    #define __VB_C_LOOP_COMMON_DECL_ID_F2_0_F0(name0) int const __VB_C_loop_id_ = __COUNTER__;                                                                     
                    #define __VB_C_LOOP_COMMON_DECL_ID_F2_1_F0(name0) int const __VB_C_loop_id_ = __COUNTER__; int const __VB_C_loop_id_ ## name = __VB_C_loop_id_;                
                                                                                                                                                                                   
                    #define __VB_C_LOOP_COMMON_F0(name0, before1, stmt1, step1, didnt_break1, after1) {                                                                           \
                        __VB_C_LOOP_COMMON_DECL_ID_F0(name0)                                                                                                                      \
                        do {                                                                                                                                                      \
                            __VB_C_RRB_F0(before1)                                                                                                                                \
                            while (1) {                                                                                                                                           \
                                do {                                                                                                                                              \
                                    __VB_C_RRB_F0(stmt1)                                                                                                                          \
                                } while (0);                                                                                                                                      \
                                if (__VB_C_f_jump_state == __VB_C_JMP_NORMAL || (__VB_C_f_jump_state == __VB_C_JMP_NEXT && __VB_C_f_jump_id == __VB_C_loop_id_)) {                \
                                    __VB_C_f_jump_state = __VB_C_JMP_NORMAL;                                                                                                      \
                                    __VB_C_RRB_F0(step1)                                                                                                                          \
                                    continue;                                                                                                                                     \
                                }                                                                                                                                                 \
                                break;                                                                                                                                            \
                            }                                                                                                                                                     \
                            if (__VB_C_f_jump_state == __VB_C_JMP_NORMAL || __VB_C_f_jump_id == __VB_C_loop_id_) {                                                                \
                                switch (__VB_C_f_jump_state) {                                                                                                                    \
                                    case __VB_C_JMP_STOP:                                                                                                                         \
                                        __VB_C_f_jump_state = __VB_C_JMP_NORMAL;                                                                                                  \
                                    case __VB_C_JMP_NORMAL: {                                                                                                                     \
                                        __VB_C_RRB_F0(didnt_break1)                                                                                                               \
                                    }                                                                                                                                             \
                                    case __VB_C_JMP_BREAK: {                                                                                                                      \
                                        __VB_C_f_jump_state = __VB_C_JMP_NORMAL;                                                                                                  \
                                        __VB_C_RRB_F0(after1)                                                                                                                     \
                                    } break;                                                                                                                                      \
                                }                                                                                                                                                 \
                            }                                                                                                                                                     \
                        } while (0);                                                                                                                                              \
                        if (__VB_C_f_jump_state != __VB_C_JMP_NORMAL ) {                                                                                                          \
                            if (__VB_C_f_jump_state != __VB_C_JMP_FALLTHROUGH && __VB_C_f_jump_id == __VB_C_loop_id_) {                                                           \
                                __VB_C_f_jump_state = __VB_C_JMP_NORMAL;                                                                                                          \
                            } else {                                                                                                                                              \
                                continue;                                                                                                                                         \
                            }                                                                                                                                                     \
                        }                                                                                                                                                         \
                    }                                                                                                                                                              
                #endif                                                                                                                                                             
            // #pragma endregion                                                                                                                                                   
                                                                                                                                                                                   
            // #pragma region linfo                                                                                                                                                                                                                                                                                                                                                                                                                                            
                // BEFORE -> START -> STEP -> DIDNT_BREAK -> AFTER                                                                                                                                                                                                                                                                                                                                                                                                             
                // before1, stmt1, step1, didnt_break1, after1                                                                                                                                                                                                                                                                                                                                                                                                                 
                #define __VB_C_LOOP_COMMON_LINFO_F0(linfo1) __VB_C_LOOP_COMMON_LINFO_F1(__VB_C_RRB_F0(linfo1), __VB_C_END_M)                                                                                                                                                                                                                                                                                                                                                   
                #define __VB_C_LOOP_COMMON_LINFO_F1(...) __VB_C_LINFO_RESOLVE_F0(__VA_ARGS__)                                                                                                                                                                                                                                                                                                                                                                                  
                                                                                                                                                                                                                                                                                                                                                                                                                                                                               
                #define __VB_C_LINFO_RESOLVE_F0(                          x,                                              mark, ...) __VB_C_CHECK_KEYWORD_F0("the first keyword in loop body must be BEFORE, START, STEP, DIDNT_BREAK, AFTER, or END", mark, __VB_C_BEFORE_M, __VB_C_START_M, __VB_C_STEP_M, __VB_C_DIDNT_BREAK_M, __VB_C_AFTER_M, __VB_C_END_M) __VB_C_LINFO_RESOLVE_F0_ ## mark ## _F0(                                              x, ## __VA_ARGS__)      
                #define __VB_C_LINFO_RESOLVE_F1(                             before3,                                     mark, ...) __VB_C_CHECK_KEYWORD_F0("in loops, after BEFORE must follow START"                                              , mark,                  __VB_C_START_M                                                                   ) __VB_C_LINFO_RESOLVE_F1_ ## mark ## _F0(before3,                                         ## __VA_ARGS__)      
                #define __VB_C_LINFO_RESOLVE_F2(                             before3, stmt3,                              mark, ...) __VB_C_CHECK_KEYWORD_F0("in loops, after START must follow STEP, DIDNT_BREAK, AFTER, or END"                    , mark,                                  __VB_C_STEP_M, __VB_C_DIDNT_BREAK_M, __VB_C_AFTER_M, __VB_C_END_M) __VB_C_LINFO_RESOLVE_F2_ ## mark ## _F0(before3, stmt3,                                  ## __VA_ARGS__)      
                #define __VB_C_LINFO_RESOLVE_F3(                             before3, stmt3, step3,                       mark, ...) __VB_C_CHECK_KEYWORD_F0("in loops, after STEP must follow DIDNT_BREAK, AFTER, or END"                           , mark,                                                 __VB_C_DIDNT_BREAK_M, __VB_C_AFTER_M, __VB_C_END_M) __VB_C_LINFO_RESOLVE_F3_ ## mark ## _F0(before3, stmt3, step3 ,                          ## __VA_ARGS__)      
                #define __VB_C_LINFO_RESOLVE_F4(                             before3, stmt3, step3, didnt_break3,         mark, ...) __VB_C_CHECK_KEYWORD_F0("in loops, after DIDNT_BREAK must follow AFTER or END"                                  , mark,                                                                       __VB_C_AFTER_M, __VB_C_END_M) __VB_C_LINFO_RESOLVE_F4_ ## mark ## _F0(before3, stmt3, step3 , didnt_break3,            ## __VA_ARGS__)      
                #define __VB_C_LINFO_RESOLVE_F5(                             before3, stmt3, step3, didnt_break3, after3,       ...) __VB_C_RRB2_F0(before3), __VB_C_RRB2_F0(stmt3), __VB_C_RRB2_F0(step3 ), __VB_C_RRB2_F0(didnt_break3), __VB_C_RRB2_F0(after3)                                                                                                                                                                                                              
                                                                                                                                                                                                                                                                                                                                                                                                                                                                               
                #define __VB_C_LINFO_RESOLVE_F0___VB_C_BEFORE_M_F0(       _, before3,                                           ...) __VB_C_LINFO_RESOLVE_F1(                before3,                                         ## __VA_ARGS__)                                                                                                                                                                                                                                  
                #define __VB_C_LINFO_RESOLVE_F0___VB_C_START_M_F0(        _,          stmt3,                                    ...) __VB_C_LINFO_RESOLVE_F2(                ((())) , stmt3,                                  ## __VA_ARGS__)                                                                                                                                                                                                                                  
                #define __VB_C_LINFO_RESOLVE_F0___VB_C_STEP_M_F0(                     stmt3, step3,                             ...) __VB_C_LINFO_RESOLVE_F3(                ((())) , stmt3, step3 ,                          ## __VA_ARGS__)                                                                                                                                                                                                                                  
                #define __VB_C_LINFO_RESOLVE_F0___VB_C_DIDNT_BREAK_M_F0(              stmt3,        didnt_break3,               ...) __VB_C_LINFO_RESOLVE_F4(                ((())) , stmt3, ((())), didnt_break3,            ## __VA_ARGS__)                                                                                                                                                                                                                                  
                #define __VB_C_LINFO_RESOLVE_F0___VB_C_AFTER_M_F0(                    stmt3,                      after3,       ...) __VB_C_LINFO_RESOLVE_F5(                ((())) , stmt3, ((())), ((()))      , after3,    ## __VA_ARGS__)                                                                                                                                                                                                                                  
                #define __VB_C_LINFO_RESOLVE_F0___VB_C_END_M_F0(                      stmt3,                                    ...) __VB_C_LINFO_RESOLVE_F5(                ((())) , stmt3, ((())), ((()))      , ((())),    ## __VA_ARGS__)                                                                                                                                                                                                                                  
                                                                                                                                                                                                                                                                                                                                                                                                                                                                               
                #define __VB_C_LINFO_RESOLVE_F1___VB_C_START_M_F0(           before3, stmt3,                                    ...) __VB_C_LINFO_RESOLVE_F2(                before3, stmt3,                                  ## __VA_ARGS__)                                                                                                                                                                                                                                  
                                                                                                                                                                                                                                                                                                                                                                                                                                                                               
                #define __VB_C_LINFO_RESOLVE_F2___VB_C_STEP_M_F0(            before3, stmt3, step3,                             ...) __VB_C_LINFO_RESOLVE_F3(                before3, stmt3, step3 ,                          ## __VA_ARGS__)                                                                                                                                                                                                                                  
                #define __VB_C_LINFO_RESOLVE_F2___VB_C_DIDNT_BREAK_M_F0(     before3, stmt3,        didnt_break3,               ...) __VB_C_LINFO_RESOLVE_F4(                before3, stmt3, ((())), didnt_break3,            ## __VA_ARGS__)                                                                                                                                                                                                                                  
                #define __VB_C_LINFO_RESOLVE_F2___VB_C_AFTER_M_F0(           before3, stmt3,                      after3,       ...) __VB_C_LINFO_RESOLVE_F5(                before3, stmt3, ((())), ((()))      , after3,    ## __VA_ARGS__)                                                                                                                                                                                                                                  
                #define __VB_C_LINFO_RESOLVE_F2___VB_C_END_M_F0(             before3, stmt3,                                    ...) __VB_C_LINFO_RESOLVE_F5(                before3, stmt3, ((())), ((()))      , ((())),    ## __VA_ARGS__)                                                                                                                                                                                                                                  
                                                                                                                                                                                                                                                                                                                                                                                                                                                                               
                #define __VB_C_LINFO_RESOLVE_F3___VB_C_DIDNT_BREAK_M_F0(     before3, stmt3, step3, didnt_break3,               ...) __VB_C_LINFO_RESOLVE_F4(                before3, stmt3, step3 , didnt_break3,            ## __VA_ARGS__)                                                                                                                                                                                                                                  
                #define __VB_C_LINFO_RESOLVE_F3___VB_C_AFTER_M_F0(           before3, stmt3, step3,               after3,       ...) __VB_C_LINFO_RESOLVE_F5(                before3, stmt3, step3 , ((()))      , after3,    ## __VA_ARGS__)                                                                                                                                                                                                                                  
                #define __VB_C_LINFO_RESOLVE_F3___VB_C_END_M_F0(             before3, stmt3, step3,                             ...) __VB_C_LINFO_RESOLVE_F5(                before3, stmt3, step3 , ((()))      , ((())),    ## __VA_ARGS__)                                                                                                                                                                                                                                  
                                                                                                                                                                                                                                                                                                                                                                                                                                                                               
                #define __VB_C_LINFO_RESOLVE_F4___VB_C_AFTER_M_F0(           before3, stmt3, step3, didnt_break3, after3,       ...) __VB_C_LINFO_RESOLVE_F5(                before3, stmt3, step3 , didnt_break3, after3,    ## __VA_ARGS__)                                                                                                                                                                                                                                  
                #define __VB_C_LINFO_RESOLVE_F4___VB_C_END_M_F0(             before3, stmt3, step3, didnt_break3,               ...) __VB_C_LINFO_RESOLVE_F5(                before3, stmt3, step3 , didnt_break3, ((())),    ## __VA_ARGS__)                                                                                                                                                                                                                                  
            // #pragma endregion                                                                                                                                                                                                                                                                                                                                                                                                                                               
                                                                                                                                                                                                                                                                                                                                                                                                                                                                               
            // #pragma region definitions                                                                                                                                                                                                                 
                #define NO_OPERATION VB_C_FORCE_SEMICOLON_AFTER_THIS                                                                                                                                                                                      
                #define BEFORE      ))), __VB_C_BEFORE_M     , (((                                                                                                                                                                                        
                #define STEP        ))), __VB_C_STEP_M       , (((                                                                                                                                                                                        
                #define AFTER       ))), __VB_C_AFTER_M      , (((                                                                                                                                                                                        
                #define DIDNT_BREAK ))), __VB_C_DIDNT_BREAK_M, (((                                                                                                                                                                                        
                #if __VB_C_IMPLEMENTS_LOCAL_LABEL || VB_C_MS_I_WILL_BE_RESPONSIBLE_WITH_LOOPS                                                                                                                                                             
                    #define NEXT( ...) goto VB_C_LABEL(__VA_ARGS__, __VB_C_NEXT_M )                                                                                                                                                                       
                    #define STOP( ...) goto VB_C_LABEL(__VA_ARGS__, __VB_C_STOP_M )                                                                                                                                                                       
                    #define BREAK(...) goto VB_C_LABEL(__VA_ARGS__, __VB_C_BREAK_M)                                                                                                                                                                       
                #else                                                                                                                                                                                                                                     
                    #define NEXT( ...) { __VB_C_f_jump_state = __VB_C_JMP_NEXT ; __VB_C_f_jump_id = __VB_C_loop_id_##__VA_ARGS__; continue; })                                                                                                            
                    #define STOP( ...) { __VB_C_f_jump_state = __VB_C_JMP_STOP ; __VB_C_f_jump_id = __VB_C_loop_id_##__VA_ARGS__; continue; })                                                                                                            
                    #define BREAK(...) { __VB_C_f_jump_state = __VB_C_JMP_BREAK; __VB_C_f_jump_id = __VB_C_loop_id_##__VA_ARGS__; continue; })                                                                                                            
                #endif                                                                                                                                                                                                                                    
                #define WHILE     )) __VB_C_RB __VB_C_WHILE_F0    __VB_C_LB ((                                                                                                                                                                            
                #define NEXT_IF   )) __VB_C_RB __VB_C_NEXT_IF_F0  __VB_C_LB ((                                                                                                                                                                            
                #define STOP_IF   )) __VB_C_RB __VB_C_STOP_IF_F0  __VB_C_LB ((                                                                                                                                                                            
                #define BREAK_IF  )) __VB_C_RB __VB_C_BREAK_IF_F0 __VB_C_LB ((                                                                                                                                                                            
                #define DO        )) __VB_C_RB __VB_C_RRB2_F0     __VB_C_LB ((                                                                                                                                                                            
                #define OTHERWISE )) __VB_C_RB __VB_C_RRB2_F0     __VB_C_LB ((                                                                                                                                                                            
                                                                                                                                                                                                                                                          
                #define __VB_C_WHILE_F0(   cond2) if (!__VB_C_RRB_F0(cond2)) STOP ();                                                                                                                                                                     
                #define __VB_C_NEXT_IF_F0( cond2) if   __VB_C_RRB_F0(cond2)  NEXT ();                                                                                                                                                                     
                #define __VB_C_STOP_IF_F0( cond2) if   __VB_C_RRB_F0(cond2)  STOP ();                                                                                                                                                                     
                #define __VB_C_BREAK_IF_F0(cond2) if   __VB_C_RRB_F0(cond2)  BREAK();                                                                                                                                                                     
            // #pragma endregion                                                                                                                                                                                                                          
        // #pragma endregion                                                                                                                                                                                                                              
                                                                                                                                                                                                                                                          
        // #pragma region loop                                                                                                                                                                                                            
            #define LOOP(...) __VB_C_LOOP_F0 __VB_C_LB __VA_ARGS__, ((((                                                                                                                                                                  
            #define __VB_C_LOOP_F0(name0, linfo1, end_m) __VB_C_CHECK_KEYWORD_F0("close LOOP with END", end_m, __VB_C_END_M) __VB_C_LOOP_F1(name0, __VB_C_LOOP_COMMON_LINFO_F0(linfo1), __VB_C_END_M)                                     
            #define __VB_C_LOOP_F1(...) __VB_C_LOOP_F2(__VA_ARGS__)                                                                                                                                                                       
            // #define __VB_C_LOOP_F2(name0, ...) __VA_ARGS__                                                                                                                                                                             
            #define __VB_C_LOOP_F2(name0, before1, stmt1, step1, didnt_break1, after1, ...) __VB_C_LOOP_COMMON_F0(name0, before1, stmt1, step1, didnt_break1, after1)                                                                     
        // #pragma endregion                                                                                                                                                                                                              
                                                                                                                                                                                                                                          
        // #pragma region for                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         
            #define FOR __VB_C_FOR_F0 __VB_C_LB ((((                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  
            #define
            // iinfo = iter_f0, iter_args1, iter_modifiers
            // iter_f0: (var1, tinfo1, iter_args1, iter_modifiers1) -> name0, before1, before_step1, before_each1, after_each1, after_step1, didnt_break1, after1                                                                                                                                                                                                                                                                                                                                                                                                                     
            #define __VB_C_FOR_F0(iinfo1, end_m) __VB_C_CHECK_KEYWORD_F0("close FOR with END", end_m, __VB_C_END_M) __VB_C_FOR_F1(__VB_C_RRB_F0(iinfo1))                                                                                                                                                                                                                                                                                                                                                                                                                              
            #define __VB_C_FOR_F1(...) __VB_C_FOR_F2(__VA_ARGS__)                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     
            #define __VB_C_FOR_F2(var3, mark, ...) __VB_C_CHECK_KEYWORD_F0("after FOR must follow AS or IN", mark, __VB_C_AS_M, __VB_C_IN_M) __VB_C_FOR_F2_ ## mark ## _F0(var3, ## __VA_ARGS__)                                                                                                                                                                                                                                                                                                                                                                                      
            #define __VB_C_FOR_F2___VB_C_AS_M_F0(var3, tinfo1, in_m, ...) __VB_C_CHECK_KEYWORD_F0("after `FOR var AS type` must follow IN mark", in_m, __VB_C_IN_M) __VB_C_FOR_F3(var3, tinfo1, ## __VA_ARGS__)                                                                                                                                                                                                                                                                                                                                                                       
            #define __VB_C_FOR_F2___VB_C_IN_M_F0(var3,               ...)                                                                                           __VB_C_FOR_F3(var3, ()    , ## __VA_ARGS__)                                                                                                                                                                                                                                                                                                                                                                       
            #define __VB_C_FOR_F3(...) __VB_C_FOR_F4(__VA_ARGS__)                                                                                                                               // __VB_C_LOOP_COMMON_F0(name0, before1, stmt1, step1, didnt_break1, after1)                                                                                                                                                                                                                                                                                                          
            #define __VB_C_FOR_F4(var3, tinfo1, iter3, mark, ...) __VB_C_FOR_F5(__VB_C_CALL_ITER_F0(__VB_C_RRB2_F0(iter3), __VB_C_RRB2_F0(var3), tinfo1), __VB_C_LINFO_RESOLVE_F0(, mark, ## __VA_ARGS__, __VB_C_END_M))                                                                                                                                                                                                                                                                                                                                                              
            #define __VB_C_FOR_F5(...) __VB_C_FOR_F6(__VA_ARGS__)                                                                                                                               // __VB_C_LOOP_COMMON_F0(name0, before1, stmt1, step1, didnt_break1, after1)                                                                                                                                                                                                                                                                                                          
            // #define __VB_C_FOR_F6(...) 666 __VA_ARGS__ 666                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         
            #define __VB_C_FOR_F6(name0, it_before1, it_before_step1, it_before_each1, it_after_each1, it_after_step1, it_didnt_break1, it_after1, before1, stmt1, step1, didnt_break1, after1) __VB_C_LOOP_COMMON_F0(name0, (__VB_C_RRB_F0(it_before1) __VB_C_RRB_F0(before1)), (__VB_C_RRB_F0(it_before_step1) __VB_C_RRB_F0(it_before_each1) { __VB_C_RRB_F0(stmt1) }), (__VB_C_RRB_F0(step1) __VB_C_RRB_F0(it_after_each1) __VB_C_RRB_F0(it_after_step1)), (__VB_C_RRB_F0(didnt_break1) __VB_C_RRB_F0(it_didnt_break1)), (__VB_C_RRB_F0(after1) __VB_C_RRB_F0(it_after1)))        

            #define __VB_C_CALL_ITER_F0(iter1, var1, tinfo1) __VB_C_CALL_ITER_F1(__VB_C_RRB_F0(iter1), var1, tinfo1)                                                                                                                                                                                                                                                                                                                                                                                                                                                                  
            #define __VB_C_CALL_ITER_F1(...) __VB_C_CALL_ITER_F2(__VA_ARGS__)                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         
            #define __VB_C_CALL_ITER_F2(iter_f0, iter_args1, iter_modifiers1, var1, tinfo1) iter_f0(var1, tinfo1, iter_args1, iter_modifiers1)                                                                                                                                                                                                                                                                                                                                                                                                                                        

            // #pragma region some iterators
                // #pragma region
                    #define
                    #define
                    #define UNTIL   ), __VB_C_UNTIL_M, (                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             
                    #define BY      ), __VB_C_BY_M   , (                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     
                    #define
                    #define
                    #define
                    #define
                    #define

                    #define __VB_C_COUNT_ADD_PREFIX_F0(var_prefix0, var0) var_prefix0 ## _ ## var0                                                                                                                                                                                                                                                                                                                                                                                                                                                                   

                    #define __VB_C_COUNT_CHECK_F0(mark) __VB_C_CHECK_KEYWORD_F0("alowed keywords in COUNT are FROM, BY, UNTIL, TO, VB_C_COUNT_POSITIVE_DELTA, VB_C_COUNT_NEGATIVE_DELTA, VB_C_COUNT_ZERO_DELTA, VB_C_COUNT_POSITIVE_RANGE, and VB_C_COUNT_NEGATIVE_RANGE", mark, __VB_C_FROM_M, __VB_C_BY_M, __VB_C_UNTIL_M, __VB_C_TO_M, VB_C_COUNT_POSITIVE_DELTA, VB_C_COUNT_NEGATIVE_DELTA, VB_C_COUNT_ZERO_DELTA, VB_C_COUNT_POSITIVE_RANGE, VB_C_COUNT_NEGATIVE_RANGE, __VB_C_END_M)                                                                           

                    #define __VB_C_COUNT_VALUE_start_lt_stop_F0(  var_prefix0) (__VB_C_COUNT_ADD_PREFIX_F0(var_prefix0, start) < __VB_C_COUNT_ADD_PREFIX_F0(var_prefix0, stop))                                                                                                                                                                                                                                                                                                                                                                                      
                    #define __VB_C_COUNT_VALUE_start_lt_stop_0_F0(var_prefix0) 0                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     
                    #define __VB_C_COUNT_VALUE_start_lt_stop_1_F0(var_prefix0) 1                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     
                    #define __VB_C_COUNT_VALUE_start_ne_stop_F0(  var_prefix0) (__VB_C_COUNT_ADD_PREFIX_F0(var_prefix0, start) != __VB_C_COUNT_ADD_PREFIX_F0(var_prefix0, stop))                                                                                                                                                                                                                                                                                                                                                                                     
                    #define __VB_C_COUNT_VALUE_start_ne_stop_0_F0(var_prefix0) 0                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     
                    #define __VB_C_COUNT_VALUE_start_ne_stop_1_F0(var_prefix0) 1                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     
                    #define __VB_C_COUNT_VALUE_step_ne_0_F0(  var_prefix0) (__VB_C_COUNT_ADD_PREFIX_F0(var_prefix0, step) != 0)                                                                                                                                                                                                                                                                                                                                                                                                                                      
                    #define __VB_C_COUNT_VALUE_step_ne_0_0_F0(var_prefix0) 0                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         
                    #define __VB_C_COUNT_VALUE_step_ne_0_1_F0(var_prefix0) 1                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         

                    #define __VB_C_COUNT_F0(                                                                                                                                      ...)                              __VB_C_COUNT_F1                ((), (0), (1), (), __VB_C_COUNT_VALUE_start_lt_stop_F0  , __VB_C_COUNT_VALUE_start_ne_stop_F0  , __VB_C_COUNT_VALUE_step_ne_0_F0  , 1         ,                                                     ,            ,                 ,    __VA_ARGS__)                                                              
                    #define __VB_C_COUNT_F1(                               _ , a1, d1, b1, start_lt_stop_f0, start_ne_stop_f0, step_ne_0_f0, step_mne_0, a_m, d_m, b_m, n1, mark, ...) __VB_C_COUNT_CHECK_F0(mark)  __VB_C_COUNT_F1_ ## mark ## _F0(n1, a1 , d1 , b1, start_lt_stop_f0                     , start_ne_stop_f0                     , step_ne_0_f0                     , 1         ,                                        a_m          , d_m        , b_m             , ## __VA_ARGS__)                                                              
                    #define __VB_C_COUNT_F1___VB_C_FROM_M_F0(              n1, _ , d1, b1, start_lt_stop_f0, start_ne_stop_f0, step_ne_0_f0, step_mne_0, a_m, d_m, b_m, a1, mark, ...) __VB_C_COUNT_CHECK_F0(mark)  __VB_C_COUNT_F1_ ## mark ## _F0(n1, a1 , d1 , b1, start_lt_stop_f0                     , start_ne_stop_f0                     , step_ne_0_f0                     , 1         ,                                        __VB_C_FROM_M, d_m        , b_m             , ## __VA_ARGS__)                                                              
                    #define __VB_C_COUNT_F1___VB_C_BY_M_F0(                n1, a1, _ , b1, start_lt_stop_f0, start_ne_stop_f0, step_ne_0_f0, step_mne_0, a_m, d_m, b_m, d1, mark, ...) __VB_C_COUNT_CHECK_F0(mark)  __VB_C_COUNT_F1_ ## mark ## _F0(n1, a1 , d1 , b1, start_lt_stop_f0                     , start_ne_stop_f0                     , step_ne_0_f0                     , 1         ,                                        a_m          , __VB_C_BY_M, b_m             , ## __VA_ARGS__)                                                              
                    #define __VB_C_COUNT_F1___VB_C_UNTIL_M_F0(             n1, a1, d1, _ , start_lt_stop_f0, start_ne_stop_f0, step_ne_0_f0, step_mne_0, a_m, d_m, b_m, b1, mark, ...) __VB_C_COUNT_CHECK_F0(mark)  __VB_C_COUNT_F1_ ## mark ## _F0(n1, a1 , d1 , b1, start_lt_stop_f0                     , start_ne_stop_f0                     , step_ne_0_f0                     , 1         ,                                        a_m          , d_m        , __VB_C_UNTIL_M  , ## __VA_ARGS__)                                                              
                    #define __VB_C_COUNT_F1___VB_C_TO_M_F0(                n1, a1, d1, _ , start_lt_stop_f0, start_ne_stop_f0, step_ne_0_f0, step_mne_0, a_m, d_m, b_m, b1, mark, ...) __VB_C_COUNT_CHECK_F0(mark)  __VB_C_COUNT_F1_ ## mark ## _F0(n1, a1 , d1 , b1, start_lt_stop_f0                     , start_ne_stop_f0                     , step_ne_0_f0                     , 1         ,                                        a_m          , d_m        , __VB_C_TO_M     , ## __VA_ARGS__)                                                              
                    #define __VB_C_COUNT_F1___VB_C_COUNT_POSITIVE_DELTA_F0(n1, a1, d1, b1, start_lt_stop_f0, start_ne_stop_f0, step_ne_0_f0, step_mne_0, a_m, d_m, b_m, _ , mark, ...) __VB_C_COUNT_CHECK_F0(mark)  __VB_C_COUNT_F1_ ## mark ## _F0(n1, a1 , d1 , b1, start_lt_stop_f0                     , start_ne_stop_f0                     , __VB_C_COUNT_VALUE_step_ne_0_1_F0, 1         ,                                        a_m          , d_m        , __VB_C_TO_M     , ## __VA_ARGS__)                                                              
                    #define __VB_C_COUNT_F1___VB_C_COUNT_NEGATIVE_DELTA_F0(n1, a1, d1, b1, start_lt_stop_f0, start_ne_stop_f0, step_ne_0_f0, step_mne_0, a_m, d_m, b_m, _ , mark, ...) __VB_C_COUNT_CHECK_F0(mark)  __VB_C_COUNT_F1_ ## mark ## _F0(n1, a1 , d1 , b1, start_lt_stop_f0                     , start_ne_stop_f0                     , __VB_C_COUNT_VALUE_step_ne_0_1_F0, 1         ,                                        a_m          , d_m        , __VB_C_TO_M     , ## __VA_ARGS__)                                                              
                    #define __VB_C_COUNT_F1___VB_C_COUNT_ZERO_DELTA_F0(    n1, a1, d1, b1, start_lt_stop_f0, start_ne_stop_f0, step_ne_0_f0, step_mne_0, a_m, d_m, b_m, _ , mark, ...) __VB_C_COUNT_CHECK_F0(mark)  __VB_C_COUNT_F1_ ## mark ## _F0(n1, a1 , d1 , b1, start_lt_stop_f0                     , start_ne_stop_f0                     , __VB_C_COUNT_VALUE_step_ne_0_0_F0, 0         ,                                        a_m          , d_m        , __VB_C_TO_M     , ## __VA_ARGS__)                                                              
                    #define __VB_C_COUNT_F1___VB_C_COUNT_POSITIVE_RANGE_F0(n1, a1, d1, b1, start_lt_stop_f0, start_ne_stop_f0, step_ne_0_f0, step_mne_0, a_m, d_m, b_m, _ , mark, ...) __VB_C_COUNT_CHECK_F0(mark)  __VB_C_COUNT_F1_ ## mark ## _F0(n1, a1 , d1 , b1, __VB_C_COUNT_VALUE_start_lt_stop_1_F0, __VB_C_COUNT_VALUE_start_ne_stop_1_F0, step_ne_0_f0                     , 1         ,                                        a_m          , d_m        , __VB_C_TO_M     , ## __VA_ARGS__)                                                              
                    #define __VB_C_COUNT_F1___VB_C_COUNT_NEGATIVE_RANGE_F0(n1, a1, d1, b1, start_lt_stop_f0, start_ne_stop_f0, step_ne_0_f0, step_mne_0, a_m, d_m, b_m, _ , mark, ...) __VB_C_COUNT_CHECK_F0(mark)  __VB_C_COUNT_F1_ ## mark ## _F0(n1, a1 , d1 , b1, __VB_C_COUNT_VALUE_start_lt_stop_0_F0, __VB_C_COUNT_VALUE_start_ne_stop_1_F0, step_ne_0_f0                     , 1         ,                                        a_m          , d_m        , __VB_C_TO_M     , ## __VA_ARGS__)                                                              
                    #define __VB_C_COUNT_F1___VB_C_END_M_F0(               n1, a1, d1, b1, start_lt_stop_f0, start_ne_stop_f0, step_ne_0_f0, step_mne_0, a_m, d_m, b_m,           ...)                              __VB_C_COUNT_F2                (n1, a1 , d1 , b1, start_lt_stop_f0                     , start_ne_stop_f0                     , step_ne_0_f0                     , 1         ,                                        a_m          , d_m        , b_m             , ## __VA_ARGS__)                                                              
                    #define __VB_C_COUNT_F2(                               n1, a1, d1, b1, start_lt_stop_f0, start_ne_stop_f0, step_ne_0_f0, step_mne_0, a_m, d_m, b_m,           ...)                              __VB_C_COUNT_ITERATOR_F0,      (n1, a1 , d1 , b1, start_lt_stop_f0                     , start_ne_stop_f0                     , step_ne_0_f0                     , step_mne_0, __VB_C_HAS_ARGX_F0(__VB_C_RRB_F0(n1)), a_m          , d_m        , b_m), (__VB_C_END_M, /* name0 */, __VB_C_COUNT_VAR, (__VB_C_COUNT_DEFAULT_STOP_F0, ()))        

                    #define __VB_C_COUNT_SET_NAME_F0(     name0,        modifiers1)                   __VB_C_COUNT_SET_NAME_F1                         (    name0,        __VB_C_RRB_F0(modifiers1))                                                                                                                                                                                                                                                                                                                                                                 
                    #define __VB_C_COUNT_SET_NAME_F1(     name0, end_m,                          ...) __VB_C_COUNT_SET_NAME_F2                         (    name0, end_m, __VA_ARGS__)                                                                                                                                                                                                                                                                                                                                                                               
                    #define __VB_C_COUNT_SET_NAME_F2(     name0, end_m,               old_name0, ...) __VB_C_COUNT_SET_NAME_F3                         (    name0, end_m, __VB_C_HAS_ARG_F0(old_name0), ## __VA_ARGS__)                                                                                                                                                                                                                                                                                                                                              
                    #define __VB_C_COUNT_SET_NAME_F3(     name0, end_m,                          ...) __VB_C_COUNT_SET_NAME_F4                         (    name0, end_m, __VA_ARGS__)                                                                                                                                                                                                                                                                                                                                                                               
                    #define __VB_C_COUNT_SET_NAME_F4(     name0, end_m, has_old_name, old_name0, ...) __VB_C_COUNT_SET_NAME_F4_ ## has_old_name ## _F0 (    name0, end_m, old_name0, __VA_ARGS__)                                                                                                                                                                                                                                                                                                                                                                    
                    #define __VB_C_COUNT_SET_NAME_F4_0_F0(name0, end_m,               old_name0, ...) (end_m,     name0, __VA_ARGS__)                                                                                                                                                                                                                                                                                                                                                                                                                                
                    #define __VB_C_COUNT_SET_NAME_F4_1_F0(name0, end_m,               old_name0, ...) (end_m, old_name0, __VA_ARGS__)                                                                                                                                                                                                                                                                                                                                                                                                                                

                    #define __VB_C_COUNT_SET_VAR_PREFIX_F0(var_prefix0, modifiers1   ) __VB_C_COUNT_SET_VAR_PREFIX_F1(var_prefix0, __VB_C_RRB_F0(modifiers1))                                                                                                                                                                                                                                                                                                                                                                                                        
                    #define __VB_C_COUNT_SET_VAR_PREFIX_F1(var_prefix0,           ...) __VB_C_COUNT_SET_VAR_PREFIX_F2(var_prefix0, __VA_ARGS__)                                                                                                                                                                                                                                                                                                                                                                                                                      
                    #define __VB_C_COUNT_SET_VAR_PREFIX_F2(var_prefix0, end_m, name0, _, ...)          (end_m, name0, var_prefix0, ## __VA_ARGS__)                                                                                                                                                                                                                                                                                                                                                                                                                   
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     
                    #define __VB_C_COUNT_SET_STOP_F0(stop_call1, modifiers1   ) __VB_C_COUNT_SET_STOP_F1(stop_call1, __VB_C_RRB_F0(modifiers1))                                                                                                                                                                                                                                                                                                                                                                                                                      
                    #define __VB_C_COUNT_SET_STOP_F1(stop_call1,           ...) __VB_C_COUNT_SET_STOP_F2(stop_call1, __VA_ARGS__)                                                                                                                                                                                                                                                                                                                                                                                                                                    
                    #define __VB_C_COUNT_SET_STOP_F2(stop_call1, end_m, name0, var_prefix0, _, ...)          (end_m, name0, var_prefix0, stop_call1, ## __VA_ARGS__)                                                                                                                                                                                                                                                                                                                                                                                                 
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     
                    #define __VB_C_COUNT_ITERATOR_MODIFIER_HANDLE_F0(var0, iter_modifiers1)                                  __VB_C_COUNT_ITERATOR_MODIFIER_HANDLE_F1(__VB_C_RRB_F0(__VB_C_COUNT_SET_NAME_F0(var0, iter_modifiers1)), )                                                                                                                                                                                                                                                                                                                              
                    #define __VB_C_COUNT_ITERATOR_MODIFIER_HANDLE_F1(...) __VB_C_COUNT_ITERATOR_MODIFIER_HANDLE_F2(__VA_ARGS__)                                                                                                                                                                                                                                                                                                                                                                                                                                      
                    #define __VB_C_COUNT_ITERATOR_MODIFIER_HANDLE_F2(end_m, name0, var_prefix0, stop_call1, reversed_m, ...) name0, var_prefix0, __VB_C_RRB_F0(stop_call1), __VB_C_COUNT_ITERATOR_MODIFIER_HANDLE_ ## reversed_m ## _F0(var_prefix0)                                                                                                                                                                                                                                                                                                                 
                    #define __VB_C_COUNT_ITERATOR_MODIFIER_HANDLE__F0(var_prefix0)                  (__VB_C_COUNT_ADD_PREFIX_F0(var_prefix0, start) +                                                   __VB_C_COUNT_ADD_PREFIX_F0(var_prefix0, i)  * __VB_C_COUNT_ADD_PREFIX_F0(var_prefix0, step))                                                                                                                                                                                                                                                                 
                    #define __VB_C_COUNT_ITERATOR_MODIFIER_HANDLE___VB_C_REVERSED_M_F0(var_prefix0) (__VB_C_COUNT_ADD_PREFIX_F0(var_prefix0, start) + (__VB_C_COUNT_ADD_PREFIX_F0(var_prefix0, n) - 1 - __VB_C_COUNT_ADD_PREFIX_F0(var_prefix0, i)) * __VB_C_COUNT_ADD_PREFIX_F0(var_prefix0, step))                                                                                                                                                                                                                                                                 

                    #define __VB_C_COUNT_DEFAULT_STOP_F0(name0, ...) STOP(name0);                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    

                    #define __VB_C_COUNT_ITERATOR_F0(var1, tinfo1, iter_args1, iter_modifiers1) __VB_C_COUNT_ITERATOR_F1(var1, tinfo1, __VB_C_COUNT_ITERATOR_MODIFIER_HANDLE_F0(__VB_C_RRB_F0(var1), iter_modifiers1), __VB_C_RRB_F0(iter_args1))                                                                                                                                                                                                                                                                                                                    
                    #define __VB_C_COUNT_ITERATOR_F1(...) __VB_C_COUNT_ITERATOR_F2(__VA_ARGS__)                                                                                                                                                                                                                                                                                                                                                                                                                                                                      
                    // #define __VB_C_COUNT_ITERATOR_F2(...) ccc, ---(__VA_ARGS__)---, (), (), (), (), ()                                                                                                                                                                                                                                                                                                                                                                                                                                                            
                    #define __VB_C_COUNT_ITERATOR_F2(var1, tinfo1, name0, var_prefix0, stop_f0, stop_f0_args1, var_formula1, n1, a1, d1, b1, start_lt_stop_f0, start_ne_stop_f0, step_ne_0_f0, step_mne_0, has_n, a_m, d_m, b_m) __VB_C_COUNT_ITERATOR_N ## has_n ## _A ## a_m ## _D ## d_m ## _B ## b_m ## _F0 (name0, var1, tinfo1, var_prefix0, stop_f0, stop_f0_args1, n1, a1, d1, b1, start_lt_stop_f0, start_ne_stop_f0, step_ne_0_f0, step_mne_0, var_formula1)                                                                                               

                    double floor(double
                    double ceil(double
                    #define __VB_C_COUNT_ITERATOR_N0_A_D_B_F0(                                      name0, var1, tinfo1, var_prefix0, stop_f0, stop_f0_args1, n1, a1, d1, b1, start_lt_stop_f0, start_ne_stop_f0, step_ne_0_f0, step_mne_0, var_formula1, ...) __VB_C_COUNT_ITERATOR_N0_A__VB_C_FROM_M_D_B_F0                         (name0, var1, tinfo1, var_prefix0, stop_f0, stop_f0_args1,  n1     , (0), d1,  b1     , start_lt_stop_f0, start_ne_stop_f0, step_ne_0_f0, step_mne_0, var_formula
                    #define __VB_C_COUNT_ITERATOR_N0_A_D_B__VB_C_TO_M_F0(                           name0, var1, tinfo1, var_prefix0, stop_f0, stop_f0_args1, n1, a1, d1, b1, start_lt_stop_f0, start_ne_stop_f0, step_ne_0_f0, step_mne_0, var_formula1, ...) __VB_C_COUNT_ITERATOR_N1_A_D_B_F0                                      (name0, var1, tinfo1, var_prefix0, stop_f0, stop_f0_args1, (b1 + 1), a1 , d1,  b1     , start_lt_stop_f0, start_ne_stop_f0, step_ne_0_f0, step_mne_0, var_formula1, ## __VA_ARGS__) // TO b = (b
                    #define __VB_C_COUNT_ITERATOR_N0_A_D_B__VB_C_UNTIL_M_F0(                        name0, var1, tinfo1, var_prefix0, stop_f0, stop_f0_args1, n1, a1, d1, b1, start_lt_stop_f0, start_ne_stop_f0, step_ne_0_f0, step_mne_0, var_formula1, ...) __VB_C_COUNT_ITERATOR_N1_A_D_B_F0                                      (name0, var1, tinfo1, var_prefix0, stop_f0, stop_f0_args1,  b1     , a1 , d1,  b1     , start_lt_stop_f0, start_ne_stop_f0, step_ne_0_f0, step_mne_0, var_formula1, ## __VA_ARGS__) // UNTIL b = b
                    #define __VB_C_COUNT_ITERATOR_N0_A_D__VB_C_BY_M_B_F0(                           name0, var1, tinfo1, var_prefix0, stop_f0, stop_f0_args1, n1, a1, d1, b1, start_lt_stop_f0, start_ne_stop_f0, step_ne_0_f0, step_mne_0, var_formula1, ...) __VB_C_COUNT_ITERATOR_N0_A__VB_C_FROM_M_D__VB_C_BY_M_B_F0              (name0, var1, tinfo1, var_prefix0, stop_f0, stop_f0_args1,  n1     , (0), d1,  b1     , start_lt_stop_f0, start_ne_stop_f0, step_ne_0_f0, step_mne_0, var_formula1, ## __VA_ARGS__) // BY d = FROM 0 BY d
                    #define __VB_C_COUNT_ITERATOR_N0_A_D__VB_C_BY_M_B__VB_C_TO_M_F0(                name0, var1, tinfo1, var_prefix0, stop_f0, stop_f0_args1, n1, a1, d1, b1, start_lt_stop_f0, start_ne_stop_f0, step_ne_0_f0, step_mne_0, var_formula1, ...) __VB_C_COUNT_ITERATOR_N0_A__VB_C_FROM_M_D__VB_C_BY_M_B__VB_C_TO_M_F0   (name0, var1, tinfo1, var_prefix0, stop_f0, stop_f0_args1,  n1     , (0), d1,  b1     , start_lt_stop_f0, start_ne_stop_f0, step_ne_0_f0, step_mne_0, var_formula1, ## __VA_ARGS__) // BY d TO b = FROM 0 BY d TO b
                    #define __VB_C_COUNT_ITERATOR_N0_A_D__VB_C_BY_M_B__VB_C_UNTIL_M_F0(             name0, var1, tinfo1, var_prefix0, stop_f0, stop_f0_args1, n1, a1, d1, b1, start_lt_stop_f0, start_ne_stop_f0, step_ne_0_f0, step_mne_0, var_formula1, ...) __VB_C_COUNT_ITERATOR_N0_A__VB_C_FROM_M_D__VB_C_BY_M_B__VB_C_UNTIL_M_F0(name0, var1, tinfo1, var_prefix0, stop_f0, stop_f0_args1,  n1     , (0), d1,  b1     , start_lt_stop_f0, start_ne_stop_f0, step_ne_0_f0, step_mne_0, var_formula1, ## __VA_ARGS__) // BY d UNTIL b = FROM 0 BY d UNTIL b
                    #define __VB_C_COUNT_ITERATOR_N0_A__VB_C_FROM_M_D_B_F0(                         name0, var1, tinfo1, var_prefix0, stop_f0, stop_f0_args1, n1, a1, d1, b1, start_lt_stop_f0, start_ne_stop_f0, step_ne_0_f0, step_mne_0, var_formula1, ...) /*   FROM a              */ name0, ( __VB_C_TYPE_RESOLVE_F0(const (__VB_C_COUNT_ADD_PREFIX_F0(var_prefix0, start)), tinfo1) = a1;                                                                                             long const (__VB_C_COUNT_ADD_PREFIX_F0(var_prefix0, step)) = 1                                      ; long const (__VB_C_COUNT_ADD_PREFIX_F0(var_prefix0, n)) = 1                                                                                                                                                                                                                                        ; long (__VB_C_COUNT_ADD_PREFIX_F0(var_prefix0, i)) = 0; ), (                                                                                                                                 ), ( __VB_C_TYPE_RESOLVE_F0(var1, tinfo1) = var_formula1; ), (), (                               ++__VB_C_COUNT_ADD_PREFIX_F0(var_prefix0, i);), (), ()                                        
                    #define __VB_C_COUNT_ITERATOR_N0_A__VB_C_FROM_M_D_B__VB_C_TO_M_F0(              name0, var1, tinfo1, var_prefix0, stop_f0, stop_f0_args1, n1, a1, d1, b1, start_lt_stop_f0, start_ne_stop_f0, step_ne_0_f0, step_mne_0, var_formula1, ...) __VB_C_COUNT_ITERATOR_N0_A__VB_C_FROM_M_D_B__VB_C_UNTIL_M_F0           (name0, var1, tinfo1, var_prefix0, stop_f0, stop_f0_args1,  n1     , (0), d1, (b1 + 1), start_lt_stop_f0, start_ne_stop_f0, step_ne_0_f0, step_mne_0, var_formula1, ## __VA_ARGS__) // FROM a TO b = FROM a UNTIL (b
                    #define __VB_C_COUNT_ITERATOR_N0_A__VB_C_FROM_M_D_B__VB_C_UNTIL_M_F0(           name0, var1, tinfo1, var_prefix0, stop_f0, stop_f0_args1, n1, a1, d1, b1, start_lt_stop_f0, start_ne_stop_f0, step_ne_0_f0, step_mne_0, var_formula1, ...) /*   FROM a      UNTIL b */ name0, ( __VB_C_TYPE_RESOLVE_F0(const (__VB_C_COUNT_ADD_PREFIX_F0(var_prefix0, start)), tinfo1) = a1; __VB_C_TYPE_RESOLVE_F0(const (__VB_C_COUNT_ADD_PREFIX_F0(var_prefix0, stop)), tinfo1) = b1; long const (__VB_C_COUNT_ADD_PREFIX_F0(var_prefix0, step)) = start_lt_stop_f0(var_prefix0) ? +1 : -1; long const (__VB_C_COUNT_ADD_PREFIX_F0(var_prefix0, n)) = (__VB_C_COUNT_ADD_PREFIX_F0(var_prefix0, stop) - __VB_C_COUNT_ADD_PREFIX_F0(var_prefix0, start)) * __VB_C_COUNT_ADD_PREFIX_F0(var_prefix0, step)                                                                                         ; long (__VB_C_COUNT_ADD_PREFIX_F0(var_prefix0, i)) = 0; ), ( if (step_mne_0 && __VB_C_COUNT_ADD_PREFIX_F0(var_prefix0, i) >= __VB_C_COUNT_ADD_PREFIX_F0(var_prefix0, n)) { stop_f0(name0, __VB_C_RRB_F0(stop_f0_args1)); } ), ( __VB_C_TYPE_RESOLVE_F0(var1, tinfo1) = var_formula1; ), (), (if (step_ne_0_f0(var_prefix0)) ++__VB_C_COUNT_ADD_PREFIX_F0(var_prefix0, i);), (), ()          
                    #define __VB_C_COUNT_ITERATOR_N0_A__VB_C_FROM_M_D__VB_C_BY_M_B_F0(              name0, var1, tinfo1, var_prefix0, stop_f0, stop_f0_args1, n1, a1, d1, b1, start_lt_stop_f0, start_ne_stop_f0, step_ne_0_f0, step_mne_0, var_formula1, ...) /*   FROM a BY d         */ name0, ( __VB_C_TYPE_RESOLVE_F0(const (__VB_C_COUNT_ADD_PREFIX_F0(var_prefix0, start)), tinfo1) = a1;                                                                                             long const (__VB_C_COUNT_ADD_PREFIX_F0(var_prefix0, step)) = d1                                     ; long const (__VB_C_COUNT_ADD_PREFIX_F0(var_prefix0, n)) = 1                                                                                                                                                                                                                                        ; long (__VB_C_COUNT_ADD_PREFIX_F0(var_prefix0, i)) = 0; ), (                                                                                                                                 ), ( __VB_C_TYPE_RESOLVE_F0(var1, tinfo1) = var_formula1; ), (), (                               ++__VB_C_COUNT_ADD_PREFIX_F0(var_prefix0, i);), (), ()                                        
                    #define __VB_C_COUNT_ITERATOR_N0_A__VB_C_FROM_M_D__VB_C_BY_M_B__VB_C_TO_M_F0(   name0, var1, tinfo1, var_prefix0, stop_f0, stop_f0_args1, n1, a1, d1, b1, start_lt_stop_f0, start_ne_stop_f0, step_ne_0_f0, step_mne_0, var_formula1, ...) /*   FROM a BY d TO    b */ name0, ( __VB_C_TYPE_RESOLVE_F0(const (__VB_C_COUNT_ADD_PREFIX_F0(var_prefix0, start)), tinfo1) = a1; __VB_C_TYPE_RESOLVE_F0(const (__VB_C_COUNT_ADD_PREFIX_F0(var_prefix0, stop)), tinfo1) = b1; long const (__VB_C_COUNT_ADD_PREFIX_F0(var_prefix0, step)) = d1                                     ; long const (__VB_C_COUNT_ADD_PREFIX_F0(var_prefix0, n)) = step_ne_0_f0(var_prefix0) ? (long) floor((double) (__VB_C_COUNT_ADD_PREFIX_F0(var_prefix0, stop) - __VB_C_COUNT_ADD_PREFIX_F0(var_prefix0, start)) / __VB_C_COUNT_ADD_PREFIX_F0(var_prefix0, step)) + 1 : 1                              ; long (__VB_C_COUNT_ADD_PREFIX_F0(var_prefix0, i)) = 0; ), ( if (step_mne_0 && __VB_C_COUNT_ADD_PREFIX_F0(var_prefix0, i) >= __VB_C_COUNT_ADD_PREFIX_F0(var_prefix0, n)) { stop_f0(name0, __VB_C_RRB_F0(stop_f0_args1)); } ), ( __VB_C_TYPE_RESOLVE_F0(var1, tinfo1) = var_formula1; ), (), (if (step_ne_0_f0(var_prefix0)) ++__VB_C_COUNT_ADD_PREFIX_F0(var_prefix0, i);), (), ()          
                    #define __VB_C_COUNT_ITERATOR_N0_A__VB_C_FROM_M_D__VB_C_BY_M_B__VB_C_UNTIL_M_F0(name0, var1, tinfo1, var_prefix0, stop_f0, stop_f0_args1, n1, a1, d1, b1, start_lt_stop_f0, start_ne_stop_f0, step_ne_0_f0, step_mne_0, var_formula1, ...) /*   FROM a BY d UNTIL b */ name0, ( __VB_C_TYPE_RESOLVE_F0(const (__VB_C_COUNT_ADD_PREFIX_F0(var_prefix0, start)), tinfo1) = a1; __VB_C_TYPE_RESOLVE_F0(const (__VB_C_COUNT_ADD_PREFIX_F0(var_prefix0, stop)), tinfo1) = b1; long const (__VB_C_COUNT_ADD_PREFIX_F0(var_prefix0, step)) = d1                                     ; long const (__VB_C_COUNT_ADD_PREFIX_F0(var_prefix0, n)) = step_ne_0_f0(var_prefix0) ? (long) ceil ((double) (__VB_C_COUNT_ADD_PREFIX_F0(var_prefix0, stop) - __VB_C_COUNT_ADD_PREFIX_F0(var_prefix0, start)) / __VB_C_COUNT_ADD_PREFIX_F0(var_prefix0, step))     : (start_ne_stop_f0(var_prefix0)); long (__VB_C_COUNT_ADD_PREFIX_F0(var_prefix0, i)) = 0; ), ( if (step_mne_0 && __VB_C_COUNT_ADD_PREFIX_F0(var_prefix0, i) >= __VB_C_COUNT_ADD_PREFIX_F0(var_prefix0, n)) { stop_f0(name0, __VB_C_RRB_F0(stop_f0_args1)); } ), ( __VB_C_TYPE_RESOLVE_F0(var1, tinfo1) = var_formula1; ), (), (if (step_ne_0_f0(var_prefix0)) ++__VB_C_COUNT_ADD_PREFIX_F0(var_prefix0, i);), (), ()          
                    #define __VB_C_COUNT_ITERATOR_N1_A_D_B_F0(                                      name0, var1, tinfo1, var_prefix0, stop_f0, stop_f0_args1, n1, a1, d1, b1, start_lt_stop_f0, start_ne_stop_f0, step_ne_0_f0, step_mne_0, var_formula1, ...) __VB_C_COUNT_ITERATOR_N1_A__VB_C_FROM_M_D_B_F0                         (name0, var1, tinfo1, var_prefix0, stop_f0, stop_f0_args1,  n1     , (0), d1,  b1     , start_lt_stop_f0, start_ne_stop_f0, step_ne_0_f0, step_mne_0, var_formula1, ## __VA_ARGS__) // n = n
                    #define __VB_C_COUNT_ITERATOR_N1_A_D_B__VB_C_TO_M_F0(                           name0, var1, tinfo1, var_prefix0, stop_f0, stop_f0_args1, n1, a1, d1, b1, start_lt_stop_f0, start_ne_stop_f0, step_ne_0_f0, step_mne_0, var_formula1, ...) __VB_C_COUNT_ITERATOR_N0_A__VB_C_FROM_M_D_B__VB_C_TO_M_F0              (name0, var1, tinfo1, var_prefix0, stop_f0, stop_f0_args1,  ()     , n1 , d1,  b1     , start_lt_stop_f0, start_ne_stop_f0, step_ne_0_f0, step_mne_0, var_formula1, ## __VA_ARGS__) // a TO b = FROM a TO b               // argument is n1, but semantically it's a
                    #define __VB_C_COUNT_ITERATOR_N1_A_D_B__VB_C_UNTIL_M_F0(                        name0, var1, tinfo1, var_prefix0, stop_f0, stop_f0_args1, n1, a1, d1, b1, start_lt_stop_f0, start_ne_stop_f0, step_ne_0_f0, step_mne_0, var_formula1, ...) __VB_C_COUNT_ITERATOR_N0_A__VB_C_FROM_M_D_B__VB_C_UNTIL_M_F0           (name0, var1, tinfo1, var_prefix0, stop_f0, stop_f0_args1,  ()     , n1 , d1,  b1     , start_lt_stop_f0, start_ne_stop_f0, step_ne_0_f0, step_mne_0, var_formula1, ## __VA_ARGS__) // a UNTIL b = FROM a UNTIL b         // argument is n1, but semantically it's a
                    #define __VB_C_COUNT_ITERATOR_N1_A_D__VB_C_BY_M_B_F0(                           name0, var1, tinfo1, var_prefix0, stop_f0, stop_f0_args1, n1, a1, d1, b1, start_lt_stop_f0, start_ne_stop_f0, step_ne_0_f0, step_mne_0, var_formula1, ...) __VB_C_COUNT_ITERATOR_N1_A__VB_C_FROM_M_D__VB_C_BY_M_B_F0              (name0, var1, tinfo1, var_prefix0, stop_f0, stop_f0_args1,  n1     , (0), d1,  b1     , start_lt_stop_f0, start_ne_stop_f0, step_ne_0_f0, step_mne_0, var_formula1, ## __VA_ARGS__) // n BY d = n FROM 0 BY d
                    #define __VB_C_COUNT_ITERATOR_N1_A_D__VB_C_BY_M_B__VB_C_TO_M_F0(                name0, var1, tinfo1, var_prefix0, stop_f0, stop_f0_args1, n1, a1, d1, b1, start_lt_stop_f0, start_ne_stop_f0, step_ne_0_f0, step_mne_0, var_formula1, ...) __VB_C_COUNT_ITERATOR_N0_A__VB_C_FROM_M_D__VB_C_BY_M_B__VB_C_TO_M_F0   (name0, var1, tinfo1, var_prefix0, stop_f0, stop_f0_args1,  ()     , n1 , d1,  b1     , start_lt_stop_f0, start_ne_stop_f0, step_ne_0_f0, step_mne_0, var_formula1, ## __VA_ARGS__) // a TO b BY d = FROM a TO b BY d     // argument is n1, but semantically it's a
                    #define __VB_C_COUNT_ITERATOR_N1_A_D__VB_C_BY_M_B__VB_C_UNTIL_M_F0(             name0, var1, tinfo1, var_prefix0, stop_f0, stop_f0_args1, n1, a1, d1, b1, start_lt_stop_f0, start_ne_stop_f0, step_ne_0_f0, step_mne_0, var_formula1, ...) __VB_C_COUNT_ITERATOR_N0_A__VB_C_FROM_M_D__VB_C_BY_M_B__VB_C_UNTIL_M_F0(name0, var1, tinfo1, var_prefix0, stop_f0, stop_f0_args1,  ()     , n1 , d1,  b1     , start_lt_stop_f0, start_ne_stop_f0, step_ne_0_f0, step_mne_0, var_formula1, ## __VA_ARGS__) // a UNTIL b BY d = FROM a TO b BY d  // argument is n1, but semantically it's a
                    #define __VB_C_COUNT_ITERATOR_N1_A__VB_C_FROM_M_D_B_F0(                         name0, var1, tinfo1, var_prefix0, stop_f0, stop_f0_args1, n1, a1, d1, b1, start_lt_stop_f0, start_ne_stop_f0, step_ne_0_f0, step_mne_0, var_formula1, ...) /* n FROM a              */ name0, ( __VB_C_TYPE_RESOLVE_F0(const (__VB_C_COUNT_ADD_PREFIX_F0(var_prefix0, start)), tinfo1) = a1;                                                                                             long const (__VB_C_COUNT_ADD_PREFIX_F0(var_prefix0, step)) = 1                                      ; long const (__VB_C_COUNT_ADD_PREFIX_F0(var_prefix0, n)) = n1                                                                                                                                                                                                                                       ; long (__VB_C_COUNT_ADD_PREFIX_F0(var_prefix0, i)) = 0; ), ( if (step_mne_0 && __VB_C_COUNT_ADD_PREFIX_F0(var_prefix0, i) >= __VB_C_COUNT_ADD_PREFIX_F0(var_prefix0, n)) { stop_f0(name0, __VB_C_RRB_F0(stop_f0_args1)); } ), ( __VB_C_TYPE_RESOLVE_F0(var1, tinfo1) = var_formula1; ), (), (                               ++__VB_C_COUNT_ADD_PREFIX_F0(var_prefix0, i);), (), ()          
                    #define __VB_C_COUNT_ITERATOR_N1_A__VB_C_FROM_M_D_B__VB_C_TO_M_F0(              name0, var1, tinfo1, var_prefix0, stop_f0, stop_f0_args1, n1, a1, d1, b1, start_lt_stop_f0, start_ne_stop_f0, step_ne_0_f0, step_mne_0, var_formula1, ...) __VB_C_ERROR("in COUNT you cannot specify n, a, and b at the same time (e.g. COUNT(1 FROM 2 TO 3) is invalid
                    #define __VB_C_COUNT_ITERATOR_N1_A__VB_C_FROM_M_D_B__VB_C_UNTIL_M_F0(           name0, var1, tinfo1, var_prefix0, stop_f0, stop_f0_args1, n1, a1, d1, b1, start_lt_stop_f0, start_ne_stop_f0, step_ne_0_f0, step_mne_0, var_formula1, ...) __VB_C_ERROR("in COUNT you cannot specify n, a, and b at the same time (e.g. COUNT(1 FROM 2 TO 3) is invalid
                    #define __VB_C_COUNT_ITERATOR_N1_A__VB_C_FROM_M_D__VB_C_BY_M_B_F0(              name0, var1, tinfo1, var_prefix0, stop_f0, stop_f0_args1, n1, a1, d1, b1, start_lt_stop_f0, start_ne_stop_f0, step_ne_0_f0, step_mne_0, var_formula1, ...) /* n FROM a BY d         */ name0, ( __VB_C_TYPE_RESOLVE_F0(const (__VB_C_COUNT_ADD_PREFIX_F0(var_prefix0, start)), tinfo1) = a1;                                                                                             long const (__VB_C_COUNT_ADD_PREFIX_F0(var_prefix0, step)) = d1                                     ; long const (__VB_C_COUNT_ADD_PREFIX_F0(var_prefix0, n)) = n1                                                                                                                                                                                                                                       ; long (__VB_C_COUNT_ADD_PREFIX_F0(var_prefix0, i)) = 0; ), ( if (step_mne_0 && __VB_C_COUNT_ADD_PREFIX_F0(var_prefix0, i) >= __VB_C_COUNT_ADD_PREFIX_F0(var_prefix0, n)) { stop_f0(name0, __VB_C_RRB_F0(stop_f0_args1)); } ), ( __VB_C_TYPE_RESOLVE_F0(var1, tinfo1) = var_formula1; ), (), (                               ++__VB_C_COUNT_ADD_PREFIX_F0(var_prefix0, i);), (), ()          
                    #define __VB_C_COUNT_ITERATOR_N1_A__VB_C_FROM_M_D__VB_C_BY_M_B__VB_C_TO_M_F0(   name0, var1, tinfo1, var_prefix0, stop_f0, stop_f0_args1, n1, a1, d1, b1, start_lt_stop_f0, start_ne_stop_f0, step_ne_0_f0, step_mne_0, var_formula1, ...) __VB_C_ERROR("in COUNT you cannot specify n, a, and b at the same time (e.g. COUNT(1 FROM 2 TO 3) is invalid
                    #define __VB_C_COUNT_ITERATOR_N1_A__VB_C_FROM_M_D__VB_C_BY_M_B__VB_C_UNTIL_M_F0(name0, var1, tinfo1, var_prefix0, stop_f0, stop_f0_args1, n1, a1, d1, b1, start_lt_stop_f0, start_ne_stop_f0, step_ne_0_f0, step_mne_0, var_formula1, ...) __VB_C_ERROR("in COUNT you cannot specify n, a, and b at the same time (e.g. COUNT(1 FROM 2 TO 3) is invalid
                // #pragma endregion
                                                                                                                                                                         
                // #pragma region REVERSED                                                                                                                               
                    #define REVERSED(...) __VB_C_REVERSED_F0(__VA_ARGS__)                                                                                                
                    #define __VB_C_REVERSED_F0(iter_f0, iter_args1, iter_modifiers1) iter_f0, iter_args1, __VB_C_MERGE_F0(iter_modifiers1, (__VB_C_REVERSED_M))          
                // #pragma endregion                                                                                                                                     
                                                                                                                                                                         
                // #pragma region arrays                                                                                                                                                                                                                                                                                                                                                                                                                                       
                    #define __VB_C_ARRAY_INTERVAL_CHECK(a, x, b) ((a) <= (x) && (x) < (b))                                                                                                                                                                                                                                                                                                                                                                                     
                    // #pragma region 1D                                                                                                                                                                                                                                                                                                                                                                                                                                       
                        // #pragma region normal                                                                                                                                                                                                                                                                                                                                                                                                                               
                            #define SLICED_BY(...) , __VB_C_SLICED_M, __VA_ARGS__                                                                                                                                                                                                                                                                                                                                                                                              
                            /**                                                                                                                                                                                                                                                                                                                                                                                                                                                
                                FOR (i, el) IN ARRAY_ITERATOR(arr, dimension)                                                                                                                                                                                                                                                                                                                                                                                                  
                                FOR (i, el) IN ARRAY_ITERATOR(arr, dimension SLICED_BY(COUNT(...))) // no comma                                                                                                                                                                                                                                                                                                                                                                
                            */                                                                                                                                                                                                                                                                                                                                                                                                                                                 
                            #define ARRAY_ITERATOR(...) __VB_C_ARRAY_ITERABLE_F0(__VA_ARGS__)                                                                                                                                                                                                                                                                                                                                                                                  
                            #define __VB_C_ARRAY_ITERABLE_F0(arr0, dim0, ...) __VB_C_ARRAY_ITERABLE_F1(arr0, dim0, __VB_C_HAS_ARGX_F0(__VA_ARGS__), __VA_ARGS__)                                                                                                                                                                                                                                                                                                               
                            #define __VB_C_ARRAY_ITERABLE_F1(...) __VB_C_ARRAY_ITERABLE_F2(__VA_ARGS__)                                                                                                                                                                                                                                                                                                                                                                        
                            #define __VB_C_ARRAY_ITERABLE_F2(arr0, dim0, has_slice, ...) __VB_C_ARRAY_ITERABLE_F2_ ## has_slice ## _F0(arr0, dim0, __VA_ARGS__)                                                                                                                                                                                                                                                                                                                
                            #define __VB_C_ARRAY_ITERABLE_F2_0_F0(arr0, dim0,                                                   ...) __VB_C_ARRAY_ITERATOR_NO_SLICE_F0, (arr0, dim0                                                                                      ), ()                                                                                                                                                                                                 
                            // #define __VB_C_ARRAY_ITERABLE_F2_1_F0(...) #__VA_ARGS__                                                                                                                                                                                                                                                                                                                                                                                         
                            #define __VB_C_ARRAY_ITERABLE_F2_1_F0(arr0, dim0, slice_m, slice_f0, slice_args1, slice_modifiers1, ...) __VB_C_ARRAY_ITERATOR_SLICE_F0   , (arr0, dim0, __VB_C_ARRAY_ITERABLE_HANDLE_SLICE_F0(slice_f0, slice_args1, slice_modifiers1)), ()                                                                                                                                                                                                       
                                                                                                                                                                                                                                                                                                                                                                                                                                                                               
                            #define __VB_C_ARRAY_ITERABLE_HANDLE_SLICE_F0(                                        slice_f0, slice_args1, slice_modifiers1) slice_f0, __VB_C_ARRAY_SLICE_INSERT_UPPER_BOUND_F1(__VB_C_RRB_F0(slice_args1)), __VB_C_COUNT_SET_VAR_PREFIX_F0(__VB_C_ARRAY_SLICE_VAR, slice_modifiers1)                                                                                                                                                            
                                                                                                                                                                                                                                                                                                                                                                                                                                                                               
                            #define __VB_C_ARRAY_SLICE_INSERT_UPPER_BOUND_F1(                                     ...              ) __VB_C_ARRAY_SLICE_INSERT_UPPER_BOUND_F2(__VA_ARGS__)                                                                                                                                                                                                                                                                                     
                            #define __VB_C_ARRAY_SLICE_INSERT_UPPER_BOUND_F2(                                     n1, a1, d1, b1, start_lt_stop_f0, start_ne_stop_f0, step_ne_0_f0, step_mne_0, has_n, a_m, d_m, b_m) __VB_C_ARRAY_SLICE_INSERT_UPPER_BOUND_F2_N ## has_n ## _A ## a_m ## _B ## b_m ## _F0(n1                , a1, d1, b1                , start_lt_stop_f0, start_ne_stop_f0, step_ne_0_f0, step_mne_0, has_n, a_m, d_m, b_m           )                      
                            #define __VB_C_ARRAY_SLICE_INSERT_UPPER_BOUND_F2_N0_A_B_F0(                           n1, a1, d1, b1, start_lt_stop_f0, start_ne_stop_f0, step_ne_0_f0, step_mne_0, has_n, a_m, d_m, b_m)                                                                                     (__VB_C_ARRAY_VAR_n, a1, d1, b1                , start_lt_stop_f0, start_ne_stop_f0, step_ne_0_f0, step_mne_0, 1    , a_m, d_m, b_m           )                      
                            #define __VB_C_ARRAY_SLICE_INSERT_UPPER_BOUND_F2_N0_A_B__VB_C_TO_M_F0(                n1, a1, d1, b1, start_lt_stop_f0, start_ne_stop_f0, step_ne_0_f0, step_mne_0, has_n, a_m, d_m, b_m)                                                                                     (n1                , a1, d1, b1                , start_lt_stop_f0, start_ne_stop_f0, step_ne_0_f0, step_mne_0, has_n, a_m, d_m, b_m           )                      
                            #define __VB_C_ARRAY_SLICE_INSERT_UPPER_BOUND_F2_N0_A_B__VB_C_UNTIL_M_F0(             n1, a1, d1, b1, start_lt_stop_f0, start_ne_stop_f0, step_ne_0_f0, step_mne_0, has_n, a_m, d_m, b_m)                                                                                     (n1                , a1, d1, b1                , start_lt_stop_f0, start_ne_stop_f0, step_ne_0_f0, step_mne_0, has_n, a_m, d_m, b_m           )                      
                            #define __VB_C_ARRAY_SLICE_INSERT_UPPER_BOUND_F2_N0_A__VB_C_FROM_M_B_F0(              n1, a1, d1, b1, start_lt_stop_f0, start_ne_stop_f0, step_ne_0_f0, step_mne_0, has_n, a_m, d_m, b_m)                                                                                     (n1                , a1, d1, __VB_C_ARRAY_VAR_n, start_lt_stop_f0, start_ne_stop_f0, step_ne_0_f0, step_mne_0, has_n, a_m, d_m, __VB_C_UNTIL_M)                      
                            #define __VB_C_ARRAY_SLICE_INSERT_UPPER_BOUND_F2_N0_A__VB_C_FROM_M_B__VB_C_TO_M_F0(   n1, a1, d1, b1, start_lt_stop_f0, start_ne_stop_f0, step_ne_0_f0, step_mne_0, has_n, a_m, d_m, b_m)                                                                                     (n1                , a1, d1, b1                , start_lt_stop_f0, start_ne_stop_f0, step_ne_0_f0, step_mne_0, has_n, a_m, d_m, b_m           )                      
                            #define __VB_C_ARRAY_SLICE_INSERT_UPPER_BOUND_F2_N0_A__VB_C_FROM_M_B__VB_C_UNTIL_M_F0(n1, a1, d1, b1, start_lt_stop_f0, start_ne_stop_f0, step_ne_0_f0, step_mne_0, has_n, a_m, d_m, b_m)                                                                                     (n1                , a1, d1, b1                , start_lt_stop_f0, start_ne_stop_f0, step_ne_0_f0, step_mne_0, has_n, a_m, d_m, b_m           )                      
                            #define __VB_C_ARRAY_SLICE_INSERT_UPPER_BOUND_F2_N1_A_B_F0(                           n1, a1, d1, b1, start_lt_stop_f0, start_ne_stop_f0, step_ne_0_f0, step_mne_0, has_n, a_m, d_m, b_m)                                                                                     (n1                , a1, d1, b1                , start_lt_stop_f0, start_ne_stop_f0, step_ne_0_f0, step_mne_0, has_n, a_m, d_m, b_m           )                      
                            #define __VB_C_ARRAY_SLICE_INSERT_UPPER_BOUND_F2_N1_A_B__VB_C_TO_M_F0(                n1, a1, d1, b1, start_lt_stop_f0, start_ne_stop_f0, step_ne_0_f0, step_mne_0, has_n, a_m, d_m, b_m)                                                                                     (n1                , a1, d1, b1                , start_lt_stop_f0, start_ne_stop_f0, step_ne_0_f0, step_mne_0, has_n, a_m, d_m, b_m           )                      
                            #define __VB_C_ARRAY_SLICE_INSERT_UPPER_BOUND_F2_N1_A_B__VB_C_UNTIL_M_F0(             n1, a1, d1, b1, start_lt_stop_f0, start_ne_stop_f0, step_ne_0_f0, step_mne_0, has_n, a_m, d_m, b_m)                                                                                     (n1                , a1, d1, b1                , start_lt_stop_f0, start_ne_stop_f0, step_ne_0_f0, step_mne_0, has_n, a_m, d_m, b_m           )                      
                            #define __VB_C_ARRAY_SLICE_INSERT_UPPER_BOUND_F2_N1_A__VB_C_FROM_M_B_F0(              n1, a1, d1, b1, start_lt_stop_f0, start_ne_stop_f0, step_ne_0_f0, step_mne_0, has_n, a_m, d_m, b_m)                                                                                     (n1                , a1, d1, b1                , start_lt_stop_f0, start_ne_stop_f0, step_ne_0_f0, step_mne_0, has_n, a_m, d_m, b_m           )                      
                            #define __VB_C_ARRAY_SLICE_INSERT_UPPER_BOUND_F2_N1_A__VB_C_FROM_M_B__VB_C_TO_M_F0(   n1, a1, d1, b1, start_lt_stop_f0, start_ne_stop_f0, step_ne_0_f0, step_mne_0, has_n, a_m, d_m, b_m)                                                                                     (n1                , a1, d1, b1                , start_lt_stop_f0, start_ne_stop_f0, step_ne_0_f0, step_mne_0, has_n, a_m, d_m, b_m           )                      
                            #define __VB_C_ARRAY_SLICE_INSERT_UPPER_BOUND_F2_N1_A__VB_C_FROM_M_B__VB_C_UNTIL_M_F0(n1, a1, d1, b1, start_lt_stop_f0, start_ne_stop_f0, step_ne_0_f0, step_mne_0, has_n, a_m, d_m, b_m)                                                                                     (n1                , a1, d1, b1                , start_lt_stop_f0, start_ne_stop_f0, step_ne_0_f0, step_mne_0, has_n, a_m, d_m, b_m           )                      
                                                                                                                                                                                                                                                                                                                                                                                                                                                                               
                            #define __VB_C_ARRAY_ITERATOR_NO_SLICE_F0(                    i_var2  , tinfo1, iter_args1, iter_modifiers1) __VB_C_ARRAY_ITERATOR_NO_SLICE_F1(__VB_C_RRB2_F0(i_var2), tinfo1, __VB_C_RRB_F0(iter_args1), __VB_C_RRB_F0(iter_modifiers1))                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        
                            #define __VB_C_ARRAY_ITERATOR_NO_SLICE_F1(                      ...)                                         __VB_C_ARRAY_ITERATOR_NO_SLICE_F2(__VA_ARGS__)                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      
                            // #define __VB_C_ARRAY_ITERATOR_NO_SLICE_F2(                    ...) 22#__VA_ARGS__ 22                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          
                            #define __VB_C_ARRAY_ITERATOR_NO_SLICE_F2(                    i0, var0, tinfo1, arr0, dim0, ...)         __VB_C_ARRAY_ITERATOR_NO_SLICE_F2 ## __VA_ARGS__ ## _F0(i0, var0, tinfo1, arr0, dim
                            #define __VB_C_ARRAY_ITERATOR_NO_SLICE_F2_F0(                 i0, var0, tinfo1, arr0, dim0)                                                                                                                        var0, (__VB_C_TYPE_RESOLVE_F0((* const __VB_C_ARRAY_VAR_arr), tinfo1) = arr0; long const __VB_C_ARRAY_VAR_n = dim0; long __VB_C_ARRAY_VAR_i = 0;), (                                                      if (__VB_C_ARRAY_VAR_i >= __VB_C_ARRAY_VAR_n                               ) { STOP(var0); }), (                 long const (i0) =                          __VB_C_ARRAY_VAR_i; __VB_C_TYPE_RESOLVE_F0((* const var0), tinfo1) = &__VB_C_ARRAY_VAR_arr[i0];), ()               , (++__VB_C_ARRAY_VAR_i;), (), ()                                                            
                            #define __VB_C_ARRAY_ITERATOR_NO_SLICE_F2__VB_C_REVERSED_M_F0(i0, var0, tinfo1, arr0, dim0)                                                                                                                        var0, (__VB_C_TYPE_RESOLVE_F0((* const __VB_C_ARRAY_VAR_arr), tinfo1) = arr0; long const __VB_C_ARRAY_VAR_n = dim0; long __VB_C_ARRAY_VAR_i = 0;), (                                                      if (__VB_C_ARRAY_VAR_i >= __VB_C_ARRAY_VAR_n                               ) { STOP(var0); }), (                 long const (i0) = __VB_C_ARRAY_VAR_n - 1 - __VB_C_ARRAY_VAR_i; __VB_C_TYPE_RESOLVE_F0((* const var0), tinfo1) = &__VB_C_ARRAY_VAR_arr[i0];), ()               , (++__VB_C_ARRAY_VAR_i;), (), ()                                                            

                            #define __VB_C_ARRAY_ITERATOR_SLICE_F0(                    i_var2, tinfo1, iter_args1, iter_modifiers1)                                                                                                              __VB_C_ARRAY_ITERATOR_SLICE_F1(__VB_C_RRB2_F0(i_var2), tinfo1, __VB_C_RRB_F0(iter_args1), __VB_C_RRB_F0(iter_modifiers1))                                                                                                                                                                                                                                                                                                                                                                                   
                            #define __VB_C_ARRAY_ITERATOR_SLICE_F1(                                                                                           ...)                                                                               __VB_C_ARRAY_ITERATOR_SLICE_F2(__VA_ARGS__)                                                                                                                                                                                                                                                                                                                                                                                                                                                                 
                            #define __VB_C_ARRAY_ITERATOR_SLICE_F2(                    i0, var0, tinfo1, arr0, dim0, slice_f0, slice_args1, slice_modifiers1, ...)                                                                               __VB_C_ARRAY_ITERATOR_SLICE_F3(i0, var0, tinfo1, arr0, dim0, __VA_ARGS__, slice_f0((__VB_C_ARRAY_VAR_i), (((long const))), slice_args1, __VB_C_COUNT_SET_NAME_F0(var0, slice_modifiers1)))                                                                                                                                                                                                                                                                                                                  
                            #define __VB_C_ARRAY_ITERATOR_SLICE_F3(                                                                                           ...)                                                                               __VB_C_ARRAY_ITERATOR_SLICE_F4(__VA_ARGS__)                                                                                                                                                                                                                                                                                                                                                                                                                                                                 
                            // #define __VB_C_ARRAY_ITERATOR_SLICE_F4(                                                                                           ...)                                                                             [[[__VA_ARGS__]]] //  __VB_C_ARRAY_ITERATOR_SLICE_F4(__VA_ARGS__)                                                                                                                                                                                                                                                                                                                                                                                                                                          
                            #define __VB_C_ARRAY_ITERATOR_SLICE_F4(                    i0, var0, tinfo1, arr0, dim0, reversed_m, _, slice_before1, slice_before_step1, slice_before_each1, slice_after_each1, slice_after_step1, slice_didnt_break1, slice_after1, ...) __VB_C_ARRAY_ITERATOR_SLICE_F4 ## reversed_m ## _F0(i0, var0, tinfo1, arr0, dim0, slice_before1, slice_before_step1, slice_before_each1, slice_after_each1, slice_after_step1, slice_didnt_break1, slice_after1)                                                                                                                                                                                                                                                                     
                            #define __VB_C_ARRAY_ITERATOR_SLICE_F4_F0(                 i0, var0, tinfo1, arr0, dim0,                slice_before1, slice_before_step1, slice_before_each1, slice_after_each1, slice_after_step1, slice_didnt_break1, slice_after1) var0, (__VB_C_TYPE_RESOLVE_F0((* const __VB_C_ARRAY_VAR_arr), tinfo1) = arr0; long const __VB_C_ARRAY_VAR_n = dim0; __VB_C_RRB_F0(slice_before1)), slice_before_step1, (__VB_C_RRB_F0(slice_before_each1) if (!__VB_C_ARRAY_INTERVAL_CHECK(0, __VB_C_ARRAY_VAR_i, __VB_C_ARRAY_VAR_n)) { STOP(var0); } long const (i0) =                          __VB_C_ARRAY_VAR_i; __VB_C_TYPE_RESOLVE_F0((* const var0), tinfo1) = &__VB_C_ARRAY_VAR_arr[i0];), slice_after_each1, slice_after_step1      , slice_didnt_break1, slice_after1          
                            #define __VB_C_ARRAY_ITERATOR_SLICE_F4__VB_C_REVERSED_M_F0(i0, var0, tinfo1, arr0, dim0,                slice_before1, slice_before_step1, slice_before_each1, slice_after_each1, slice_after_step1, slice_didnt_break1, slice_after1) var0, (__VB_C_TYPE_RESOLVE_F0((* const __VB_C_ARRAY_VAR_arr), tinfo1) = arr0; long const __VB_C_ARRAY_VAR_n = dim0; __VB_C_RRB_F0(slice_before1)), slice_before_step1, (__VB_C_RRB_F0(slice_before_each1) if (!__VB_C_ARRAY_INTERVAL_CHECK(0, __VB_C_ARRAY_VAR_i, __VB_C_ARRAY_VAR_n)) { STOP(var0); } long const (i0) = __VB_C_ARRAY_VAR_n - 1 - __VB_C_ARRAY_VAR_i; __VB_C_TYPE_RESOLVE_F0((* const var0), tinfo1) = &__VB_C_ARRAY_VAR_arr[i0];), slice_after_each1, slice_after_step1      , slice_didnt_break1, slice_after1          
                        // #pragma endregion

                        // #pragma region c-string
                            #include <string.h
                            #define __VB_C_STRLEN(str) _Generic((str), char*: strlen, char const*: strlen, __CHAR16_TYPE__*: __VB_C_STRLEN16, __CHAR16_TYPE__ const*: __VB_C_STRLEN16, __CHAR32_TYPE__*: __VB_C_STRLEN32, __CHAR32_TYPE__ const*: __VB_C_STRLEN32)(str)                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      
                            static inline unsigned __VB_C_STRLEN16(__CHAR16_TYPE__ const* str) {                                                                                                                                                                                                                                                                           
                                unsigned len = 0;                                                                                                                                                                                                                                                                                                                          
                                for (; *str != '\0'; ++str) ++len;                                                                                                                                                                                                                                                                                                         
                                return len;                                                                                                                                                                                                                                                                                                                                
                            }                                                                                                                                                                                                                                                                                                                                              
                            static inline unsigned __VB_C_STRLEN32(__CHAR32_TYPE__ const* str) {                                                                                                                                                                                                                                                                           
                                unsigned len = 0;                                                                                                                                                                                                                                                                                                                          
                                for (; *str != '\0'; ++str) ++len;                                                                                                                                                                                                                                                                                                         
                                return len;                                                                                                                                                                                                                                                                                                                                
                            }                                                                                                                                                                                                                                                                                                                                              
                                                                                                                                                                                                                                                                                                                                                                           
                            /**                                                                                                                                                                                                                                                                                                                                            
                                FOR c IN CSTRING_ITERATOR(str) // char                                                                                                                                                                                                                                                                                                     
                                FOR c AS char const IN CSTRING_ITERATOR(str SLICED_BY(...))                                                                                                                                                                                                                                                                                
                                FOR c AS wchar_t IN CSTRING_ITERATOR(...)                                                                                                                                                                                                                                                                                                  
                            */                                                                                                                                                                                                                                                                                                                                             
                            #define CSTRING_ITERATOR(...) __VB_C_CSTRING_ITERABLE_F0(__VA_ARGS__)                                                                                                                                                                                                                                                                          
                            #define __VB_C_CSTRING_ITERABLE_F0(arr0, ...) __VB_C_CSTRING_ITERABLE_F1(arr0, (__VB_C_STRLEN(__VB_C_CSTRING_VAR_arr)), __VB_C_HAS_ARGX_F0(__VA_ARGS__), __VA_ARGS__)                                                                                                                                                                          
                            #define __VB_C_CSTRING_ITERABLE_F1(...) __VB_C_CSTRING_ITERABLE_F2(__VA_ARGS__)                                                                                                                                                                                                                                                                
                            #define __VB_C_CSTRING_ITERABLE_F2(arr0, dim0, has_slice, ...) __VB_C_CSTRING_ITERABLE_F2_ ## has_slice ## _F0(arr0, dim0, __VA_ARGS__)                                                                                                                                                                                                        
                            #define __VB_C_CSTRING_ITERABLE_F2_0_F0(arr0, dim0,                                                   ...) __VB_C_CSTRING_ITERATOR_NO_SLICE_F0, (arr0, dim0                                                                                      ), ()                                                                                         
                            // #define __VB_C_CSTRING_ITERABLE_F2_1_F0(...) #__VA_ARGS__                                                                                                                                                                                                                                                                                   
                            #define __VB_C_CSTRING_ITERABLE_F2_1_F0(arr0, dim0, slice_m, slice_f0, slice_args1, slice_modifiers1, ...) __VB_C_CSTRING_ITERATOR_SLICE_F0   , (arr0, dim0, __VB_C_CSTRING_ITERABLE_HANDLE_SLICE_F0(slice_f0, slice_args1, slice_modifiers1)), ()                                                                                             
                                                                                                                                                                                                                                                                                                                                                                           
                            #define __VB_C_CSTRING_ITERABLE_HANDLE_SLICE_F0(                                        slice_f0, slice_args1, slice_modifiers1) slice_f0, __VB_C_ARRAY_SLICE_INSERT_UPPER_BOUND_F1(__VB_C_RRB_F0(slice_args1)), __VB_C_COUNT_SET_VAR_PREFIX_F0(__VB_C_CSTRING_SLICE_VAR, slice_modifiers1)                                                    
                                                                                                                                                                                                                                                                                                                                                                           
                            #define __VB_C_CSTRING_INSERT_TYPE_F0(tinfo1) __VB_C_CSTRING_INSERT_TYPE_F1(__VB_C_HAS_ARGX_F0(__VB_C_ROB2_F0(__VB_C_RRB_F0(tinfo1))), tinfo1)                                                                                                                                                                                                 
                            #define __VB_C_CSTRING_INSERT_TYPE_F1(...)    __VB_C_CSTRING_INSERT_TYPE_F2(__VA_ARGS__)                                                                                                                                                                                                                                                       
                            #define __VB_C_CSTRING_INSERT_TYPE_F2(has_type, tinfo1) __VB_C_CSTRING_INSERT_TYPE_F2_ ## has_type ## _F0(tinfo
                            #define __VB_C_CSTRING_INSERT_TYPE_F2_0_F0(tinfo1) (((char)))                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    
                            #define __VB_C_CSTRING_INSERT_TYPE_F2_1_F0(tinfo1) tinfo

                            #define __VB_C_CSTRING_ITERATOR_NO_SLICE_F0(                    i_var2  , tinfo1, iter_args1, iter_modifiers1) __VB_C_CSTRING_ITERATOR_NO_SLICE_F1(__VB_C_RRB2_F0(i_var2), __VB_C_CSTRING_INSERT_TYPE_F0(tinfo1), __VB_C_RRB_F0(iter_args1), __VB_C_RRB_F0(iter_modifiers1))                                                                                                                                                                                                                                                                                                                                                                                                                                                                     
                            #define __VB_C_CSTRING_ITERATOR_NO_SLICE_F1(                      ...)                                         __VB_C_CSTRING_ITERATOR_NO_SLICE_F2(__VA_ARGS__)                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  
                            // #define __VB_C_CSTRING_ITERATOR_NO_SLICE_F2(                    ...) 22#__VA_ARGS__ 22                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        
                            #define __VB_C_CSTRING_ITERATOR_NO_SLICE_F2(                    i0, var0, tinfo1, arr0, dim0, ...)         __VB_C_CSTRING_ITERATOR_NO_SLICE_F2 ## __VA_ARGS__ ## _F0(i0, var0, tinfo1, arr0, dim
                            #define __VB_C_CSTRING_ITERATOR_NO_SLICE_F2_F0(                 i0, var0, tinfo1, arr0, dim0)                                                                                                                        var0, (__VB_C_TYPE_RESOLVE_F0((* const __VB_C_CSTRING_VAR_arr), tinfo1) = arr0; long const __VB_C_CSTRING_VAR_n = dim0; long __VB_C_CSTRING_VAR_i = 0;), (if (__VB_C_CSTRING_VAR_i >= __VB_C_CSTRING_VAR_n) { STOP(var0); }), (                                  long const (i0) =                          __VB_C_CSTRING_VAR_i; __VB_C_TYPE_RESOLVE_F0((* const var0), tinfo1) = &__VB_C_CSTRING_VAR_arr[i0];), ()               , (++__VB_C_CSTRING_VAR_i;), (), ()                                                          
                            #define __VB_C_CSTRING_ITERATOR_NO_SLICE_F2__VB_C_REVERSED_M_F0(i0, var0, tinfo1, arr0, dim0)                                                                                                                        var0, (__VB_C_TYPE_RESOLVE_F0((* const __VB_C_CSTRING_VAR_arr), tinfo1) = arr0; long const __VB_C_CSTRING_VAR_n = dim0; long __VB_C_CSTRING_VAR_i = 0;), (if (__VB_C_CSTRING_VAR_i >= __VB_C_CSTRING_VAR_n) { STOP(var0); }), (                                  long const (i0) = __VB_C_CSTRING_VAR_n - 1 - __VB_C_CSTRING_VAR_i; __VB_C_TYPE_RESOLVE_F0((* const var0), tinfo1) = &__VB_C_CSTRING_VAR_arr[i0];), ()               , (++__VB_C_CSTRING_VAR_i;), (), ()                                                        

                            #define __VB_C_CSTRING_ITERATOR_SLICE_F0(                    i_var2, tinfo1, iter_args1, iter_modifiers1)                                                                                                              __VB_C_CSTRING_ITERATOR_SLICE_F1(__VB_C_RRB2_F0(i_var2), __VB_C_CSTRING_INSERT_TYPE_F0(tinfo1), __VB_C_RRB_F0(iter_args1), __VB_C_RRB_F0(iter_modifiers1))                                                                                                                                                                                                                                                                                                                                                                
                            #define __VB_C_CSTRING_ITERATOR_SLICE_F1(                                                                                           ...)                                                                               __VB_C_CSTRING_ITERATOR_SLICE_F2(__VA_ARGS__)                                                                                                                                                                                                                                                                                                                                                                                                                                                                             
                            #define __VB_C_CSTRING_ITERATOR_SLICE_F2(                    i0, var0, tinfo1, arr0, dim0, slice_f0, slice_args1, slice_modifiers1, ...)                                                                               __VB_C_CSTRING_ITERATOR_SLICE_F3(i0, var0, tinfo1, arr0, dim0, __VA_ARGS__, slice_f0((__VB_C_CSTRING_VAR_i), (((long const))), slice_args1, __VB_C_COUNT_SET_NAME_F0(var0, slice_modifiers1)))                                                                                                                                                                                                                                                                                                                            
                            #define __VB_C_CSTRING_ITERATOR_SLICE_F3(                                                                                           ...)                                                                               __VB_C_CSTRING_ITERATOR_SLICE_F4(__VA_ARGS__)                                                                                                                                                                                                                                                                                                                                                                                                                                                                             
                            // #define __VB_C_CSTRING_ITERATOR_SLICE_F4(                                                                                           ...)                                                                             [[[__VA_ARGS__]]] //  __VB_C_CSTRING_ITERATOR_SLICE_F4(__VA_ARGS__)                                                                                                                                                                                                                                                                                                                                                                                                                                                      
                            #define __VB_C_CSTRING_ITERATOR_SLICE_F4(                    i0, var0, tinfo1, arr0, dim0, reversed_m, _, slice_before1, slice_before_step1, slice_before_each1, slice_after_each1, slice_after_step1, slice_didnt_break1, slice_after1, ...) __VB_C_CSTRING_ITERATOR_SLICE_F4 ## reversed_m ## _F0(i0, var0, tinfo1, arr0, dim0, slice_before1, slice_before_step1, slice_before_each1, slice_after_each1, slice_after_step1, slice_didnt_break1, slice_after1)                                                                                                                                                                                                                                                                                 
                            #define __VB_C_CSTRING_ITERATOR_SLICE_F4_F0(                 i0, var0, tinfo1, arr0, dim0,                slice_before1, slice_before_step1, slice_before_each1, slice_after_each1, slice_after_step1, slice_didnt_break1, slice_after1) var0, (__VB_C_TYPE_RESOLVE_F0((* const __VB_C_CSTRING_VAR_arr), tinfo1) = arr0; long const __VB_C_CSTRING_VAR_n = dim0; __VB_C_RRB_F0(slice_before1)), slice_before_step1                                             , (__VB_C_RRB_F0(slice_before_each1) if (!__VB_C_ARRAY_INTERVAL_CHECK(0, __VB_C_CSTRING_VAR_i, __VB_C_CSTRING_VAR_n)) { STOP(var0); } long const (i0) =                          __VB_C_CSTRING_VAR_i; __VB_C_TYPE_RESOLVE_F0((* const var0), tinfo1) = &__VB_C_CSTRING_VAR_arr[i0];), slice_after_each1, slice_after_step1      , slice_didnt_break1, slice_after1                
                            #define __VB_C_CSTRING_ITERATOR_SLICE_F4__VB_C_REVERSED_M_F0(i0, var0, tinfo1, arr0, dim0,                slice_before1, slice_before_step1, slice_before_each1, slice_after_each1, slice_after_step1, slice_didnt_break1, slice_after1) var0, (__VB_C_TYPE_RESOLVE_F0((* const __VB_C_CSTRING_VAR_arr), tinfo1) = arr0; long const __VB_C_CSTRING_VAR_n = dim0; __VB_C_RRB_F0(slice_before1)), slice_before_step1                                             , (__VB_C_RRB_F0(slice_before_each1) if (!__VB_C_ARRAY_INTERVAL_CHECK(0, __VB_C_CSTRING_VAR_i, __VB_C_CSTRING_VAR_n)) { STOP(var0); } long const (i0) = __VB_C_CSTRING_VAR_n - 1 - __VB_C_CSTRING_VAR_i; __VB_C_TYPE_RESOLVE_F0((* const var0), tinfo1) = &__VB_C_CSTRING_VAR_arr[i0];), slice_after_each1, slice_after_step1      , slice_didnt_break1, slice_after1              
                        // #pragma endregion

                        // #pragma region void

                                FOR el IN VOID_ITERATOR(arr, element_size, count
                                FOR el AS const IN VOID_ITERATOR(arr, element_size, count

                            #define VOID_ITERATOR(...) __VB_C_VOID_ITERABLE_F0(__VA_ARGS__)                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     
                            #define
                            #define __VB_C_VOID_ITERABLE_F0(arr0, size0, dim0, ...) __VB_C_VOID_ITERABLE_F1(arr0, size0, dim0, __VB_C_HAS_ARGX_F0(__VA_ARGS__), __VA_ARGS__)                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    
                            #define __VB_C_VOID_ITERABLE_F1(...) __VB_C_VOID_ITERABLE_F2(__VA_ARGS__)                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           
                            #define __VB_C_VOID_ITERABLE_F2(arr0, size0, dim0, has_slice, ...) __VB_C_VOID_ITERABLE_F2_ ## has_slice ## _F0(arr0, size0, dim
                            #define __VB_C_VOID_ITERABLE_F2_0_F0(arr0, size0, dim0,                                                   ...) __VB_C_VOID_ITERATOR_NO_SLICE_F0, (arr0, size0, dim
                            // #define __VB_C_VOID_ITERABLE_F2_1_F0(...) #__VA_ARGS__                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           
                            #define __VB_C_VOID_ITERABLE_F2_1_F0(arr0, size0, dim0, slice_m, slice_f0, slice_args1, slice_modifiers1, ...) __VB_C_VOID_ITERATOR_SLICE_F0   , (arr0, size0, dim0, __VB_C_VOID_ITERABLE_HANDLE_SLICE_F0(slice_f0, slice_args1, slice_modifiers1)), ()                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             

                            #define __VB_C_VOID_ITERABLE_HANDLE_SLICE_F0(                                        slice_f0, slice_args1, slice_modifiers1) slice_f0, __VB_C_ARRAY_SLICE_INSERT_UPPER_BOUND_F1(__VB_C_RRB_F0(slice_args1)), __VB_C_COUNT_SET_VAR_PREFIX_F0(__VB_C_VOID_SLICE_VAR, slice_modifiers1)                                                                                                                                                                                                                                                                                                                                                                                                                                                                               

                            #define __VB_C_VOID_INSERT_TYPE_F0(tinfo1) __VB_C_VOID_INSERT_TYPE_F1(__VB_C_HAS_ARGX_F0(__VB_C_ROB2X_F0(__VB_C_RRB_F0(tinfo1))), tinfo
                            #define __VB_C_VOID_INSERT_TYPE_F1(...)    __VB_C_VOID_INSERT_TYPE_F2(__VA_ARGS__)                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  
                            #define __VB_C_VOID_INSERT_TYPE_F2(has_type, tinfo1) __VB_C_VOID_INSERT_TYPE_F2_ ## has_type ## _F0(tinfo
                            #define __VB_C_VOID_INSERT_TYPE_F2_0_F0(tinfo
                            #define __VB_C_VOID_INSERT_TYPE_F2_1_F0(tinfo1) __VB_C_RRB2_F0(tinfo
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               
                            #define __VB_C_VOID_ITERATOR_NO_SLICE_F0(                    i_var2  , tinfo1, iter_args1, iter_modifiers1) __VB_C_VOID_ITERATOR_NO_SLICE_F1(__VB_C_RRB2_F0(i_var2), __VB_C_VOID_INSERT_TYPE_F0(tinfo1), __VB_C_RRB_F0(iter_args1), __VB_C_RRB_F0(iter_modifiers1))                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                
                            #define __VB_C_VOID_ITERATOR_NO_SLICE_F1(                      ...)                                         __VB_C_VOID_ITERATOR_NO_SLICE_F2(__VA_ARGS__)                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          
                            // #define __VB_C_VOID_ITERATOR_NO_SLICE_F2(                    ...) 22#__VA_ARGS__ 22                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             
                            #define __VB_C_VOID_ITERATOR_NO_SLICE_F2(                    i0, var0, qualifier1, arr0, size0, dim0, ...)         __VB_C_VOID_ITERATOR_NO_SLICE_F2 ## __VA_ARGS__ ## _F0(i0, var0, qualifier1, arr0, size0, dim
                            #define __VB_C_VOID_ITERATOR_NO_SLICE_F2_F0(                 i0, var0, qualifier1, arr0, size0, dim0)                                                                                                                        var0, (char __VB_C_RRB_F0(qualifier1)* const __VB_C_VOID_VAR_arr = arr0; long const __VB_C_VOID_VAR_size = size0; long const __VB_C_VOID_VAR_n = dim0; long __VB_C_VOID_VAR_i = 0; ), (if (__VB_C_VOID_VAR_i >= __VB_C_VOID_VAR_n) { STOP(var0); })  , (                                  long const (i0) =                         __VB_C_VOID_VAR_i; void __VB_C_RRB_F0(qualifier1)* const var0 = &__VB_C_VOID_VAR_arr[i0 * __VB_C_VOID_VAR_size];), ()               , (++__VB_C_VOID_VAR_i;), (), ()                                                  
                            #define __VB_C_VOID_ITERATOR_NO_SLICE_F2__VB_C_REVERSED_M_F0(i0, var0, qualifier1, arr0, size0, dim0)                                                                                                                        var0, (char __VB_C_RRB_F0(qualifier1)* const __VB_C_VOID_VAR_arr = arr0; long const __VB_C_VOID_VAR_size = size0; long const __VB_C_VOID_VAR_n = dim0; long __VB_C_VOID_VAR_i = 0; ), (if (__VB_C_VOID_VAR_i >= __VB_C_VOID_VAR_n) { STOP(var0); })  , (                                  long const (i0) = __VB_C_VOID_VAR_n - 1 - __VB_C_VOID_VAR_i; void __VB_C_RRB_F0(qualifier1)* const var0 = &__VB_C_VOID_VAR_arr[i0 * __VB_C_VOID_VAR_size];), ()               , (++__VB_C_VOID_VAR_i;), (), ()                                                  

                            #define __VB_C_VOID_ITERATOR_SLICE_F0(                    i_var2, tinfo1, iter_args1, iter_modifiers1)                                                                                                              __VB_C_VOID_ITERATOR_SLICE_F1(__VB_C_RRB2_F0(i_var2), __VB_C_VOID_INSERT_TYPE_F0(tinfo1), __VB_C_RRB_F0(iter_args1), __VB_C_RRB_F0(iter_modifiers1))                                                                                                                                                                                                                                                                                                                                                                                                           
                            #define __VB_C_VOID_ITERATOR_SLICE_F1(                                                                                           ...)                                                                               __VB_C_VOID_ITERATOR_SLICE_F2(__VA_ARGS__)                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     
                            #define __VB_C_VOID_ITERATOR_SLICE_F2(                    i0, var0, qualifier1, arr0, size0, dim0, slice_f0, slice_args1, slice_modifiers1, ...)                                                                               __VB_C_VOID_ITERATOR_SLICE_F3(i0, var0, qualifier1, arr0, size0, dim0, __VA_ARGS__, slice_f0((__VB_C_VOID_VAR_i), (((long const))), slice_args1, __VB_C_COUNT_SET_NAME_F0(var0, slice_modifiers1)))                                                                                                                                                                                                                                                                                                                                                 
                            #define __VB_C_VOID_ITERATOR_SLICE_F3(                                                                                           ...)                                                                               __VB_C_VOID_ITERATOR_SLICE_F4(__VA_ARGS__)                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     
                            // #define __VB_C_VOID_ITERATOR_SLICE_F4(                                                                                           ...)                                                                             [[[__VA_ARGS__]]] //  __VB_C_VOID_ITERATOR_SLICE_F4(__VA_ARGS__)                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              
                            #define __VB_C_VOID_ITERATOR_SLICE_F4(                    i0, var0, qualifier1, arr0, size0, dim0, reversed_m, _, slice_before1, slice_before_step1, slice_before_each1, slice_after_each1, slice_after_step1, slice_didnt_break1, slice_after1, ...) __VB_C_VOID_ITERATOR_SLICE_F4 ## reversed_m ## _F0(i0, var0, qualifier1, arr0, size0, dim0, slice_before1, slice_before_step1, slice_before_each1, slice_after_each1, slice_after_step1, slice_didnt_break1, slice_after1)                                                                                                                                                                                                                                                                                                               
                            #define __VB_C_VOID_ITERATOR_SLICE_F4_F0(                 i0, var0, qualifier1, arr0, size0, dim0,                slice_before1, slice_before_step1, slice_before_each1, slice_after_each1, slice_after_step1, slice_didnt_break1, slice_after1) var0, (char __VB_C_RRB_F0(qualifier1)* const __VB_C_VOID_VAR_arr = arr0; long const __VB_C_VOID_VAR_size = size0; long const __VB_C_VOID_VAR_n = dim0; __VB_C_RRB_F0(slice_before1)), slice_before_step1                                             , (__VB_C_RRB_F0(slice_before_each1) if (!__VB_C_ARRAY_INTERVAL_CHECK(0, __VB_C_VOID_VAR_i, __VB_C_VOID_VAR_n)) { STOP(var0); } long const (i0) =                         __VB_C_VOID_VAR_i; void __VB_C_RRB_F0(qualifier1)* const var0 = &__VB_C_VOID_VAR_arr[i0 * __VB_C_VOID_VAR_size];), slice_after_each1, slice_after_step1      , slice_didnt_break1, slice_after1           
                            #define __VB_C_VOID_ITERATOR_SLICE_F4__VB_C_REVERSED_M_F0(i0, var0, qualifier1, arr0, size0, dim0,                slice_before1, slice_before_step1, slice_before_each1, slice_after_each1, slice_after_step1, slice_didnt_break1, slice_after1) var0, (char __VB_C_RRB_F0(qualifier1)* const __VB_C_VOID_VAR_arr = arr0; long const __VB_C_VOID_VAR_size = size0; long const __VB_C_VOID_VAR_n = dim0; __VB_C_RRB_F0(slice_before1)), slice_before_step1                                             , (__VB_C_RRB_F0(slice_before_each1) if (!__VB_C_ARRAY_INTERVAL_CHECK(0, __VB_C_VOID_VAR_i, __VB_C_VOID_VAR_n)) { STOP(var0); } long const (i0) = __VB_C_VOID_VAR_n - 1 - __VB_C_VOID_VAR_i; void __VB_C_RRB_F0(qualifier1)* const var0 = &__VB_C_VOID_VAR_arr[i0 * __VB_C_VOID_VAR_size];), slice_after_each1, slice_after_step1      , slice_didnt_break1, slice_after1           
                        // #pragma endregion
                    // #pragma endregion

                    // #pragma region 2D                                                                                                                                                                                                                                                                                                                                                                                                                                                                  
                        // #pragma region normal                                                                                                                                                                                                                                                                                                                                                                                                                                                          
                            /**                                                                                                                                                                                                                                                                                                                                                                                                                                                                           
                                FOR ((i, j), el) IN MATRIX_ITERATOR(arr, (m, n))                                                                                                                                                                                                                                                                                                                                                                                                                          
                                FOR ((i, j), el) IN MATRIX_ITERATOR(arr, (m, n) SLICED_BY(COUNT(...), COUNT(...))) // no comma                                                                                                                                                                                                                                                                                                                                                                            
                            */                                                                                                                                                                                                                                                                                                                                                                                                                                                                            
                            #define MATRIX_ITERATOR(...) __VB_C_MATRIX_ITERABLE_F0(__VA_ARGS__)                                                                                                                                                                                                                                                                                                                                                                                                           
                            #define __VB_C_MATRIX_ITERABLE_F0(arr0, dim1, ...) __VB_C_MATRIX_ITERABLE_F1(arr0, __VB_C_RRB_F0(dim1), __VB_C_HAS_ARGX_F0(__VA_ARGS__), __VA_ARGS__)                                                                                                                                                                                                                                                                                                                         
                            #define __VB_C_MATRIX_ITERABLE_F1(...) __VB_C_MATRIX_ITERABLE_F2(__VA_ARGS__)                                                                                                                                                                                                                                                                                                                                                                                                 
                            #define __VB_C_MATRIX_ITERABLE_F2(arr0, m0, n0, has_slice, ...) __VB_C_MATRIX_ITERABLE_F2_ ## has_slice ## _F0(arr0, m0, n0, __VA_ARGS__)                                                                                                                                                                                                                                                                                                                                     
                            #define __VB_C_MATRIX_ITERABLE_F2_0_F0(arr0, m0, n0,                                                                                                        ...) __VB_C_MATRIX_ITERATOR_NO_SLICE_F0, (arr0, m0, n0                                                                                                                                                                                                                        ), ()                               
                            // #define __VB_C_MATRIX_ITERABLE_F2_1_F0(...) #__VA_ARGS__                                                                                                                                                                                                                                                                                                                                                                                                                   
                            #define __VB_C_MATRIX_ITERABLE_F2_1_F0(arr0, m0, n0, slice_m, slice_m_f0, slice_m_args1, slice_m_modifiers1, slice_n_f0, slice_n_args1, slice_n_modifiers1, ...) __VB_C_MATRIX_ITERATOR_SLICE_F0   , (arr0, m0, n0, __VB_C_MATRIX_ITERABLE_HANDLE_SLICE_F0(__VB_C_MATRIX_VAR_m, slice_m_f0, slice_m_args1, slice_m_modifiers1), __VB_C_MATRIX_ITERABLE_HANDLE_SLICE_F0(__VB_C_MATRIX_VAR_n, slice_n_f0, slice_n_args1, slice_n_modifiers1)), ()                               
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          
                            #define __VB_C_MATRIX_ITERABLE_HANDLE_SLICE_F0(                           matrix_dim0, slice_f0, slice_args1, slice_modifiers1) slice_f0, __VB_C_MATRIX_SLICE_INSERT_UPPER_BOUND_F1(matrix_dim0, __VB_C_RRB_F0(slice_args1)), __VB_C_COUNT_SET_VAR_PREFIX_F0(__VB_C_MATRIX_SLICE_VAR, slice_modifiers1)                                                                                                                                                                       
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          
                            #define __VB_C_MATRIX_SLICE_INSERT_UPPER_BOUND_F1(                                     ...                                                                                                            ) __VB_C_MATRIX_SLICE_INSERT_UPPER_BOUND_F2(__VA_ARGS__)                                                                                                                                                                                                                
                            #define __VB_C_MATRIX_SLICE_INSERT_UPPER_BOUND_F2(                                     matrix_dim0, n1, a1, d1, b1, start_lt_stop_f0, start_ne_stop_f0, step_ne_0_f0, step_mne_0, has_n, a_m, d_m, b_m) __VB_C_MATRIX_SLICE_INSERT_UPPER_BOUND_F2_N ## has_n ## _A ## a_m ## _B ## b_m ## _F0(matrix_dim0, n1         , a1, d1, b1         , start_lt_stop_f0, start_ne_stop_f0, step_ne_0_f0, step_mne_0, has_n, a_m, d_m, b_m           )                                   
                            #define __VB_C_MATRIX_SLICE_INSERT_UPPER_BOUND_F2_N0_A_B_F0(                           matrix_dim0, n1, a1, d1, b1, start_lt_stop_f0, start_ne_stop_f0, step_ne_0_f0, step_mne_0, has_n, a_m, d_m, b_m)                                                                                      (             matrix_dim0, a1, d1, b1         , start_lt_stop_f0, start_ne_stop_f0, step_ne_0_f0, step_mne_0, 1    , a_m, d_m, b_m           )                                   
                            #define __VB_C_MATRIX_SLICE_INSERT_UPPER_BOUND_F2_N0_A_B__VB_C_TO_M_F0(                matrix_dim0, n1, a1, d1, b1, start_lt_stop_f0, start_ne_stop_f0, step_ne_0_f0, step_mne_0, has_n, a_m, d_m, b_m)                                                                                      (             n1         , a1, d1, b1         , start_lt_stop_f0, start_ne_stop_f0, step_ne_0_f0, step_mne_0, has_n, a_m, d_m, b_m           )                                   
                            #define __VB_C_MATRIX_SLICE_INSERT_UPPER_BOUND_F2_N0_A_B__VB_C_UNTIL_M_F0(             matrix_dim0, n1, a1, d1, b1, start_lt_stop_f0, start_ne_stop_f0, step_ne_0_f0, step_mne_0, has_n, a_m, d_m, b_m)                                                                                      (             n1         , a1, d1, b1         , start_lt_stop_f0, start_ne_stop_f0, step_ne_0_f0, step_mne_0, has_n, a_m, d_m, b_m           )                                   
                            #define __VB_C_MATRIX_SLICE_INSERT_UPPER_BOUND_F2_N0_A__VB_C_FROM_M_B_F0(              matrix_dim0, n1, a1, d1, b1, start_lt_stop_f0, start_ne_stop_f0, step_ne_0_f0, step_mne_0, has_n, a_m, d_m, b_m)                                                                                      (             n1         , a1, d1, matrix_dim0, start_lt_stop_f0, start_ne_stop_f0, step_ne_0_f0, step_mne_0, has_n, a_m, d_m, __VB_C_UNTIL_M)                                   
                            #define __VB_C_MATRIX_SLICE_INSERT_UPPER_BOUND_F2_N0_A__VB_C_FROM_M_B__VB_C_TO_M_F0(   matrix_dim0, n1, a1, d1, b1, start_lt_stop_f0, start_ne_stop_f0, step_ne_0_f0, step_mne_0, has_n, a_m, d_m, b_m)                                                                                      (             n1         , a1, d1, b1         , start_lt_stop_f0, start_ne_stop_f0, step_ne_0_f0, step_mne_0, has_n, a_m, d_m, b_m           )                                   
                            #define __VB_C_MATRIX_SLICE_INSERT_UPPER_BOUND_F2_N0_A__VB_C_FROM_M_B__VB_C_UNTIL_M_F0(matrix_dim0, n1, a1, d1, b1, start_lt_stop_f0, start_ne_stop_f0, step_ne_0_f0, step_mne_0, has_n, a_m, d_m, b_m)                                                                                      (             n1         , a1, d1, b1         , start_lt_stop_f0, start_ne_stop_f0, step_ne_0_f0, step_mne_0, has_n, a_m, d_m, b_m           )                                   
                            #define __VB_C_MATRIX_SLICE_INSERT_UPPER_BOUND_F2_N1_A_B_F0(                           matrix_dim0, n1, a1, d1, b1, start_lt_stop_f0, start_ne_stop_f0, step_ne_0_f0, step_mne_0, has_n, a_m, d_m, b_m)                                                                                      (             n1         , a1, d1, b1         , start_lt_stop_f0, start_ne_stop_f0, step_ne_0_f0, step_mne_0, has_n, a_m, d_m, b_m           )                                   
                            #define __VB_C_MATRIX_SLICE_INSERT_UPPER_BOUND_F2_N1_A_B__VB_C_TO_M_F0(                matrix_dim0, n1, a1, d1, b1, start_lt_stop_f0, start_ne_stop_f0, step_ne_0_f0, step_mne_0, has_n, a_m, d_m, b_m)                                                                                      (             n1         , a1, d1, b1         , start_lt_stop_f0, start_ne_stop_f0, step_ne_0_f0, step_mne_0, has_n, a_m, d_m, b_m           )                                   
                            #define __VB_C_MATRIX_SLICE_INSERT_UPPER_BOUND_F2_N1_A_B__VB_C_UNTIL_M_F0(             matrix_dim0, n1, a1, d1, b1, start_lt_stop_f0, start_ne_stop_f0, step_ne_0_f0, step_mne_0, has_n, a_m, d_m, b_m)                                                                                      (             n1         , a1, d1, b1         , start_lt_stop_f0, start_ne_stop_f0, step_ne_0_f0, step_mne_0, has_n, a_m, d_m, b_m           )                                   
                            #define __VB_C_MATRIX_SLICE_INSERT_UPPER_BOUND_F2_N1_A__VB_C_FROM_M_B_F0(              matrix_dim0, n1, a1, d1, b1, start_lt_stop_f0, start_ne_stop_f0, step_ne_0_f0, step_mne_0, has_n, a_m, d_m, b_m)                                                                                      (             n1         , a1, d1, b1         , start_lt_stop_f0, start_ne_stop_f0, step_ne_0_f0, step_mne_0, has_n, a_m, d_m, b_m           )                                   
                            #define __VB_C_MATRIX_SLICE_INSERT_UPPER_BOUND_F2_N1_A__VB_C_FROM_M_B__VB_C_TO_M_F0(   matrix_dim0, n1, a1, d1, b1, start_lt_stop_f0, start_ne_stop_f0, step_ne_0_f0, step_mne_0, has_n, a_m, d_m, b_m)                                                                                      (             n1         , a1, d1, b1         , start_lt_stop_f0, start_ne_stop_f0, step_ne_0_f0, step_mne_0, has_n, a_m, d_m, b_m           )                                   
                            #define __VB_C_MATRIX_SLICE_INSERT_UPPER_BOUND_F2_N1_A__VB_C_FROM_M_B__VB_C_UNTIL_M_F0(matrix_dim0, n1, a1, d1, b1, start_lt_stop_f0, start_ne_stop_f0, step_ne_0_f0, step_mne_0, has_n, a_m, d_m, b_m)                                                                                      (             n1         , a1, d1, b1         , start_lt_stop_f0, start_ne_stop_f0, step_ne_0_f0, step_mne_0, has_n, a_m, d_m, b_m           )                                   
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          
                            #define __VB_C_MATRIX_HANDLE_VAR_F0(ij_var2) __VB_C_RRB3_F0(ij_var2)                                                                                                                                                                                                                                                                                                                                                                                                          

                            #define __VB_C_MATRIX_ITERATOR_NO_SLICE_F0(                   ij_var2  , tinfo1, iter_args1, iter_modifiers1) __VB_C_MATRIX_ITERATOR_NO_SLICE_F1(__VB_C_MATRIX_HANDLE_VAR_F0(ij_var2), tinfo1, __VB_C_RRB_F0(iter_args1), __VB_C_RRB_F0(iter_modifiers
                            #define __VB_C_MATRIX_ITERATOR_NO_SLICE_F1(                      ...)                                         __VB_C_MATRIX_ITERATOR_NO_SLICE_F2(__VA_ARGS__)                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          
                            // #define __VB_C_MATRIX_ITERATOR_NO_SLICE_F2(                    ...) 22#__VA_ARGS__ 22                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               
                            #define __VB_C_MATRIX_ITERATOR_NO_SLICE_F2(                    i0, j0, var0, tinfo1, arr0, m0, n0, ...)         __VB_C_MATRIX_ITERATOR_NO_SLICE_F2 ## __VA_ARGS__ ## _F0(i0, j0, var0, tinfo1, arr0, m0, n
                            #define __VB_C_MATRIX_ITERATOR_NO_SLICE_F2_F0(                 i0, j0, var0, tinfo1, arr0, m0, n0)                                                                                                                        var0, (__VB_C_TYPE_RESOLVE_F0((* const __VB_C_MATRIX_VAR_arr), tinfo1) = (void*) arr0; long const __VB_C_MATRIX_VAR_m = m0; long const __VB_C_MATRIX_VAR_n = n0; long __VB_C_MATRIX_VAR_i = 0; long __VB_C_MATRIX_VAR_j = 0;  ), (if (__VB_C_MATRIX_VAR_j >= __VB_C_MATRIX_VAR_n) { __VB_C_MATRIX_VAR_j = 0; ++__VB_C_MATRIX_VAR_i; if (__VB_C_MATRIX_VAR_i >= __VB_C_MATRIX_VAR_m) { STOP(var0); } })   , (                                   long const (i0) =                           __VB_C_MATRIX_VAR_i; long const (j0) =                           __VB_C_MATRIX_VAR_j; __VB_C_TYPE_RESOLVE_F0((* const var0), tinfo1) = &__VB_C_MATRIX_VAR_arr[i0 * __VB_C_MATRIX_VAR_n + j0];), ()               , (++__VB_C_MATRIX_VAR_j;), (), ()                   
                            #define __VB_C_MATRIX_ITERATOR_NO_SLICE_F2__VB_C_REVERSED_M_F0(i0, j0, var0, tinfo1, arr0, m0, n0)                                                                                                                        var0, (__VB_C_TYPE_RESOLVE_F0((* const __VB_C_MATRIX_VAR_arr), tinfo1) = (void*) arr0; long const __VB_C_MATRIX_VAR_m = m0; long const __VB_C_MATRIX_VAR_n = n0; long __VB_C_MATRIX_VAR_i = 0; long __VB_C_MATRIX_VAR_j = 0;  ), (if (__VB_C_MATRIX_VAR_j >= __VB_C_MATRIX_VAR_n) { __VB_C_MATRIX_VAR_j = 0; ++__VB_C_MATRIX_VAR_i; if (__VB_C_MATRIX_VAR_i >= __VB_C_MATRIX_VAR_m) { STOP(var0); } })   , (                                   long const (i0) = __VB_C_MATRIX_VAR_m - 1 - __VB_C_MATRIX_VAR_i; long const (j0) = __VB_C_MATRIX_VAR_n - 1 - __VB_C_MATRIX_VAR_j; __VB_C_TYPE_RESOLVE_F0((* const var0), tinfo1) = &__VB_C_MATRIX_VAR_arr[i0 * __VB_C_MATRIX_VAR_n + j0];), ()               , (++__VB_C_MATRIX_VAR_j;), (), ()                   

                            #define __VB_C_MATRIX_ITERATOR_SLICE_F0(                    ij_var2, tinfo1, iter_args1, iter_modifiers1)                                                                                                                      __VB_C_MATRIX_ITERATOR_SLICE_F1(__VB_C_MATRIX_HANDLE_VAR_F0(ij_var2), tinfo1, __VB_C_RRB_F0(iter_args1), __VB_C_RRB_F0(iter_modifiers
                            #define __VB_C_MATRIX_ITERATOR_SLICE_F1(                                                                                           ...)                                                                                        __VB_C_MATRIX_ITERATOR_SLICE_F2(__VA_ARGS__)                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            
                            #define __VB_C_MATRIX_ITERATOR_SLICE_F2(                    i0, j0, var0, tinfo1, arr0, m0, n0, slice_m_f0, slice_m_args1, slice_m_modifiers1, slice_n_f0, slice_n_args1, slice_n_modifiers1, ...)                             __VB_C_MATRIX_ITERATOR_SLICE_F3(i0, j0, var0, tinfo1, arr0, m0, n0, __VA_ARGS__, __VB_C_MATRIX_CALL_SLICE_F0(slice_m_f0, slice_m_args1, __VB_C_COUNT_SET_NAME_F0(var0, slice_m_modifiers1), slice_n_f0, slice_n_args1, __VB_C_COUNT_SET_NAME_F0(var0, slice_n_modifiers1)))                                                                                                                                                                                                                                                                                                                                                                                                                                                                             
                            #define __VB_C_MATRIX_ITERATOR_SLICE_F3(                                                                                               ...)                                                                                    __VB_C_MATRIX_ITERATOR_SLICE_F4(__VA_ARGS__)                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            
                            // #define
                            #define __VB_C_MATRIX_ITERATOR_SLICE_F4(                    i0, j0, var0, tinfo1, arr0, m0, n0, reversed_m, slice_before1, slice_before_step1, slice_before_each1, slice_after_each1, slice_after_step1, slice_didnt_break1, slice_after1, ...) __VB_C_MATRIX_ITERATOR_SLICE_F4 ## reversed_m ## _F0(i0, j0, var0, tinfo1, arr0, m0, n0, slice_before1, slice_before_step1, slice_before_each1, slice_after_each1, slice_after_step1, slice_didnt_break1, slice_after1)                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                
                            #define __VB_C_MATRIX_ITERATOR_SLICE_F4_F0(                 i0, j0, var0, tinfo1, arr0, m0, n0,             slice_before1, slice_before_step1, slice_before_each1, slice_after_each1, slice_after_step1, slice_didnt_break1, slice_after1) var0, (__VB_C_TYPE_RESOLVE_F0((* const __VB_C_MATRIX_VAR_arr), tinfo1) = (void*) arr0; long const __VB_C_MATRIX_VAR_m = m0; long const __VB_C_MATRIX_VAR_n = n0; __VB_C_RRB_F0(slice_before1)                                 ), slice_before_step1                                                                                                                                                        , (__VB_C_RRB_F0(slice_before_each1) if (!__VB_C_ARRAY_INTERVAL_CHECK(0, __VB_C_MATRIX_VAR_i, __VB_C_MATRIX_VAR_m) || !__VB_C_ARRAY_INTERVAL_CHECK(0, __VB_C_MATRIX_VAR_j, __VB_C_MATRIX_VAR_n)) { STOP(var0); } long const (i0) =                           __VB_C_MATRIX_VAR_i; long const (j0) =                           __VB_C_MATRIX_VAR_j; __VB_C_TYPE_RESOLVE_F0((* const var0), tinfo1) = &__VB_C_MATRIX_VAR_arr[i0 * __VB_C_MATRIX_VAR_n + j0];), slice_after_each1, slice_after_step1, slice_didnt_break1, slice_after1           
                            #define __VB_C_MATRIX_ITERATOR_SLICE_F4__VB_C_REVERSED_M_F0(i0, j0, var0, tinfo1, arr0, m0, n0,             slice_before1, slice_before_step1, slice_before_each1, slice_after_each1, slice_after_step1, slice_didnt_break1, slice_after1) var0, (__VB_C_TYPE_RESOLVE_F0((* const __VB_C_MATRIX_VAR_arr), tinfo1) = (void*) arr0; long const __VB_C_MATRIX_VAR_m = m0; long const __VB_C_MATRIX_VAR_n = n0; __VB_C_RRB_F0(slice_before1)                                 ), slice_before_step1                                                                                                                                                        , (__VB_C_RRB_F0(slice_before_each1) if (!__VB_C_ARRAY_INTERVAL_CHECK(0, __VB_C_MATRIX_VAR_i, __VB_C_MATRIX_VAR_m) || !__VB_C_ARRAY_INTERVAL_CHECK(0, __VB_C_MATRIX_VAR_j, __VB_C_MATRIX_VAR_n)) { STOP(var0); } long const (i0) = __VB_C_MATRIX_VAR_m - 1 - __VB_C_MATRIX_VAR_i; long const (j0) = __VB_C_MATRIX_VAR_n - 1 - __VB_C_MATRIX_VAR_j; __VB_C_TYPE_RESOLVE_F0((* const var0), tinfo1) = &__VB_C_MATRIX_VAR_arr[i0 * __VB_C_MATRIX_VAR_n + j0];), slice_after_each1, slice_after_step1, slice_didnt_break1, slice_after1           

                            #define __VB_C_MATRIX_SLICE_STOP_F0(name

                            #define __VB_C_MATRIX_CALL_SLICE_F0(slice_m_f0, slice_m_args1, slice_m_modifiers1, slice_n_f0, slice_n_args1, slice_n_modifiers1) __VB_C_MATRIX_CALL_SLICE_F1(slice_m_f0((__VB_C_MATRIX_VAR_i), (((long const))), slice_m_args1, __VB_C_COUNT_SET_VAR_PREFIX_F0(__VB_C_MATRIX_SLICE_VAR_m, slice_m_modifiers1)), slice_n_f0, slice_n_args1, slice_n_modifiers
                            #define __VB_C_MATRIX_CALL_SLICE_F1(...) __VB_C_MATRIX_CALL_SLICE_F2(__VA_ARGS__)                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      
                            // #define __VB_C_MATRIX_CALL_SLICE_F2(...) (__VA_ARGS__), (), (), (), (), ()                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          
                            #define __VB_C_MATRIX_CALL_SLICE_F2(_, slice_m_before1, slice_m_before_step1, slice_m_before_each1, slice_m_after_each1, slice_m_after_step1, slice_m_didnt_break1, slice_m_after1, slice_n_f0, slice_n_args1, slice_n_modifiers1) __VB_C_MATRIX_CALL_SLICE_F3(slice_m_before1, slice_m_before_step1, slice_m_before_each1, slice_m_after_each1, slice_m_after_step1, slice_m_didnt_break1, slice_m_after1, slice_n_f0((__VB_C_MATRIX_VAR_j), (((long const))), slice_n_args1, __VB_C_COUNT_SET_STOP_F0((__VB_C_MATRIX_SLICE_STOP_F0, ({ __VB_C_MATRIX_SLICE_VAR_n_i = 0; __VB_C_RRB_F0(slice_m_after_step1) __VB_C_RRB_F0(slice_m_before_step1) })), __VB_C_COUNT_SET_VAR_PREFIX_F0(__VB_C_MATRIX_SLICE_VAR_n, slice_n_modifiers1))))                                                                                                                                                                                                                                                 
                            #define __VB_C_MATRIX_CALL_SLICE_F3(...) __VB_C_MATRIX_CALL_SLICE_F4(__VA_ARGS__)                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      
                            #define __VB_C_MATRIX_CALL_SLICE_F4(slice_m_before1, slice_m_before_step1, slice_m_before_each1, slice_m_after_each1, slice_m_after_step1, slice_m_didnt_break1, slice_m_after1, _, slice_n_before1, slice_n_before_step1, slice_n_before_each1, slice_n_after_each1, slice_n_after_step1, slice_n_didnt_break1, slice_n_after1) (__VB_C_RRB_F0(slice_m_before1) __VB_C_RRB_F0(slice_n_before1)), slice_n_before_step1, (__VB_C_RRB_F0(slice_m_before_each1) __VB_C_RRB_F0(slice_n_before_each1)), (__VB_C_RRB_F0(slice_m_after_each1) __VB_C_RRB_F0(slice_n_after_each1)), slice_n_after_step1, (__VB_C_RRB_F0(slice_m_didnt_break1) __VB_C_RRB_F0(slice_n_didnt_break1)), (__VB_C_RRB_F0(slice_m_after1) __VB_C_RRB_F0(slice_n_after1))                                                                                                                                                                                                                                                                                               
                        // #pragma endregion

                        // #pragma region void                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           

                                FOR ((i, j), el) IN VOID_MATRIX_ITERATOR(arr, (m, n))                                                                                                                                                                                                                                                                                                                                                                                                                                                                    
                                FOR ((i, j), el) IN VOID_MATRIX_ITERATOR(arr, (m, n) SLICED_BY(COUNT(...), COUNT(...))) // no comma                                                                                                                                                                                                                                                                                                                                                                                                                      

                            #define VOID_MATRIX_ITERATOR(...) __VB_C_VOID_MATRIX_ITERABLE_F0(__VA_ARGS__)                                                                                                                                                                                                                                                                                                                                                                                                                                                
                            #define __VB_C_VOID_MATRIX_ITERABLE_F0(arr0, size0, dim1, ...) __VB_C_VOID_MATRIX_ITERABLE_F1(arr0, size0, __VB_C_RRB_F0(dim1), __VB_C_HAS_ARGX_F0(__VA_ARGS__), __VA_ARGS__)                                                                                                                                                                                                                                                                                                                                                
                            #define __VB_C_VOID_MATRIX_ITERABLE_F1(...) __VB_C_VOID_MATRIX_ITERABLE_F2(__VA_ARGS__)                                                                                                                                                                                                                                                                                                                                                                                                                                      
                            #define __VB_C_VOID_MATRIX_ITERABLE_F2(arr0, size0, m0, n0, has_slice, ...) __VB_C_VOID_MATRIX_ITERABLE_F2_ ## has_slice ## _F0(arr0, size0, m0, n0, __VA_ARGS__)                                                                                                                                                                                                                                                                                                                                                            
                            #define __VB_C_VOID_MATRIX_ITERABLE_F2_0_F0(arr0, size0, m0, n0,                                                                                                        ...) __VB_C_VOID_MATRIX_ITERATOR_NO_SLICE_F0, (arr0, size0, m0, n0                                                                                                                                                                                                                                            ), ()                                  
                            // #define __VB_C_VOID_MATRIX_ITERABLE_F2_1_F0(...) #__VA_ARGS__                                                                                                                                                                                                                                                                                                                                                                                                                                                             
                            #define __VB_C_VOID_MATRIX_ITERABLE_F2_1_F0(arr0, size0, m0, n0, slice_m, slice_m_f0, slice_m_args1, slice_m_modifiers1, slice_n_f0, slice_n_args1, slice_n_modifiers1, ...) __VB_C_VOID_MATRIX_ITERATOR_SLICE_F0   , (arr0, size0, m0, n0, __VB_C_VOID_MATRIX_ITERABLE_HANDLE_SLICE_F0(__VB_C_VOID_MATRIX_VAR_m, slice_m_f0, slice_m_args1, slice_m_modifiers1), __VB_C_VOID_MATRIX_ITERABLE_HANDLE_SLICE_F0(__VB_C_VOID_MATRIX_VAR_n, slice_n_f0, slice_n_args1, slice_n_modifiers1)), ()                                  

                            #define __VB_C_VOID_MATRIX_ITERABLE_HANDLE_SLICE_F0(                           matrix_dim0, slice_f0, slice_args1, slice_modifiers1) slice_f0, __VB_C_MATRIX_SLICE_INSERT_UPPER_BOUND_F1(matrix_dim0, __VB_C_RRB_F0(slice_args1)), __VB_C_COUNT_SET_VAR_PREFIX_F0(__VB_C_VOID_MATRIX_SLICE_VAR, slice_modifiers1)                                                                                                                                                                                                            
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         
                            #define __VB_C_VOID_MATRIX_HANDLE_VAR_F0(ij_var2) __VB_C_RRB3_F0(ij_var2)                                                                                                                                                                                                                                                                                                                                                                                                                                                    

                            #define __VB_C_VOID_MATRIX_ITERATOR_NO_SLICE_F0(                   ij_var2  , tinfo1, iter_args1, iter_modifiers1) __VB_C_VOID_MATRIX_ITERATOR_NO_SLICE_F1(__VB_C_VOID_MATRIX_HANDLE_VAR_F0(ij_var2), __VB_C_VOID_INSERT_TYPE_F0(tinfo1), __VB_C_RRB_F0(iter_args1), __VB_C_RRB_F0(iter_modifiers
                            #define __VB_C_VOID_MATRIX_ITERATOR_NO_SLICE_F1(                      ...)                                         __VB_C_VOID_MATRIX_ITERATOR_NO_SLICE_F2(__VA_ARGS__)                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       
                            // #define __VB_C_VOID_MATRIX_ITERATOR_NO_SLICE_F2(                    ...) 22#__VA_ARGS__ 22                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 
                            #define __VB_C_VOID_MATRIX_ITERATOR_NO_SLICE_F2(                    i0, j0, var0, qualifier1, arr0, size0, m0, n0, ...)         __VB_C_VOID_MATRIX_ITERATOR_NO_SLICE_F2 ## __VA_ARGS__ ## _F0(i0, j0, var0, qualifier1, arr0, size0, m0, n
                            #define __VB_C_VOID_MATRIX_ITERATOR_NO_SLICE_F2_F0(                 i0, j0, var0, qualifier1, arr0, size0, m0, n0)                                                                                                                     var0, (int const __VB_C_VOID_MATRIX_VAR_size = size0; char __VB_C_RRB_F0(qualifier1)* const __VB_C_VOID_MATRIX_VAR_arr = (void*) arr0; long const __VB_C_VOID_MATRIX_VAR_m = m0; long const __VB_C_VOID_MATRIX_VAR_n = n0; long __VB_C_VOID_MATRIX_VAR_i = 0; long __VB_C_VOID_MATRIX_VAR_j = 0;  ), (if (__VB_C_VOID_MATRIX_VAR_j >= __VB_C_VOID_MATRIX_VAR_n) { __VB_C_VOID_MATRIX_VAR_j = 0; ++__VB_C_VOID_MATRIX_VAR_i; } if (__VB_C_VOID_MATRIX_VAR_i >= __VB_C_VOID_MATRIX_VAR_m) { STOP(var0); })   , (                                   long const (i0) =                                __VB_C_VOID_MATRIX_VAR_i; long const (j0) =                                __VB_C_VOID_MATRIX_VAR_j; void __VB_C_RRB_F0(qualifier1)* const var0 = &__VB_C_VOID_MATRIX_VAR_arr[(i0 * __VB_C_VOID_MATRIX_VAR_n + j0) * __VB_C_VOID_MATRIX_VAR_size];), ()               , (++__VB_C_VOID_MATRIX_VAR_j;), (), ()            
                            #define __VB_C_VOID_MATRIX_ITERATOR_NO_SLICE_F2__VB_C_REVERSED_M_F0(i0, j0, var0, qualifier1, arr0, size0, m0, n0)                                                                                                                     var0, (int const __VB_C_VOID_MATRIX_VAR_size = size0; char __VB_C_RRB_F0(qualifier1)* const __VB_C_VOID_MATRIX_VAR_arr = (void*) arr0; long const __VB_C_VOID_MATRIX_VAR_m = m0; long const __VB_C_VOID_MATRIX_VAR_n = n0; long __VB_C_VOID_MATRIX_VAR_i = 0; long __VB_C_VOID_MATRIX_VAR_j = 0;  ), (if (__VB_C_VOID_MATRIX_VAR_j >= __VB_C_VOID_MATRIX_VAR_n) { __VB_C_VOID_MATRIX_VAR_j = 0; ++__VB_C_VOID_MATRIX_VAR_i; } if (__VB_C_VOID_MATRIX_VAR_i >= __VB_C_VOID_MATRIX_VAR_m) { STOP(var0); })   , (                                   long const (i0) = __VB_C_VOID_MATRIX_VAR_m - 1 - __VB_C_VOID_MATRIX_VAR_i; long const (j0) = __VB_C_VOID_MATRIX_VAR_n - 1 - __VB_C_VOID_MATRIX_VAR_j; void __VB_C_RRB_F0(qualifier1)* const var0 = &__VB_C_VOID_MATRIX_VAR_arr[(i0 * __VB_C_VOID_MATRIX_VAR_n + j0) * __VB_C_VOID_MATRIX_VAR_size];), ()               , (++__VB_C_VOID_MATRIX_VAR_j;), (), ()            

                            #define __VB_C_VOID_MATRIX_ITERATOR_SLICE_F0(                    ij_var2, tinfo1, iter_args1, iter_modifiers1)                                                                                                                      __VB_C_VOID_MATRIX_ITERATOR_SLICE_F1(__VB_C_VOID_MATRIX_HANDLE_VAR_F0(ij_var2), __VB_C_VOID_INSERT_TYPE_F0(tinfo1), __VB_C_RRB_F0(iter_args1), __VB_C_RRB_F0(iter_modifiers
                            #define __VB_C_VOID_MATRIX_ITERATOR_SLICE_F1(                                                                                           ...)                                                                                        __VB_C_VOID_MATRIX_ITERATOR_SLICE_F2(__VA_ARGS__)                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         
                            #define __VB_C_VOID_MATRIX_ITERATOR_SLICE_F2(                    i0, j0, var0, qualifier1, arr0, size0, m0, n0, slice_m_f0, slice_m_args1, slice_m_modifiers1, slice_n_f0, slice_n_args1, slice_n_modifiers1, ...)                             __VB_C_VOID_MATRIX_ITERATOR_SLICE_F3(i0, j0, var0, qualifier1, arr0, size0, m0, n0, __VA_ARGS__, __VB_C_VOID_MATRIX_CALL_SLICE_F0(slice_m_f0, slice_m_args1, __VB_C_COUNT_SET_NAME_F0(var0, slice_m_modifiers1), slice_n_f0, slice_n_args1, __VB_C_COUNT_SET_NAME_F0(var0, slice_n_modifiers
                            #define __VB_C_VOID_MATRIX_ITERATOR_SLICE_F3(                                                                                               ...)                                                                                    __VB_C_VOID_MATRIX_ITERATOR_SLICE_F4(__VA_ARGS__)                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         
                            // #define
                            #define __VB_C_VOID_MATRIX_ITERATOR_SLICE_F4(                    i0, j0, var0, qualifier1, arr0, size0, m0, n0, reversed_m, slice_before1, slice_before_step1, slice_before_each1, slice_after_each1, slice_after_step1, slice_didnt_break1, slice_after1, ...) __VB_C_VOID_MATRIX_ITERATOR_SLICE_F4 ## reversed_m ## _F0(i0, j0, var0, qualifier1, arr0, size0, m0, n0, slice_before1, slice_before_step1, slice_before_each1, slice_after_each1, slice_after_step1, slice_didnt_break1, slice_after
                            #define __VB_C_VOID_MATRIX_ITERATOR_SLICE_F4_F0(                 i0, j0, var0, qualifier1, arr0, size0, m0, n0,             slice_before1, slice_before_step1, slice_before_each1, slice_after_each1, slice_after_step1, slice_didnt_break1, slice_after1) var0, (int const __VB_C_VOID_MATRIX_VAR_size = size0; char __VB_C_RRB_F0(qualifier1)* const __VB_C_VOID_MATRIX_VAR_arr = (void*) arr0; long const __VB_C_VOID_MATRIX_VAR_m = m0; long const __VB_C_VOID_MATRIX_VAR_n = n0; __VB_C_RRB_F0(slice_before1)                                           ), slice_before_step1                                                                                                                                                                                    , (__VB_C_RRB_F0(slice_before_each1) if (!__VB_C_ARRAY_INTERVAL_CHECK(0, __VB_C_VOID_MATRIX_VAR_i, __VB_C_VOID_MATRIX_VAR_m) || !__VB_C_ARRAY_INTERVAL_CHECK(0, __VB_C_VOID_MATRIX_VAR_j, __VB_C_VOID_MATRIX_VAR_n)) { STOP(var0); } long const (i0) =                                __VB_C_VOID_MATRIX_VAR_i; long const (j0) =                                __VB_C_VOID_MATRIX_VAR_j; void __VB_C_RRB_F0(qualifier1)* const var0 = &__VB_C_VOID_MATRIX_VAR_arr[(i0 * __VB_C_VOID_MATRIX_VAR_n + j0) * __VB_C_VOID_MATRIX_VAR_size];), slice_after_each1, slice_after_step1, slice_didnt_break1, slice_after1                            
                            #define __VB_C_VOID_MATRIX_ITERATOR_SLICE_F4__VB_C_REVERSED_M_F0(i0, j0, var0, qualifier1, arr0, size0, m0, n0,             slice_before1, slice_before_step1, slice_before_each1, slice_after_each1, slice_after_step1, slice_didnt_break1, slice_after1) var0, (int const __VB_C_VOID_MATRIX_VAR_size = size0; char __VB_C_RRB_F0(qualifier1)* const __VB_C_VOID_MATRIX_VAR_arr = (void*) arr0; long const __VB_C_VOID_MATRIX_VAR_m = m0; long const __VB_C_VOID_MATRIX_VAR_n = n0; __VB_C_RRB_F0(slice_before1)                                           ), slice_before_step1                                                                                                                                                                                    , (__VB_C_RRB_F0(slice_before_each1) if (!__VB_C_ARRAY_INTERVAL_CHECK(0, __VB_C_VOID_MATRIX_VAR_i, __VB_C_VOID_MATRIX_VAR_m) || !__VB_C_ARRAY_INTERVAL_CHECK(0, __VB_C_VOID_MATRIX_VAR_j, __VB_C_VOID_MATRIX_VAR_n)) { STOP(var0); } long const (i0) = __VB_C_VOID_MATRIX_VAR_m - 1 - __VB_C_VOID_MATRIX_VAR_i; long const (j0) = __VB_C_VOID_MATRIX_VAR_n - 1 - __VB_C_VOID_MATRIX_VAR_j; void __VB_C_RRB_F0(qualifier1)* const var0 = &__VB_C_VOID_MATRIX_VAR_arr[(i0 * __VB_C_VOID_MATRIX_VAR_n + j0) * __VB_C_VOID_MATRIX_VAR_size];), slice_after_each1, slice_after_step1, slice_didnt_break1, slice_after1                            

                            #define __VB_C_VOID_MATRIX_SLICE_STOP_F0(name

                            #define __VB_C_VOID_MATRIX_CALL_SLICE_F0(slice_m_f0, slice_m_args1, slice_m_modifiers1, slice_n_f0, slice_n_args1, slice_n_modifiers1) __VB_C_VOID_MATRIX_CALL_SLICE_F1(slice_m_f0((__VB_C_VOID_MATRIX_VAR_i), (((long const))), slice_m_args1, __VB_C_COUNT_SET_VAR_PREFIX_F0(__VB_C_VOID_MATRIX_SLICE_VAR_m, slice_m_modifiers1)), slice_n_f0, slice_n_args1, slice_n_modifiers1)                                                                                                                                                                                                                                                                                                                                                                                                                          
                            #define __VB_C_VOID_MATRIX_CALL_SLICE_F1(...) __VB_C_VOID_MATRIX_CALL_SLICE_F2(__VA_ARGS__)                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  
                            // #define __VB_C_VOID_MATRIX_CALL_SLICE_F2(...) (__VA_ARGS__), (), (), (), (), ()                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           
                            #define __VB_C_VOID_MATRIX_CALL_SLICE_F2(_, slice_m_before1, slice_m_before_step1, slice_m_before_each1, slice_m_after_each1, slice_m_after_step1, slice_m_didnt_break1, slice_m_after1, slice_n_f0, slice_n_args1, slice_n_modifiers1) __VB_C_VOID_MATRIX_CALL_SLICE_F3(slice_m_before1, slice_m_before_step1, slice_m_before_each1, slice_m_after_each1, slice_m_after_step1, slice_m_didnt_break1, slice_m_after1, slice_n_f0((__VB_C_VOID_MATRIX_VAR_j), (((long const))), slice_n_args1, __VB_C_COUNT_SET_STOP_F0((__VB_C_VOID_MATRIX_SLICE_STOP_F0, ({ __VB_C_RRB_F0(slice_m_after_step1) __VB_C_VOID_MATRIX_SLICE_VAR_n_i = 0; })), __VB_C_COUNT_SET_VAR_PREFIX_F0(__VB_C_VOID_MATRIX_SLICE_VAR_n, slice_n_modifiers1))))                                                                             
                            #define __VB_C_VOID_MATRIX_CALL_SLICE_F3(...) __VB_C_VOID_MATRIX_CALL_SLICE_F4(__VA_ARGS__)                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  
                            #define __VB_C_VOID_MATRIX_CALL_SLICE_F4(slice_m_before1, slice_m_before_step1, slice_m_before_each1, slice_m_after_each1, slice_m_after_step1, slice_m_didnt_break1, slice_m_after1, _, slice_n_before1, slice_n_before_step1, slice_n_before_each1, slice_n_after_each1, slice_n_after_step1, slice_n_didnt_break1, slice_n_after1) (__VB_C_RRB_F0(slice_m_before1) __VB_C_RRB_F0(slice_n_before1)), (__VB_C_RRB_F0(slice_n_before_step1) __VB_C_RRB_F0(slice_m_before_step1)), (__VB_C_RRB_F0(slice_m_before_each1) __VB_C_RRB_F0(slice_n_before_each1)), (__VB_C_RRB_F0(slice_m_after_each1) __VB_C_RRB_F0(slice_n_after_each1)), slice_n_after_step1, (__VB_C_RRB_F0(slice_m_didnt_break1) __VB_C_RRB_F0(slice_n_didnt_break1)), (__VB_C_RRB_F0(slice_m_after1) __VB_C_RRB_F0(slice_n_after1))          
                        // #pragma endregion
                    // #pragma endregion                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 

                    // #pragma region 3D                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 
                        // #pragma region normal

                                FOR ((i, j, k), el) IN TENSOR3_ITERATOR(arr, (m, n, o
                                FOR ((i, j, k), el) IN TENSOR3_ITERATOR(arr, (m, n, o) SLICED_BY(COUNT(...), COUNT(...), COUNT(...))) // no comma

                            #define TENSOR3_ITERATOR(...) __VB_C_TENSOR3_ITERABLE_F0(__VA_ARGS__)                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        
                            #define __VB_C_TENSOR3_ITERABLE_F0(arr0, dim1, ...) __VB_C_TENSOR3_ITERABLE_F1(arr0, __VB_C_RRB_F0(dim1), __VB_C_HAS_ARGX_F0(__VA_ARGS__), __VA_ARGS__)                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      
                            #define __VB_C_TENSOR3_ITERABLE_F1(...) __VB_C_TENSOR3_ITERABLE_F2(__VA_ARGS__)                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              
                            #define __VB_C_TENSOR3_ITERABLE_F2(arr0, m0, n0, o0, has_slice, ...) __VB_C_TENSOR3_ITERABLE_F2_ ## has_slice ## _F0(arr0, m0, n0, o
                            #define __VB_C_TENSOR3_ITERABLE_F2_0_F0(arr0, m0, n0, o0,                                                                                                        ...) __VB_C_TENSOR3_ITERATOR_NO_SLICE_F0, (arr0, m0, n0, o
                            // #define __VB_C_TENSOR3_ITERABLE_F2_1_F0(...) #__VA_ARGS__                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 
                            #define __VB_C_TENSOR3_ITERABLE_F2_1_F0(arr0, m0, n0, o0, slice_m, slice_m_f0, slice_m_args1, slice_m_modifiers1, slice_n_f0, slice_n_args1, slice_n_modifiers1, slice_o_f0, slice_o_args1, slice_o_modifiers1, ...) __VB_C_TENSOR3_ITERATOR_SLICE_F0   , (arr0, m0, n0, o0, __VB_C_TENSOR3_ITERABLE_HANDLE_SLICE_F0(__VB_C_TENSOR3_VAR_m, slice_m_f0, slice_m_args1, slice_m_modifiers1), __VB_C_TENSOR3_ITERABLE_HANDLE_SLICE_F0(__VB_C_TENSOR3_VAR_n, slice_n_f0, slice_n_args1, slice_n_modifiers1), __VB_C_TENSOR3_ITERABLE_HANDLE_SLICE_F0(__VB_C_TENSOR3_VAR_o, slice_o_f0, slice_o_args1, slice_o_modifiers1)), ()                                                                                                                                                                                   

                            #define __VB_C_TENSOR3_ITERABLE_HANDLE_SLICE_F0(                           tensor3_dim0, slice_f0, slice_args1, slice_modifiers1) slice_f0, __VB_C_MATRIX_SLICE_INSERT_UPPER_BOUND_F1(tensor3_dim0, __VB_C_RRB_F0(slice_args1)), __VB_C_COUNT_SET_VAR_PREFIX_F0(__VB_C_TENSOR3_SLICE_VAR, slice_modifiers1)                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  

                            #define __VB_C_TENSOR3_HANDLE_VAR_F0(ijk_var2) __VB_C_RRB3_F0(ijk_var

                            #define __VB_C_TENSOR3_ITERATOR_NO_SLICE_F0(                   ijk_var2  , tinfo1, iter_args1, iter_modifiers1) __VB_C_TENSOR3_ITERATOR_NO_SLICE_F1(__VB_C_TENSOR3_HANDLE_VAR_F0(ijk_var2), tinfo1, __VB_C_RRB_F0(iter_args1), __VB_C_RRB_F0(iter_modifiers
                            #define __VB_C_TENSOR3_ITERATOR_NO_SLICE_F1(                      ...)                                         __VB_C_TENSOR3_ITERATOR_NO_SLICE_F2(__VA_ARGS__)                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          
                            // #define __VB_C_TENSOR3_ITERATOR_NO_SLICE_F2(                    ...) 22#__VA_ARGS__ 22                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                
                            #define __VB_C_TENSOR3_ITERATOR_NO_SLICE_F2(                    i0, j0, k0, var0, tinfo1, arr0, m0, n0, o0, ...)         __VB_C_TENSOR3_ITERATOR_NO_SLICE_F2 ## __VA_ARGS__ ## _F0(i0, j0, k0, var0, tinfo1, arr0, m0, n0, o
                            #define __VB_C_TENSOR3_ITERATOR_NO_SLICE_F2_F0(                 i0, j0, k0, var0, tinfo1, arr0, m0, n0, o0)                                                                                                                     var0, (__VB_C_TYPE_RESOLVE_F0((* const __VB_C_TENSOR3_VAR_arr), tinfo1) = (void*) arr0; long const __VB_C_TENSOR3_VAR_m = m0; long const __VB_C_TENSOR3_VAR_n = n0; long const __VB_C_TENSOR3_VAR_o = o0; long __VB_C_TENSOR3_VAR_i = 0; long __VB_C_TENSOR3_VAR_j = 0; long __VB_C_TENSOR3_VAR_k = 0;  ), (if (__VB_C_TENSOR3_VAR_k >= __VB_C_TENSOR3_VAR_o) { __VB_C_TENSOR3_VAR_k = 0; ++__VB_C_TENSOR3_VAR_j; } if (__VB_C_TENSOR3_VAR_j >= __VB_C_TENSOR3_VAR_n) { __VB_C_TENSOR3_VAR_j = 0; ++__VB_C_TENSOR3_VAR_i; } if (__VB_C_TENSOR3_VAR_i >= __VB_C_TENSOR3_VAR_m) { STOP(var0); }), (                                   long const (i0) =                            __VB_C_TENSOR3_VAR_i; long const (j0) =                            __VB_C_TENSOR3_VAR_j; long const (k0) =                            __VB_C_TENSOR3_VAR_k; __VB_C_TYPE_RESOLVE_F0((* const var0), tinfo1) = &__VB_C_TENSOR3_VAR_arr[(i0 * __VB_C_TENSOR3_VAR_n + j0) * __VB_C_TENSOR3_VAR_o + k0];), ()               , (++__VB_C_TENSOR3_VAR_k;), (), ()                  
                            #define __VB_C_TENSOR3_ITERATOR_NO_SLICE_F2__VB_C_REVERSED_M_F0(i0, j0, k0, var0, tinfo1, arr0, m0, n0, o0)                                                                                                                     var0, (__VB_C_TYPE_RESOLVE_F0((* const __VB_C_TENSOR3_VAR_arr), tinfo1) = (void*) arr0; long const __VB_C_TENSOR3_VAR_m = m0; long const __VB_C_TENSOR3_VAR_n = n0; long const __VB_C_TENSOR3_VAR_o = o0; long __VB_C_TENSOR3_VAR_i = 0; long __VB_C_TENSOR3_VAR_j = 0; long __VB_C_TENSOR3_VAR_k = 0;  ), (if (__VB_C_TENSOR3_VAR_k >= __VB_C_TENSOR3_VAR_o) { __VB_C_TENSOR3_VAR_k = 0; ++__VB_C_TENSOR3_VAR_j; } if (__VB_C_TENSOR3_VAR_j >= __VB_C_TENSOR3_VAR_n) { __VB_C_TENSOR3_VAR_j = 0; ++__VB_C_TENSOR3_VAR_i; } if (__VB_C_TENSOR3_VAR_i >= __VB_C_TENSOR3_VAR_m) { STOP(var0); }), (                                   long const (i0) = __VB_C_TENSOR3_VAR_m - 1 - __VB_C_TENSOR3_VAR_i; long const (j0) = __VB_C_TENSOR3_VAR_n - 1 - __VB_C_TENSOR3_VAR_j; long const (k0) = __VB_C_TENSOR3_VAR_o - 1 - __VB_C_TENSOR3_VAR_k; __VB_C_TYPE_RESOLVE_F0((* const var0), tinfo1) = &__VB_C_TENSOR3_VAR_arr[(i0 * __VB_C_TENSOR3_VAR_n + j0) * __VB_C_TENSOR3_VAR_o + k0];), ()               , (++__VB_C_TENSOR3_VAR_k;), (), ()                  

                            #define __VB_C_TENSOR3_ITERATOR_SLICE_F0(                    ijk_var2, tinfo1, iter_args1, iter_modifiers1)                                                                                                              __VB_C_TENSOR3_ITERATOR_SLICE_F1(__VB_C_TENSOR3_HANDLE_VAR_F0(ijk_var2), tinfo1, __VB_C_RRB_F0(iter_args1), __VB_C_RRB_F0(iter_modifiers
                            #define __VB_C_TENSOR3_ITERATOR_SLICE_F1(                                                                                           ...)                                                                               __VB_C_TENSOR3_ITERATOR_SLICE_F2(__VA_ARGS__)                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     
                            #define __VB_C_TENSOR3_ITERATOR_SLICE_F2(                    i0, j0, k0, var0, tinfo1, arr0, m0, n0, o0, slice_m_f0, slice_m_args1, slice_m_modifiers1, slice_n_f0, slice_n_args1, slice_n_modifiers1, slice_o_f0, slice_o_args1, slice_o_modifiers1, ...)                                                                             __VB_C_TENSOR3_ITERATOR_SLICE_F3(i0, j0, k0, var0, tinfo1, arr0, m0, n0, o0, __VA_ARGS__, __VB_C_TENSOR3_CALL_SLICE_F0(slice_m_f0, slice_m_args1, __VB_C_COUNT_SET_NAME_F0(var0, slice_m_modifiers1), slice_n_f0, slice_n_args1, __VB_C_COUNT_SET_NAME_F0(var0, slice_n_modifiers1), slice_o_f0, slice_o_args1, __VB_C_COUNT_SET_NAME_F0(var0, slice_o_modifiers1)))                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              
                            #define __VB_C_TENSOR3_ITERATOR_SLICE_F3(                                                                                               ...)                                                                               __VB_C_TENSOR3_ITERATOR_SLICE_F4(__VA_ARGS__)                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 
                            // #define __VB_C_TENSOR3_ITERATOR_SLICE_F4(                                                                                               ...)                                                                             [[[__VA_ARGS__]]] //  __VB_C_TENSOR3_ITERATOR_SLICE_F4(__VA_ARGS__)                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          
                            #define __VB_C_TENSOR3_ITERATOR_SLICE_F4(                    i0, j0, k0, var0, tinfo1, arr0, m0, n0, o0, reversed_m, slice_before1, slice_before_step1, slice_before_each1, slice_after_each1, slice_after_step1, slice_didnt_break1, slice_after1, ...) __VB_C_TENSOR3_ITERATOR_SLICE_F4 ## reversed_m ## _F0(i0, j0, k0, var0, tinfo1, arr0, m0, n0, o0, slice_before1, slice_before_step1, slice_before_each1, slice_after_each1, slice_after_step1, slice_didnt_break1, slice_after
                            #define __VB_C_TENSOR3_ITERATOR_SLICE_F4_F0(                 i0, j0, k0, var0, tinfo1, arr0, m0, n0, o0,             slice_before1, slice_before_step1, slice_before_each1, slice_after_each1, slice_after_step1, slice_didnt_break1, slice_after1) var0, (__VB_C_TYPE_RESOLVE_F0((* const __VB_C_TENSOR3_VAR_arr), tinfo1) = (void*) arr0; long const __VB_C_TENSOR3_VAR_m = m0; long const __VB_C_TENSOR3_VAR_n = n0; long const __VB_C_TENSOR3_VAR_o = o0; __VB_C_RRB_F0(slice_before1)                                                                  ), slice_before_step1                                                                                                                                                                                                                                                                 , (__VB_C_RRB_F0(slice_before_each1) if (!__VB_C_ARRAY_INTERVAL_CHECK(0, __VB_C_TENSOR3_VAR_i, __VB_C_TENSOR3_VAR_m) || !__VB_C_ARRAY_INTERVAL_CHECK(0, __VB_C_TENSOR3_VAR_j, __VB_C_TENSOR3_VAR_n) || !__VB_C_ARRAY_INTERVAL_CHECK(0, __VB_C_TENSOR3_VAR_k, __VB_C_TENSOR3_VAR_o)) { STOP(var0); } long const (i0) =                            __VB_C_TENSOR3_VAR_i; long const (j0) =                            __VB_C_TENSOR3_VAR_j; long const (k0) =                            __VB_C_TENSOR3_VAR_k; __VB_C_TYPE_RESOLVE_F0((* const var0), tinfo1) = &__VB_C_TENSOR3_VAR_arr[(i0 * __VB_C_TENSOR3_VAR_n + j0) * __VB_C_TENSOR3_VAR_o + k0];), slice_after_each1, slice_after_step1, slice_didnt_break1, slice_after1          
                            #define __VB_C_TENSOR3_ITERATOR_SLICE_F4__VB_C_REVERSED_M_F0(i0, j0, k0, var0, tinfo1, arr0, m0, n0, o0,             slice_before1, slice_before_step1, slice_before_each1, slice_after_each1, slice_after_step1, slice_didnt_break1, slice_after1) var0, (__VB_C_TYPE_RESOLVE_F0((* const __VB_C_TENSOR3_VAR_arr), tinfo1) = (void*) arr0; long const __VB_C_TENSOR3_VAR_m = m0; long const __VB_C_TENSOR3_VAR_n = n0; long const __VB_C_TENSOR3_VAR_o = o0; __VB_C_RRB_F0(slice_before1)                                                                  ), slice_before_step1                                                                                                                                                                                                                                                                 , (__VB_C_RRB_F0(slice_before_each1) if (!__VB_C_ARRAY_INTERVAL_CHECK(0, __VB_C_TENSOR3_VAR_i, __VB_C_TENSOR3_VAR_m) || !__VB_C_ARRAY_INTERVAL_CHECK(0, __VB_C_TENSOR3_VAR_j, __VB_C_TENSOR3_VAR_n) || !__VB_C_ARRAY_INTERVAL_CHECK(0, __VB_C_TENSOR3_VAR_k, __VB_C_TENSOR3_VAR_o)) { STOP(var0); } long const (i0) = __VB_C_TENSOR3_VAR_m - 1 - __VB_C_TENSOR3_VAR_i; long const (j0) = __VB_C_TENSOR3_VAR_n - 1 - __VB_C_TENSOR3_VAR_j; long const (k0) = __VB_C_TENSOR3_VAR_o - 1 - __VB_C_TENSOR3_VAR_k; __VB_C_TYPE_RESOLVE_F0((* const var0), tinfo1) = &__VB_C_TENSOR3_VAR_arr[(i0 * __VB_C_TENSOR3_VAR_n + j0) * __VB_C_TENSOR3_VAR_o + k0];), slice_after_each1, slice_after_step1, slice_didnt_break1, slice_after1          

                            #define __VB_C_TENSOR3_SLICE_STOP_F0(name

                            #define __VB_C_TENSOR3_CALL_SLICE_F0(slice_m_f0, slice_m_args1, slice_m_modifiers1, slice_n_f0, slice_n_args1, slice_n_modifiers1, slice_o_f0, slice_o_args1, slice_o_modifiers1) __VB_C_TENSOR3_CALL_SLICE_F1(slice_m_f0((__VB_C_TENSOR3_VAR_i), (((long const))), slice_m_args1, __VB_C_COUNT_SET_VAR_PREFIX_F0(__VB_C_TENSOR3_SLICE_VAR_m, slice_m_modifiers1)), slice_n_f0, slice_n_args1, slice_n_modifiers1, slice_o_f0, slice_o_args1, slice_o_modifiers
                            #define __VB_C_TENSOR3_CALL_SLICE_F1(...) __VB_C_TENSOR3_CALL_SLICE_F2(__VA_ARGS__)                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      
                            // #define __VB_C_MATRIX_CALL_SLICE_F2(...) (__VA_ARGS__), (), (), (), (), ()                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            
                            #define __VB_C_TENSOR3_CALL_SLICE_F2(_, slice_m_before1, slice_m_before_step1, slice_m_before_each1, slice_m_after_each1, slice_m_after_step1, slice_m_didnt_break1, slice_m_after1, slice_n_f0, slice_n_args1, slice_n_modifiers1, slice_o_f0, slice_o_args1, slice_o_modifiers1) __VB_C_TENSOR3_CALL_SLICE_F3(slice_m_before1, slice_m_before_step1, slice_m_before_each1, slice_m_after_each1, slice_m_after_step1, slice_m_didnt_break1, slice_m_after1, slice_n_f0((__VB_C_TENSOR3_VAR_j), (((long const))), slice_n_args1, __VB_C_COUNT_SET_STOP_F0((__VB_C_TENSOR3_SLICE_STOP_F0, ({ __VB_C_RRB_F0(slice_m_after_step1) __VB_C_TENSOR3_SLICE_VAR_n_i = 0; })), __VB_C_COUNT_SET_VAR_PREFIX_F0(__VB_C_TENSOR3_SLICE_VAR_n, slice_n_modifiers1))), slice_o_f0, slice_o_args1, slice_o_modifiers
                            #define __VB_C_TENSOR3_CALL_SLICE_F3(...) __VB_C_TENSOR3_CALL_SLICE_F4(__VA_ARGS__)                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      
                            #define __VB_C_TENSOR3_CALL_SLICE_F4(slice_m_before1, slice_m_before_step1, slice_m_before_each1, slice_m_after_each1, slice_m_after_step1, slice_m_didnt_break1, slice_m_after1, _, slice_n_before1, slice_n_before_step1, slice_n_before_each1, slice_n_after_each1, slice_n_after_step1, slice_n_didnt_break1, slice_n_after1, slice_o_f0, slice_o_args1, slice_o_modifiers1)                              __VB_C_TENSOR3_CALL_SLICE_F5((__VB_C_RRB_F0(slice_m_before1) __VB_C_RRB_F0(slice_n_before1)), (__VB_C_RRB_F0(slice_m_before_step1) __VB_C_RRB_F0(slice_n_before_step1)), (__VB_C_RRB_F0(slice_m_before_each1) __VB_C_RRB_F0(slice_n_before_each1)), (__VB_C_RRB_F0(slice_m_after_each1) __VB_C_RRB_F0(slice_n_after_each1)), slice_n_after_step1, (__VB_C_RRB_F0(slice_m_didnt_break1) __VB_C_RRB_F0(slice_n_didnt_break1)), (__VB_C_RRB_F0(slice_m_after1) __VB_C_RRB_F0(slice_n_after1)), slice_o_f0((__VB_C_TENSOR3_VAR_k), (((long const))), slice_o_args1, __VB_C_COUNT_SET_STOP_F0((__VB_C_TENSOR3_SLICE_STOP_F0, ({ __VB_C_RRB_F0(slice_n_after_step1) __VB_C_TENSOR3_SLICE_VAR_o_i = 0; })), __VB_C_COUNT_SET_VAR_PREFIX_F0(__VB_C_TENSOR3_SLICE_VAR_o, slice_o_modifiers1))))                                                                                                                                                                                                            
                            #define __VB_C_TENSOR3_CALL_SLICE_F5(...) __VB_C_TENSOR3_CALL_SLICE_F6(__VA_ARGS__)                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      
                            #define __VB_C_TENSOR3_CALL_SLICE_F6(slice_mn_before1, slice_mn_before_step1, slice_mn_before_each1, slice_mn_after_each1, slice_mn_after_step1, slice_mn_didnt_break1, slice_mn_after1, _, slice_o_before1, slice_o_before_step1, slice_o_before_each1, slice_o_after_each1, slice_o_after_step1, slice_o_didnt_break1, slice_o_after1) (__VB_C_RRB_F0(slice_mn_before1) __VB_C_RRB_F0(slice_o_before1)), (__VB_C_RRB_F0(slice_mn_before_step1) __VB_C_RRB_F0(slice_o_before_step1)), (__VB_C_RRB_F0(slice_mn_before_each1) __VB_C_RRB_F0(slice_o_before_each1)), (__VB_C_RRB_F0(slice_mn_after_each1) __VB_C_RRB_F0(slice_o_after_each1)), slice_o_after_step1, (__VB_C_RRB_F0(slice_mn_didnt_break1) __VB_C_RRB_F0(slice_o_didnt_break1)), (__VB_C_RRB_F0(slice_mn_after1) __VB_C_RRB_F0(slice_o_after
                        // #pragma endregion

                        // #pragma region void                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       

                                FOR ((i, j, k), el) IN VOID_TENSOR3_ITERATOR(arr, (m, n, o))                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         
                                FOR ((i, j, k), el) IN VOID_TENSOR3_ITERATOR(arr, (m, n, o) SLICED_BY(COUNT(...), COUNT(...), COUNT(...))) // no comma
                            */                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       
                            #define VOID_TENSOR3_ITERATOR(...) __VB_C_VOID_TENSOR3_ITERABLE_F0(__VA_ARGS__)                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          
                            #define __VB_C_VOID_TENSOR3_ITERABLE_F0(arr0, size0, dim1, ...) __VB_C_VOID_TENSOR3_ITERABLE_F1(arr0, size0, __VB_C_RRB_F0(dim
                            #define __VB_C_VOID_TENSOR3_ITERABLE_F1(...) __VB_C_VOID_TENSOR3_ITERABLE_F2(__VA_ARGS__)                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                
                            #define __VB_C_VOID_TENSOR3_ITERABLE_F2(arr0, size0, m0, n0, o0, has_slice, ...) __VB_C_VOID_TENSOR3_ITERABLE_F2_ ## has_slice ## _F0(arr0, size0, m0, n0, o
                            #define __VB_C_VOID_TENSOR3_ITERABLE_F2_0_F0(arr0, size0, m0, n0, o0,                                                                                                        ...) __VB_C_VOID_TENSOR3_ITERATOR_NO_SLICE_F0, (arr0, size0, m0, n0, o
                            // #define
                            #define __VB_C_VOID_TENSOR3_ITERABLE_F2_1_F0(arr0, size0, m0, n0, o0, slice_m, slice_m_f0, slice_m_args1, slice_m_modifiers1, slice_n_f0, slice_n_args1, slice_n_modifiers1, slice_o_f0, slice_o_args1, slice_o_modifiers1, ...) __VB_C_VOID_TENSOR3_ITERATOR_SLICE_F0   , (arr0, size0, m0, n0, o0, __VB_C_VOID_TENSOR3_ITERABLE_HANDLE_SLICE_F0(__VB_C_VOID_TENSOR3_VAR_m, slice_m_f0, slice_m_args1, slice_m_modifiers1), __VB_C_VOID_TENSOR3_ITERABLE_HANDLE_SLICE_F0(__VB_C_VOID_TENSOR3_VAR_n, slice_n_f0, slice_n_args1, slice_n_modifiers1), __VB_C_VOID_TENSOR3_ITERABLE_HANDLE_SLICE_F0(__VB_C_VOID_TENSOR3_VAR_o, slice_o_f0, slice_o_args1, slice_o_modifiers

                            #define __VB_C_VOID_TENSOR3_ITERABLE_HANDLE_SLICE_F0(                           tensor3_dim0, slice_f0, slice_args1, slice_modifiers1) slice_f0, __VB_C_MATRIX_SLICE_INSERT_UPPER_BOUND_F1(tensor3_dim0, __VB_C_RRB_F0(slice_args1)), __VB_C_COUNT_SET_VAR_PREFIX_F0(__VB_C_VOID_TENSOR3_SLICE_VAR, slice_modifiers

                            #define __VB_C_VOID_TENSOR3_HANDLE_VAR_F0(ijk_var2) __VB_C_RRB3_F0(ijk_var

                            #define __VB_C_VOID_TENSOR3_ITERATOR_NO_SLICE_F0(                   ijk_var2  , tinfo1, iter_args1, iter_modifiers1) __VB_C_VOID_TENSOR3_ITERATOR_NO_SLICE_F1(__VB_C_VOID_TENSOR3_HANDLE_VAR_F0(ijk_var2), __VB_C_VOID_INSERT_TYPE_F0(tinfo1), __VB_C_RRB_F0(iter_args1), __VB_C_RRB_F0(iter_modifiers1))                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             
                            #define __VB_C_VOID_TENSOR3_ITERATOR_NO_SLICE_F1(                      ...)                                         __VB_C_VOID_TENSOR3_ITERATOR_NO_SLICE_F2(__VA_ARGS__)                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             
                            // #define
                            #define __VB_C_VOID_TENSOR3_ITERATOR_NO_SLICE_F2(                    i0, j0, k0, var0, qualifier1, arr0, size0, m0, n0, o0, ...)         __VB_C_VOID_TENSOR3_ITERATOR_NO_SLICE_F2 ## __VA_ARGS__ ## _F0(i0, j0, k0, var0, qualifier1, arr0, size0, m0, n0, o
                            #define __VB_C_VOID_TENSOR3_ITERATOR_NO_SLICE_F2_F0(                 i0, j0, k0, var0, qualifier1, arr0, size0, m0, n0, o0)                                                                                                                     var0, (int const __VB_C_VOID_TENSOR3_VAR_size = size0; char __VB_C_RRB_F0(qualifier1)* const __VB_C_VOID_TENSOR3_VAR_arr = (void*) arr0; long const __VB_C_VOID_TENSOR3_VAR_m = m0; long const __VB_C_VOID_TENSOR3_VAR_n = n0; long const __VB_C_VOID_TENSOR3_VAR_o = o0; long __VB_C_VOID_TENSOR3_VAR_i = 0; long __VB_C_VOID_TENSOR3_VAR_j = 0; long __VB_C_VOID_TENSOR3_VAR_k = 0;  ), (if (__VB_C_VOID_TENSOR3_VAR_k >= __VB_C_VOID_TENSOR3_VAR_o) { __VB_C_VOID_TENSOR3_VAR_k = 0; ++__VB_C_VOID_TENSOR3_VAR_j; if (__VB_C_VOID_TENSOR3_VAR_j >= __VB_C_VOID_TENSOR3_VAR_n) { __VB_C_VOID_TENSOR3_VAR_j = 0; ++__VB_C_VOID_TENSOR3_VAR_i; if (__VB_C_VOID_TENSOR3_VAR_i >= __VB_C_VOID_TENSOR3_VAR_m) { STOP(var0); } } }), (                                   long const (i0) =                                 __VB_C_VOID_TENSOR3_VAR_i; long const (j0) =                                 __VB_C_VOID_TENSOR3_VAR_j; long const (k0) =                                 __VB_C_VOID_TENSOR3_VAR_k; void __VB_C_RRB_F0(qualifier1)* const var0 = &__VB_C_VOID_TENSOR3_VAR_arr[((i0 * __VB_C_VOID_TENSOR3_VAR_n + j0) * __VB_C_VOID_TENSOR3_VAR_o + k0) * __VB_C_VOID_TENSOR3_VAR_size];), ()               , (++__VB_C_VOID_TENSOR3_VAR_k;), (), ()               
                            #define __VB_C_VOID_TENSOR3_ITERATOR_NO_SLICE_F2__VB_C_REVERSED_M_F0(i0, j0, k0, var0, qualifier1, arr0, size0, m0, n0, o0)                                                                                                                     var0, (int const __VB_C_VOID_TENSOR3_VAR_size = size0; char __VB_C_RRB_F0(qualifier1)* const __VB_C_VOID_TENSOR3_VAR_arr = (void*) arr0; long const __VB_C_VOID_TENSOR3_VAR_m = m0; long const __VB_C_VOID_TENSOR3_VAR_n = n0; long const __VB_C_VOID_TENSOR3_VAR_o = o0; long __VB_C_VOID_TENSOR3_VAR_i = 0; long __VB_C_VOID_TENSOR3_VAR_j = 0; long __VB_C_VOID_TENSOR3_VAR_k = 0;  ), (if (__VB_C_VOID_TENSOR3_VAR_k >= __VB_C_VOID_TENSOR3_VAR_o) { __VB_C_VOID_TENSOR3_VAR_k = 0; ++__VB_C_VOID_TENSOR3_VAR_j; if (__VB_C_VOID_TENSOR3_VAR_j >= __VB_C_VOID_TENSOR3_VAR_n) { __VB_C_VOID_TENSOR3_VAR_j = 0; ++__VB_C_VOID_TENSOR3_VAR_i; if (__VB_C_VOID_TENSOR3_VAR_i >= __VB_C_VOID_TENSOR3_VAR_m) { STOP(var0); } } }), (                                   long const (i0) = __VB_C_VOID_TENSOR3_VAR_m - 1 - __VB_C_VOID_TENSOR3_VAR_i; long const (j0) = __VB_C_VOID_TENSOR3_VAR_n - 1 - __VB_C_VOID_TENSOR3_VAR_j; long const (k0) = __VB_C_VOID_TENSOR3_VAR_o - 1 - __VB_C_VOID_TENSOR3_VAR_k; void __VB_C_RRB_F0(qualifier1)* const var0 = &__VB_C_VOID_TENSOR3_VAR_arr[((i0 * __VB_C_VOID_TENSOR3_VAR_n + j0) * __VB_C_VOID_TENSOR3_VAR_o + k0) * __VB_C_VOID_TENSOR3_VAR_size];), ()               , (++__VB_C_VOID_TENSOR3_VAR_k;), (), ()               

                            #define __VB_C_VOID_TENSOR3_ITERATOR_SLICE_F0(                    ijk_var2, tinfo1, iter_args1, iter_modifiers1)                                                                                                              __VB_C_VOID_TENSOR3_ITERATOR_SLICE_F1(__VB_C_VOID_TENSOR3_HANDLE_VAR_F0(ijk_var2), __VB_C_VOID_INSERT_TYPE_F0(tinfo1), __VB_C_RRB_F0(iter_args1), __VB_C_RRB_F0(iter_modifiers
                            #define __VB_C_VOID_TENSOR3_ITERATOR_SLICE_F1(                                                                                           ...)                                                                               __VB_C_VOID_TENSOR3_ITERATOR_SLICE_F2(__VA_ARGS__)                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        
                            #define __VB_C_VOID_TENSOR3_ITERATOR_SLICE_F2(                    i0, j0, k0, var0, qualifier1, arr0, size0, m0, n0, o0, slice_m_f0, slice_m_args1, slice_m_modifiers1, slice_n_f0, slice_n_args1, slice_n_modifiers1, slice_o_f0, slice_o_args1, slice_o_modifiers1, ...)                                                                             __VB_C_VOID_TENSOR3_ITERATOR_SLICE_F3(i0, j0, k0, var0, qualifier1, arr0, size0, m0, n0, o0, __VA_ARGS__, __VB_C_VOID_TENSOR3_CALL_SLICE_F0(slice_m_f0, slice_m_args1, __VB_C_COUNT_SET_NAME_F0(var0, slice_m_modifiers1), slice_n_f0, slice_n_args1, __VB_C_COUNT_SET_NAME_F0(var0, slice_n_modifiers1), slice_o_f0, slice_o_args1, __VB_C_COUNT_SET_NAME_F0(var0, slice_o_modifiers1)))                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      
                            #define __VB_C_VOID_TENSOR3_ITERATOR_SLICE_F3(                                                                                               ...)                                                                               __VB_C_VOID_TENSOR3_ITERATOR_SLICE_F4(__VA_ARGS__)                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    
                            // #define
                            #define __VB_C_VOID_TENSOR3_ITERATOR_SLICE_F4(                    i0, j0, k0, var0, qualifier1, arr0, size0, m0, n0, o0, reversed_m, slice_before1, slice_before_step1, slice_before_each1, slice_after_each1, slice_after_step1, slice_didnt_break1, slice_after1, ...) __VB_C_VOID_TENSOR3_ITERATOR_SLICE_F4 ## reversed_m ## _F0(i0, j0, k0, var0, qualifier1, arr0, size0, m0, n0, o0, slice_before1, slice_before_step1, slice_before_each1, slice_after_each1, slice_after_step1, slice_didnt_break1, slice_after
                            #define __VB_C_VOID_TENSOR3_ITERATOR_SLICE_F4_F0(                 i0, j0, k0, var0, qualifier1, arr0, size0, m0, n0, o0,             slice_before1, slice_before_step1, slice_before_each1, slice_after_each1, slice_after_step1, slice_didnt_break1, slice_after1) var0, (int const __VB_C_VOID_TENSOR3_VAR_size = size0; char __VB_C_RRB_F0(qualifier1)* const __VB_C_VOID_TENSOR3_VAR_arr = (void*) arr0; long const __VB_C_VOID_TENSOR3_VAR_m = m0; long const __VB_C_VOID_TENSOR3_VAR_n = n0; long const __VB_C_VOID_TENSOR3_VAR_o = o0; __VB_C_RRB_F0(slice_before1)                                                                                 ), slice_before_step1                                                                                                                                                                                                                                                                                                                   , (__VB_C_RRB_F0(slice_before_each1) if (!__VB_C_ARRAY_INTERVAL_CHECK(0, __VB_C_VOID_TENSOR3_VAR_i, __VB_C_VOID_TENSOR3_VAR_m) || !__VB_C_ARRAY_INTERVAL_CHECK(0, __VB_C_VOID_TENSOR3_VAR_j, __VB_C_VOID_TENSOR3_VAR_n) || !__VB_C_ARRAY_INTERVAL_CHECK(0, __VB_C_VOID_TENSOR3_VAR_k, __VB_C_VOID_TENSOR3_VAR_o)) { STOP(var0); } long const (i0) =                                 __VB_C_VOID_TENSOR3_VAR_i; long const (j0) =                                 __VB_C_VOID_TENSOR3_VAR_j; long const (k0) =                                 __VB_C_VOID_TENSOR3_VAR_k; void __VB_C_RRB_F0(qualifier1)* const var0 = &__VB_C_VOID_TENSOR3_VAR_arr[((i0 * __VB_C_VOID_TENSOR3_VAR_n + j0) * __VB_C_VOID_TENSOR3_VAR_o + k0) * __VB_C_VOID_TENSOR3_VAR_size];), slice_after_each1, slice_after_step1, slice_didnt_break1, slice_after1            
                            #define __VB_C_VOID_TENSOR3_ITERATOR_SLICE_F4__VB_C_REVERSED_M_F0(i0, j0, k0, var0, qualifier1, arr0, size0, m0, n0, o0,             slice_before1, slice_before_step1, slice_before_each1, slice_after_each1, slice_after_step1, slice_didnt_break1, slice_after1) var0, (int const __VB_C_VOID_TENSOR3_VAR_size = size0; char __VB_C_RRB_F0(qualifier1)* const __VB_C_VOID_TENSOR3_VAR_arr = (void*) arr0; long const __VB_C_VOID_TENSOR3_VAR_m = m0; long const __VB_C_VOID_TENSOR3_VAR_n = n0; long const __VB_C_VOID_TENSOR3_VAR_o = o0; __VB_C_RRB_F0(slice_before1)                                                                                 ), slice_before_step1                                                                                                                                                                                                                                                                                                                   , (__VB_C_RRB_F0(slice_before_each1) if (!__VB_C_ARRAY_INTERVAL_CHECK(0, __VB_C_VOID_TENSOR3_VAR_i, __VB_C_VOID_TENSOR3_VAR_m) || !__VB_C_ARRAY_INTERVAL_CHECK(0, __VB_C_VOID_TENSOR3_VAR_j, __VB_C_VOID_TENSOR3_VAR_n) || !__VB_C_ARRAY_INTERVAL_CHECK(0, __VB_C_VOID_TENSOR3_VAR_k, __VB_C_VOID_TENSOR3_VAR_o)) { STOP(var0); } long const (i0) = __VB_C_VOID_TENSOR3_VAR_m - 1 - __VB_C_VOID_TENSOR3_VAR_i; long const (j0) = __VB_C_VOID_TENSOR3_VAR_n - 1 - __VB_C_VOID_TENSOR3_VAR_j; long const (k0) = __VB_C_VOID_TENSOR3_VAR_o - 1 - __VB_C_VOID_TENSOR3_VAR_k; void __VB_C_RRB_F0(qualifier1)* const var0 = &__VB_C_VOID_TENSOR3_VAR_arr[((i0 * __VB_C_VOID_TENSOR3_VAR_n + j0) * __VB_C_VOID_TENSOR3_VAR_o + k0) * __VB_C_VOID_TENSOR3_VAR_size];), slice_after_each1, slice_after_step1, slice_didnt_break1, slice_after1            

                            #define __VB_C_VOID_TENSOR3_SLICE_STOP_F0(name

                            #define __VB_C_VOID_TENSOR3_CALL_SLICE_F0(slice_m_f0, slice_m_args1, slice_m_modifiers1, slice_n_f0, slice_n_args1, slice_n_modifiers1, slice_o_f0, slice_o_args1, slice_o_modifiers1) __VB_C_VOID_TENSOR3_CALL_SLICE_F1(slice_m_f0((__VB_C_VOID_TENSOR3_VAR_i), (((long const))), slice_m_args1, __VB_C_COUNT_SET_VAR_PREFIX_F0(__VB_C_VOID_TENSOR3_SLICE_VAR_m, slice_m_modifiers1)), slice_n_f0, slice_n_args1, slice_n_modifiers1, slice_o_f0, slice_o_args1, slice_o_modifiers
                            #define __VB_C_VOID_TENSOR3_CALL_SLICE_F1(...) __VB_C_VOID_TENSOR3_CALL_SLICE_F2(__VA_ARGS__)                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    
                            // #define __VB_C_VOID_TENSOR3_CALL_SLICE_F2(...) ([[[__VA_ARGS__]]]), (), (), (), (), ()                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        
                            #define __VB_C_VOID_TENSOR3_CALL_SLICE_F2(_, slice_m_before1, slice_m_before_step1, slice_m_before_each1, slice_m_after_each1, slice_m_after_step1, slice_m_didnt_break1, slice_m_after1, slice_n_f0, slice_n_args1, slice_n_modifiers1, slice_o_f0, slice_o_args1, slice_o_modifiers1) __VB_C_VOID_TENSOR3_CALL_SLICE_F3(slice_m_before1, slice_m_before_step1, slice_m_before_each1, slice_m_after_each1, slice_m_after_step1, slice_m_didnt_break1, slice_m_after1, slice_n_f0((__VB_C_VOID_TENSOR3_VAR_j), (((long const))), slice_n_args1, __VB_C_COUNT_SET_STOP_F0((__VB_C_VOID_TENSOR3_SLICE_STOP_F0, ({ __VB_C_VOID_TENSOR3_SLICE_VAR_n_i = 0; __VB_C_RRB_F0(slice_m_after_step1) __VB_C_RRB_F0(slice_m_before_step1) })), __VB_C_COUNT_SET_VAR_PREFIX_F0(__VB_C_VOID_TENSOR3_SLICE_VAR_n, slice_n_modifiers1))), slice_o_f0, slice_o_args1, slice_o_modifiers1)                                                                                                                                                                                                                                                                                                                                                         
                            #define __VB_C_VOID_TENSOR3_CALL_SLICE_F3(...) __VB_C_VOID_TENSOR3_CALL_SLICE_F4(__VA_ARGS__)                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    
                            #define __VB_C_VOID_TENSOR3_CALL_SLICE_F4(slice_m_before1, slice_m_before_step1, slice_m_before_each1, slice_m_after_each1, slice_m_after_step1, slice_m_didnt_break1, slice_m_after1, _, slice_n_before1, slice_n_before_step1, slice_n_before_each1, slice_n_after_each1, slice_n_after_step1, slice_n_didnt_break1, slice_n_after1, slice_o_f0, slice_o_args1, slice_o_modifiers1)                              __VB_C_VOID_TENSOR3_CALL_SLICE_F5((__VB_C_RRB_F0(slice_m_before1) __VB_C_RRB_F0(slice_n_before1)), slice_n_before_step1, (__VB_C_RRB_F0(slice_m_before_each1) __VB_C_RRB_F0(slice_n_before_each1)), (__VB_C_RRB_F0(slice_m_after_each1) __VB_C_RRB_F0(slice_n_after_each1)), slice_n_after_step1, (__VB_C_RRB_F0(slice_m_didnt_break1), __VB_C_RRB_F0(slice_n_didnt_break1)), (__VB_C_RRB_F0(slice_m_after1) __VB_C_RRB_F0(slice_n_after1)), slice_o_f0((__VB_C_VOID_TENSOR3_VAR_k), (((long const))), slice_o_args1, __VB_C_COUNT_SET_STOP_F0((__VB_C_VOID_TENSOR3_SLICE_STOP_F0, ({ __VB_C_VOID_TENSOR3_SLICE_VAR_o_i = 0; __VB_C_RRB_F0(slice_n_after_step1) __VB_C_RRB_F0(slice_n_before_step1)})), __VB_C_COUNT_SET_VAR_PREFIX_F0(__VB_C_VOID_TENSOR3_SLICE_VAR_o, slice_o_modifiers1))))                
                            #define __VB_C_VOID_TENSOR3_CALL_SLICE_F5(...) __VB_C_VOID_TENSOR3_CALL_SLICE_F6(__VA_ARGS__)                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    
                            #define __VB_C_VOID_TENSOR3_CALL_SLICE_F6(slice_mn_before1, slice_mn_before_step1, slice_mn_before_each1, slice_mn_after_each1, slice_mn_after_step1, slice_mn_didnt_break1, slice_mn_after1, _, slice_o_before1, slice_o_before_step1, slice_o_before_each1, slice_o_after_each1, slice_o_after_step1, slice_o_didnt_break1, slice_o_after1) (__VB_C_RRB_F0(slice_mn_before1) __VB_C_RRB_F0(slice_o_before1)), slice_o_before_step1, (__VB_C_RRB_F0(slice_mn_before_each1) __VB_C_RRB_F0(slice_o_before_each1)), (__VB_C_RRB_F0(slice_mn_after_each1) __VB_C_RRB_F0(slice_o_after_each1)), slice_o_after_step1, (__VB_C_RRB_F0(slice_mn_didnt_break1) __VB_C_RRB_F0(slice_o_didnt_break1)), (__VB_C_RRB_F0(slice_mn_after1) __VB_C_RRB_F0(slice_o_after1))                                                                                                                                                                                                                                                                                                                                                                                                                                                                      
                        // #pragma endregion
                    // #pragma endregion
                // #pragma endregion                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         
            // #pragma endregion
        // #pragma endregion                                                                                                    
    // #pragma endregion                                                                                                        
                                                                                                                                
    // TODO: write check if correct keyword                                                                                     
    // #define __VB_C_CHECK_KEYWORD_F0(msg, mark, ...) if mark not in __VA_ARGS__ then (=== VB.C ERROR : msg  ===)              
#endif // VB_H                                                                                                                  





